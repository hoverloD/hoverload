{"pages":[{"title":"About","text":"新年新气象，hoverload换了个新博客。这是本人第三个个人博客。 今年考研，计划好好备考，同时提升开发技能、保证博客质量，也算是劳逸结合了。 本网站使用的美术素材来自かずのこ @kazunoko_zunoco。","link":"/about/"},{"title":"Links","text":"","link":"/links/"}],"posts":[{"title":"GTD时间管理","text":"","link":"/2022/01/10/GTD%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"},{"title":"JSON必知必会","text":"概要 前三章 JSON语法第四章 Schema做一致性检验第五章 安全问题第六章 Ajax，API，跨域和JSON-P— 下面几章就很浅了 —第七章 jQuery，Angular框架第八章 NoSQL第九章 服务端的JSON第十章 JSON作为配置文件 JSON语法JSON语法是JavaScript的真子集，但它是独立于编程语言的一种数据交换格式。 数据交换格式的核心是数据，所以 JSON 中并不会涉及 JavaScript 对象字面量中的函数。JSON 所基于的 JavaScript 对象字面量单纯指对象字面量及其属性的语法表示。这种属性表示方法也就是通过名称 - 值对来实现的。 名称只能用双引号包裹，里面名称甚至可以放单引号。但是 ↓ 命名规范为了获得最大可移植性，应尽可能避免使用空格或特殊字符。 JSON 中的名称 - 值对的名称如果被系统作为对象装入内存的话，将会成为“属性”。在部分系统中，属性名可以包含下划线或数字，但是大多数情况下最好是使用英文字母 AZ 或 az。 ——我选择驼峰 JSON对象有意思所以。。 注意逗号 如果你在名称 - 值对列表的结尾处加上一个逗号，你给机器的指令是“一个新部分的开始”，但是后面什么都没有。 JSON的媒体类型当你在传递数据时，需要提前告知接收方数据是什么类型，这就会涉及媒体类型。媒体类型也有一些你可能听过的其他称呼，如“互联网媒体类型”“内容类型”或“MIME 类型”。它使用“类型 / 子类型”这种格式来表示，比如你可能见过的 text/html。 JSON 的 MIME 类型是 application/json。 互联网数字分配机构（Internet Assigned Numbers Authority，IANA）维护着一个包含全部媒体类型的列表（http://www.iana.org/assignments/media-types/media-types.xhtml）。 JSON Schema🔗JSON Schema 规范（中文版） (apifox.cn) JSON Schema （schema意为格式）可以帮助回答下列问题： 值的数据类型是否正确？ 可以具体规定一个值是数字、字符串等类型。 是否包含所需要的数据？ 可以具体规定哪些数据是需要的，哪些是不需要的。 值的形式是不是我需要的？ 可以指定范围、最小值和最大值 一个JSON Schema 文件，它就是JSON格式的。 123456789101112131415161718192021222324{ &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;, &quot;title&quot;: &quot;Cat&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; &quot;minLength&quot;: 3, &quot;maxLength&quot; : 20 }, &quot;age&quot;: { &quot;type&quot;: &quot;number&quot;, &quot;description&quot;: &quot;Your cat's age in years.&quot; &quot;minimum&quot; : 0 }, &quot;declawed&quot;: { &quot;type&quot;: &quot;boolean&quot; } }, &quot;required&quot;: [ &quot;name&quot;, &quot;age&quot;, &quot;declawed&quot; ]} 本章提供的例子只是简介，是冰山一角。JSON Schema 还支持正则表达式（一种字符形式，比如电子邮件地址的格式）以及枚举类型（一个包含所有可能值的列表）。如果你希望深入掌握 JSON Schema，可以访问下面的链接，了解相关规范： JSON Schema 主页（http://json-schema.org/） JSON Schema 验证规范（http://json-schema.org/latest/json-schema-validation. html） 附加一个Linter知识： 是做语法验证的，而schema是检测语义是否合法 JS Linter 进化史 - 知乎 (zhihu.com) JSON安全坦白：并没做攻防实践🥺 跨站请求伪造跨站请求伪造，即 CSRF（cross-site request forgery，读作 sea-surf），是一种 利用站点对用户浏览器信任而发起攻击的方式。CSRF 漏洞已经存在了很长时间，远比 JSON 出现得早。 跨站脚本攻击注入攻击：依赖于将数据注入到 Web 应用程序以方便恶意数据执行或编译的攻击 总结 不要使用顶级数组。顶级数组是合法的 JavaScript 脚本，它们可以用&lt;script&gt;标签链接并使用。而如果是个对象，就不会被成功解析。 对于不想公开的资源，仅允许使用 HTTP POST 方法请求，而不是 GET方法。GET 方法可以通过 URL 来请求，甚至可以放在&lt;script&gt;标签中。 使用 JSON.parse() 来代替 eval()。eval() 函数会将传入的字符串编译并执行，这会让你的代码易被攻击。应仅使用 JSON.parse() 来解析 JSON 数据。 零碎Web API🔗Web API简介 - 学习 Web 开发 | MDN (mozilla.org) Web API的服务内容和普通网站差不多，但是它并不是用来拿给人看的🐶 Web API 是通过 HTTP 服务进行交互的一组指令和标准。这些交互可以包括创建、读取、更新、删除（CRUD）等操作，且 Web API 都会有一份说明，概述如何使用这些指令和标准。 （是一个对诸如 HTML 或 JSON 文档等资源进行请求和响应的系统。这些文档使用URL经由 HTTP请求。） Angular适合MVC的框架，和React、Vue不同，提供了更完整的解决方案。 NoSQLNoSQL，顾名思义，它不是一种关系型数据库。我们不能使用 SQL 从关联在一起的数据库表格的行和列中获取数据。 NoSQL 数据库的一个例子是键值对存储。键值对存储模型将数据简化为键值对。如果要将英语词典编入数据库，那么用键值对存储非常合适。每一个单词就是一个键，单词对应的定义就是键的值。对于比较简单的数据结构来说，使用这种数据库比使用传统的关系型数据库要合适。（如果想将一个地址的省、市、区、街道和邮政编码等数据相关联，该怎么办？如果需要这种关系，那最好还是使用关系型模型，毕竟将复杂的关系用一个文档来表示还是很有难度的。） 服务端JSONASP、PHP的：序列化，反序列化，请求json 发送JSON HTTP请求的其他方式：Ruby on Rails，Java，Node.js 配置文件软件中经常会有配置文件或设置文件，它让我们可以不必重新编译就能修改设置。配置文件的格式有很多，有 INI 和 XML 等。每种格式都有优点和缺点。 现实中一个使用 JSON 作为配置文件的极佳例子就是 Node.js 默认的 JavaScript 包管理器：npm（文件名称为 package.json。该文件包含了每个包的具体信息，如名称、版本、作者、贡献者、依赖、脚本以及许可）。当然，它也被 AngularJS 和 jQuery 等其他框架使用。","link":"/2022/01/15/JSON%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"},{"title":"NUDTcourse开发日志","text":"这不是软件计划书or升级日志，是写给自己的报告：知识点整理、相关工具的配置和使用、debug过程，目的：记录开发收获，便于回顾总结，力求简练。 NUDTcourse是数据库课要求的一个信息管理系统项目，前后端分离，使用react、LNMP。 导出excel后端：POI、easyExcel（都是java） 前端：js实现： js文件操作之——导出Excel (js-xlsx) - youryida - 博客园 (cnblogs.com) 基于前端JS导出Excel文件（减轻服务端压力） - 云+社区 - 腾讯云 (tencent.com) bug: php中文乱码 php从数据库取的数据是??： 解决：php里加上mysqli_query($con,&quot;SET NAMES 'utf8mb4'&quot;); php的array转码后变成了unicode码：{&quot;S1&quot;:&quot;\\u59d3\\u540d&quot;:&quot;\\u8d75\\u4ea6&quot;,&quot;\\u6027\\u522b&quot;:&quot;\\u5973&quot;,&quot;\\u5e74\\u9f84&quot;:&quot;17&quot;,&quot;\\u7cfb\\u522b&quot;:&quot;\\u5973&quot;}... 解决：给json_encode加上第二个参数JSON_UNESCAPED_UNICODE。 php json_encode 中文不转码-php教程-PHP中文网 PHP json_encode函数的参数说明 - 范仁义 - 博客园 (cnblogs.com) 语法npmnpm常用命令及参数详解 - SegmentFault 思否 使用“npm init”初始化项目 - 你是远方 - 博客园 (cnblogs.com) Art-template一开始使用了art-template，换react后就用jsx处理了，主要就是循环生成列表、表格，其他功能不太用的上。 模板引擎 – art-template 现在还有学习模版引擎的必要吗 前端模版引擎 - artTemplate 【上】 - 简书 (jianshu.com) (有两个详细的demo!!) 前端模版引擎 - art-template 【下】 - 简书 (jianshu.com) template(temid, json)如果接收不到json或者第二个参数其实是空的，返回的不是渲染好的html而是编译了一个渲染函数（看见函数里边有的字符都被转义了还有很多\\n，不懂，懵逼） 如果返回回来的 JSON 数据是类似数组数据的话，是没有办法直接渲染的。需要对数据做如下包装，才能正常渲染： 123456789101112131415template:&lt;tbody&gt; {{each student value}} &lt;tr&gt; &lt;td&gt;{{value.studentNumber}}&lt;/td&gt; &lt;td&gt;{{value.name}}&lt;/td&gt; &lt;td&gt;{{value.gender}}&lt;/td&gt; &lt;td&gt;{{value.age}}&lt;/td&gt; &lt;td&gt;{{value.major}}&lt;/td&gt; &lt;/tr&gt; {{/each}}&lt;/tbody&gt;json格式:{&quot;student&quot;: php返回的json数组，里面每组的参数：studentNumber、name...} js如何将json对象转成数组??? - SegmentFault 思否 js字符串的裁剪 - 狗尾草的博客 - 博客园 (cnblogs.com) JSON使用变量123456// 定义空对象let json = {};// 使用变量作为key，只能这种写法，否则变量名会被当成字符串// 例如json.k，作用和json = { k: &quot;value&quot; }、json.k = &quot;value&quot;一样let k = &quot;。。。&quot;;json[k] = &quot;value&quot;; 异步问题本来写成两个函数load、render结果render接受不到json。 ajax是典型的异步编程，必须学会回调函数、then（关于promise）。等前面语句运行完有了结果，再执行下面的。 Promise.prototype.then() - JavaScript | MDN (mozilla.org) 123456789function render(tempID, url, id) { fetch(url) .then(response =&gt; response.json()) .then(function(data) { let html = template(tempID, { &quot;student&quot;: data }); document.getElementById(id).innerHTML = html; console.log({ &quot;student&quot;: data }); });} phpphp字符串拼接 - museluo - 博客园 (cnblogs.com) 多行字符串 1234567891011&lt;?php$str=&lt;&lt;&lt;STR'ok',&quot;hello&quot;I will{$str1}STR;/****其中三个小于号代表多行字符串的输入，STR是字符串界定符，界定符的名字可以自己定义，两个界定符之间的内容就是多行字符串。其中的单引号双引号可以直接输出而不必转义，当然里面也可以直接插入变量，输出是会自动替换变量值的****/?&gt; 管理技巧MVP产品原则开发一个最小的可行产品，从而快速试错。每次迭代，焦点都在核心流程上 前后端对接RESTful⚠还未良好实践 鉴权⚠还未良好实践 HMAChmac主要应用在身份验证中，如下是它的使用过程： 1. 客户端发出登录请求（假设是浏览器的GET请求） 2. 服务器返回一个随机值，并在会话中记录这个随机值 3. 客户端将该随机值作为密钥，用户密码进行hmac运算，然后提交给服务器 4. 服务器读取用户数据库中的用户密码和步骤2中发送的随机值做与客户端一样的hmac运算，然后与用户发送的结果比较，如果结果一致则验证用户合法。 在这个过程中，可能遭到安全攻击的是服务器发送的随机值和用户发送的hmac结果，而对于截获了这两个值的黑客而言这两个值是没有意义的，绝无获取用户密码的可能性，随机值的引入使hmac只在当前会话中有效，大大增强了安全性和实用性。 安全https分离方式 半分离式，前端负责开发页面，通过接口（AJAX）获取数据跟页面进行数据绑定（类似原来的JSP标签方式），最终是由前端把页面渲染出来，后端只提供数据接口，前端的页面仍需要跟后端服务部署到同一个web容器中，如果web容器挂掉，那么会直接导致页面访问不了 全分离式， 前端负责的内容同上，只是前端页面单独部属在一个web容器，前端和后端相互不影响，如果是后端容器挂了，前端可以访问，只是请求不到数据 还有一种就是 在前端和后端之间加入node作为服务，node提供一些接口服务，又或者部分页面需要服务端渲染，又或者需要处理一些大并发的问题，如果是需要涉及到一些大数据的查询或者运算，再由node层去跟后端服务（java服务等）进行数据交互，再由node 接口供给前端 用了react后可以全分离也可以都放在nginx下（前端使用的接口是绝对地址，跨域也解决了） 后端是通过nginx挂载php的fastcgi，接收前端发来的请求，对数据库进行相关操作。 前端和后端数据交互的基本知识和常见方式 用 form 可以发请求，但是会刷新页面或新开页面； 用 a 可以发 get 请求，但是也会刷新页面或新开页面； 用 img 可以发 get 请求，但是只能以图片的形式展示； 用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示； 用 script 可以发 get 请求，但是只能以脚本的形式运行。 用 jsonp 实现请求，支持跨域请求。 用 ajax 实现页面无刷新的请求。 ajax技术XMLHttpRequest，结构比较混乱（但出现很久了，使用规模巨大）；fetch，新兴的ajax技术（他俩是平起平坐的关系）。axios库是对XHR的封装，而上面两个是原生api。 综合考虑开发难度和兼容性问题，决定选用axios进行前后端的信息交互。 用了fetch原生。 双向通信WebSocket与消息推送 - 张果 - 博客园 (cnblogs.com) 如何在大型 Web 应用中保持数据的同步更新？ - 知乎 (zhihu.com) 轮询：客户端定时向服务器发送Ajax请求，服务器接到请求后马上返回响应信息并关闭连接。 优点：后端程序编写比较容易。 缺点：请求中有大半是无用，浪费带宽和服务器资源。 实例：适于小型应用【针对管理员开启轮询怎么样orz】。 长轮询：客户端向服务器发送Ajax请求，服务器接到请求后hold住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。 优点：在无消息的情况下不会频繁的请求，耗费资小。 缺点：服务器hold连接会消耗资源，返回数据顺序无保证，难于管理维护。 Comet异步的ashx， 实例：WebQQ、Hi网页版、Facebook IM。 长连接：在页面里嵌入一个隐蔵iframe，将这个隐蔵iframe的src属性设为对一个长连接的请求或是采用xhr请求，服务器端就能源源不断地往客户端输入数据。 优点：消息即时到达，不发无用请求；管理起来也相对方便。 缺点：服务器维护一个长连接会增加开销。 实例：Gmail聊天 Websocket: WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。依靠这种技术可以实现客户端和服务器端的长连接，双向实时通信。 特点：事件驱动、异步、使用ws或者wss协议的客户端socket，能够实现真正意义上的推送功能 缺点：少部分浏览器不支持，浏览器支持的程度与方式有区别。 跨域问题cors跨域之简单请求与预检请求（发送请求头带令牌token） - SegmentFault 思否 使用 Fetch - Web API 接口参考 | MDN (mozilla.org) 允许跨域配置nginx： 12Access-Control-Allow-Origin: *Access-Control-Allow-Origin: &lt;origin&gt; 后端出错导致误判？ 虽然这么显示但跨域已经配好了，预验是通过的，只是后端出错返回500。可能因此控制台也报错。 LNMP配置原理太长不看：Nginx工作原理和优化总结 💥配置文件详解：Nginx和PHP的配置 php环境搭建（正确配置nginx和php） Nginx 是非阻塞IO &amp; IO复用模型，通过操作系统提供的类似 epoll 的功能，可以在一个线程里处理多个客户端的请求。Nginx 的进程就是线程，即每个进程里只有一个线程，但这一个线程可以服务多个客户端。 fastCGI ：为了解决不同的语言解释器(如php、python解释器)与webserver的通信，于是出现了cgi协议。只要你按照cgi协议去编写程序，就能实现语言解释器与webserver的通信。如php-cgi程序。但是webserver每收到一个请求，都会去fork一个cgi进程，请求结束再kill掉这个进程。这样有10000个请求，就需要fork、kill php-cgi进程10000次。 fastcgi是cgi的改良版本。fast-cgi每次处理完请求后，不会kill掉这个进程，而是保留这个进程，使这个进程可以一次处理多个请求。 什么是正向代理与反向代理 正向代理是从客户端的角度出发，服务于特定用户（比如说一个局域网内的客户）以访问非特定的服务；反向代理正好与此相反，从服务端的角度出发，服务于非特定用户（通常是所有用户），已访问特定的服务。 URI规范url 设计规范管理员可以重新组织服务器上的文件系统结构，而无需改动URI，这就需要URI和真实的服务器文件系统结构之间有一个映射机制，而不是生硬的对应。 隐藏文件后缀名带后缀名不够美观：nginx一招配置，帮你快速隐藏php后缀名 零散的日记12.15封装了fetch，ajax简洁多了。想要使用RESTful 风格，用四种请求方法分别对应了增删改查。但没有用http状态码，url布置、JWT鉴权都还不会做，实在称不上RESTful。 11.23头次验收。老师建议：用java。php是做小网站的。 我的理解：php太好学了，功能上、性能上不够强。（直接用php是很简洁，所以很多功能不能实现。要想php实现和java一样的功能，也是要学很复杂的框架的） 前端打算换react了，脚手架走起。 ——1.27：这时候才换的？ 11.6上完周五的数据库，重看了聂总的视频，结果从周五下午吸收到周六中午🤣 把看的网页堆这里（也有很多放到前端工具 &amp; 概念 (wolai.com)了，要及时回顾） 10.29师曰：直接显示个php页面上去还不行，要加Model层。我：Model是啥？ 查了巨多MVC、前后端分离、前端工程化（没写过后端，所以什么都拿到前端来搞）。又担心php是不是没有java先进，看了很多知乎上的【xxx是不是过时了】。光是看这些网页花了两三个晚上。确实学到不少，但凭现在的技术落不到实处，决定后端就用php。 收获：及时了解新技术。下面这些就算真过时了，学了对渐进入门有好处，可以帮助理解原理、学习设计方法。（拔草总是比种草有B格hh。但不同于劝退炒股，这是技术文章，看别人的批判是为了更好的了解，注意理性判断） Spring MVC 过时了吗？ - 知乎 (zhihu.com)为什么我劝你放弃mybatis - 知乎 (zhihu.com) 10.20开始系统写日志，顺路看到：谈谈开发日志 - 飞鸟_Asuka 。 刚起步时获取的信息比较杂乱，需要整理总结吸收。 10.15BS5最佳学习网站：Bootstrap5 中文手册-俺老刘 注意时效性，网上很多v3v4的，也不声明自己什么版本。官方文档最靠谱。","link":"/2022/01/05/NUDTcourse%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"},{"title":"Hello World","text":"hexo新人的问题记录 基础命令新建文章hexo n(new) XXarticle 默认是post（文章），还有page（页面）、draft（草稿）。 文章属性文章可以拥有如下属性： Setting Description Default layout 文章类型 post、page、draft title 文章的标题 date 创建日期 文件的创建日期 updated 修改日期 文件的修改日期 comments 是否开启评论 true tags 标签 categories 分类 permalink url中的名字 文件名 thumbnail 文章缩略图 cover 文章封面 yaml格式。 123456789101112131415161718192021222324252627282930# 标题和创建时间，自带title: Hello Worlddate: 2022-01-25 15:24:17# 分类categories: c1# 多级分类，注意：这是父子关系，不是同级关系categories:- c1- c2# 同级分类categories:- [python,模块,PIL]- [python,模块,matplotlib]# 单标签tags: tag1# 多标签：tags: - tag1 - tag2# ortags: [tag1,tag2]# 摘要，写了就不会显示全文了# 另一种：&lt;!-- more --&gt;，上面是摘要，下面是正文excerpt: 我是摘要# 文章封面cover: https://gitee.com/hoverload/fig-bed/raw/master/iceCube.jpg 发布123456789101112131415# 新建博客hexo init XXblog# 渲染source里的md文件hexo g(generate)# 本地预览hexo s(server)# 建议部署先先清除缓存，然后g渲染，最后d部署。hexo clean# 部署（遇到git认证问题（10054）：使用git自带的bash or 关掉代理）hexo d(deploy)# 还有，传到github后，有时blog没有立刻变化，，我是 强制刷新+等上一分钟，再看就好了 注：新建、删除或修改文章后，不需要重启hexo server，刷新一下即可预览。 自定义toc 目录引入(误)toc安装文档地址：https://github.com/bubkoo/hexo-toc 1npm install hexo-toc --save 并修改hexo目录下的配置文件_config.yml文件,添加toc的相关配置，参数具体含义请查看上面链接里面的readme。 123456789toc: maxdepth: 3 class: toc slugify: transliteration decodeEntities: false anchor: position: after symbol: '#' style: header-anchor 参考：hexo搭建博客踩坑 | Home page (tru-xu.github.io) 掉坑了。不显示toc是因为要在属性里加上toc: true，这谁知道啊&lt;( ‵□′)&gt; 还好，刚装的插件remove掉，toc就正常了 404页面404.html放在主题的source文件夹即可，在本地测不出来（评论模块也是），放到github可以用。 新增菜单栏选项 添加新页面：hexo new page “xx” 在主题配置文件的menu中加上该页面 在zh-CN.yml文件中加上中文意思（看心情） 其他草稿 添加草稿：hexo new draft “xx” 预览草稿：hexo server –draft 发布草稿：hexo publish draft “xx” 备份站点配置完善后就不改了，不必 文章的md另外传git。（感想：门户博客这点还是方便啊） 官网文档站点配置： 配置 | Hexo 主题配置（大头）： Icarus用户指南 - 主题配置 常见问题 - Icarus Issues · ppoffice/hexo-theme-icarus (github.com) 其他参考： Hexo 入门指南 | Markdown 简单的世界 配置日志待办： 文章部分显示（摘要） RSS 评论模块 使用category，技术和非技术分开 修改栅栏布局，加宽正文（废除） 后期： LaTeX支持 怎么配才能使用F9沉浸阅读 暗色模式 文章悬浮导航 代码高亮换成ayu（那个版本的highlight.js没有） SEO优化","link":"/2022/01/01/hello-world/"},{"title":"基础乐理","text":"这篇基础乐理是三分钟热度的副产品，学习了音律屋的视频教程（要学完的，待我抽个时间orz） 音名与钢琴键盘钢琴键盘最直观，入门都要学习 88键， 键位分布是有规律的：去掉左三右一划分为5组，每组7个白键5个黑键。 白键音名这是去掉边上4键后的。黑键把白键分成两部分CDE和FGAB,就不用数了。 升降号、还原号半音 全音如果两个键之间夹了一个键，那么这两个键之间的关系叫做全音。相邻键是半音。 白键里只有EF和BC是半音关系（没有隔黑键），白键和相邻黑键也是半音关系。 其他白键都被黑键分隔，是全音关系。 黑键音名黑键根据相邻的白键命名。如升C键（降D键）。 因为还原号的使用，两个名字不可以随便选一个用。 等音EF，CB间没黑键，也是有升降音的⬇，这种情况叫等音。 重升重降升或降两次半音，相当于升降一个全音了。不太常见，五线谱用的多。 如何区分同一音名的不同键？大字组 小字组 各类音符时值的关系歌曲拍号拍号的强弱规律歌曲速度（BPM）是什么？附点音符三连音音与节奏的应用唱名与简谱数字自然大调（白键）自然大调（黑键）自然小调大小调有什么区别？音程的基础概念音程的属性（纯、大）音程的属性（小、减、倍减、增、倍增）音程的实战练习音的乐名三和弦七和弦九和弦挂留和弦转位和弦休止符延音线、连音线中古调式考试+总结","link":"/2022/01/20/%E5%9F%BA%E7%A1%80%E4%B9%90%E7%90%86/"},{"title":"日语学习_N5","text":"实际水平：N95 单词拗长音是一个整体！ きょお：分开读 平假名的组合比较少，片假名灵活 语法量词 其他微软日语输入法Alt+反引号、shift+caps lock：切换假名/英语 ctrl+caps lock：平假名 Alt+caps lock：片假名","link":"/2022/01/26/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0-N5/"}],"tags":[{"name":"时间管理","slug":"时间管理","link":"/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"},{"name":"GTD","slug":"GTD","link":"/tags/GTD/"},{"name":"json","slug":"json","link":"/tags/json/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"php","slug":"php","link":"/tags/php/"},{"name":"js","slug":"js","link":"/tags/js/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"后端","slug":"后端","link":"/tags/%E5%90%8E%E7%AB%AF/"},{"name":"服务器","slug":"服务器","link":"/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"乐理","slug":"乐理","link":"/tags/%E4%B9%90%E7%90%86/"},{"name":"日语语法","slug":"日语语法","link":"/tags/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95/"},{"name":"日语输入法","slug":"日语输入法","link":"/tags/%E6%97%A5%E8%AF%AD%E8%BE%93%E5%85%A5%E6%B3%95/"}],"categories":[{"name":"发展","slug":"发展","link":"/categories/%E5%8F%91%E5%B1%95/"},{"name":"时间管理","slug":"发展/时间管理","link":"/categories/%E5%8F%91%E5%B1%95/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"},{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"娱乐","slug":"娱乐","link":"/categories/%E5%A8%B1%E4%B9%90/"},{"name":"读书笔记","slug":"技术/读书笔记","link":"/categories/%E6%8A%80%E6%9C%AF/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"web开发","slug":"技术/web开发","link":"/categories/%E6%8A%80%E6%9C%AF/web%E5%BC%80%E5%8F%91/"},{"name":"配置","slug":"技术/配置","link":"/categories/%E6%8A%80%E6%9C%AF/%E9%85%8D%E7%BD%AE/"},{"name":"音乐","slug":"娱乐/音乐","link":"/categories/%E5%A8%B1%E4%B9%90/%E9%9F%B3%E4%B9%90/"},{"name":"日语","slug":"娱乐/日语","link":"/categories/%E5%A8%B1%E4%B9%90/%E6%97%A5%E8%AF%AD/"}]}