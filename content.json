{"pages":[{"title":"About","text":"新年新气象，hoverload换了个新博客。这是本人第三个个人博客。 今年考研，计划好好备考，同时提升开发技能、保证博客质量，也算是劳逸结合了。","link":"/about/"},{"title":"Links","text":"&lt;!- -ZZ –&gt;","link":"/links/"}],"posts":[{"title":"GTD时间管理","text":"","link":"/2022/01/10/GTD%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"},{"title":"JSON必知必会","text":"概要 前三章 JSON语法第四章 Schema做一致性检验第五章 安全问题第六章 Ajax，API，跨域和JSON-P — 下面几章就很浅了 — 第七章 jQuery，Angular框架第八章 NoSQL第九章 服务端的JSON第十章 JSON作为配置文件 JSON语法JSON语法是JavaScript的真子集，但它是独立于编程语言的一种数据交换格式。 数据交换格式的核心是数据，所以 JSON 中并不会涉及 JavaScript 对象字面量中的函数。JSON 所基于的 JavaScript 对象字面量单纯指对象字面量及其属性的语法表示。这种属性表示方法也就是通过名称 - 值对来实现的。 名称只能用双引号包裹，里面名称甚至可以放单引号。但是 ↓ 命名规范为了获得最大可移植性，应尽可能避免使用空格或特殊字符。 JSON 中的名称 - 值对的名称如果被系统作为对象装入内存的话，将会成为“属性”。在部分系统中，属性名可以包含下划线或数字，但是大多数情况下最好是使用英文字母 AZ 或 az。 ——我选择驼峰 JSON对象有意思所以。。 注意逗号 如果你在名称 - 值对列表的结尾处加上一个逗号，你给机器的指令是“一个新部分的开始”，但是后面什么都没有。 JSON的媒体类型当你在传递数据时，需要提前告知接收方数据是什么类型，这就会涉及媒体类型。媒体类型也有一些你可能听过的其他称呼，如“互联网媒体类型”“内容类型”或“MIME 类型”。它使用“类型 / 子类型”这种格式来表示，比如你可能见过的 text/html。 JSON 的 MIME 类型是 application/json。 互联网数字分配机构（Internet Assigned Numbers Authority，IANA）维护着一个包含全部媒体类型的列表（http://www.iana.org/assignments/media-types/media-types.xhtml）。 JSON Schema🔗JSON Schema 规范（中文版） (apifox.cn) JSON Schema （schema意为格式）可以帮助回答下列问题： 值的数据类型是否正确？ 可以具体规定一个值是数字、字符串等类型。 是否包含所需要的数据？ 可以具体规定哪些数据是需要的，哪些是不需要的。 值的形式是不是我需要的？ 可以指定范围、最小值和最大值 一个JSON Schema 文件，它就是JSON格式的。 123456789101112131415161718192021222324{ &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;, &quot;title&quot;: &quot;Cat&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; &quot;minLength&quot;: 3, &quot;maxLength&quot; : 20 }, &quot;age&quot;: { &quot;type&quot;: &quot;number&quot;, &quot;description&quot;: &quot;Your cat's age in years.&quot; &quot;minimum&quot; : 0 }, &quot;declawed&quot;: { &quot;type&quot;: &quot;boolean&quot; } }, &quot;required&quot;: [ &quot;name&quot;, &quot;age&quot;, &quot;declawed&quot; ]} 本章提供的例子只是简介，是冰山一角。JSON Schema 还支持正则表达式（一种字符形式，比如电子邮件地址的格式）以及枚举类型（一个包含所有可能值的列表）。如果你希望深入掌握 JSON Schema，可以访问下面的链接，了解相关规范： JSON Schema 主页（http://json-schema.org/） JSON Schema 验证规范（http://json-schema.org/latest/json-schema-validation. html） 附加一个Linter知识： 是做语法验证的，而schema是检测语义是否合法 JS Linter 进化史 - 知乎 (zhihu.com) JSON安全坦白：并没做攻防实践🥺 跨站请求伪造跨站请求伪造，即 CSRF（cross-site request forgery，读作 sea-surf），是一种 利用站点对用户浏览器信任而发起攻击的方式。CSRF 漏洞已经存在了很长时间，远比 JSON 出现得早。 跨站脚本攻击注入攻击：依赖于将数据注入到 Web 应用程序以方便恶意数据执行或编译的攻击 总结 不要使用顶级数组。顶级数组是合法的 JavaScript 脚本，它们可以用&lt;script&gt;标签链接并使用。而如果是个对象，就不会被成功解析。 对于不想公开的资源，仅允许使用 HTTP POST 方法请求，而不是 GET方法。GET 方法可以通过 URL 来请求，甚至可以放在&lt;script&gt;标签中。 使用 JSON.parse() 来代替 eval()。eval() 函数会将传入的字符串编译并执行，这会让你的代码易被攻击。应仅使用 JSON.parse() 来解析 JSON 数据。 零碎Web API🔗Web API简介 - 学习 Web 开发 | MDN (mozilla.org) Web API的服务内容和普通网站差不多，但是它并不是用来拿给人看的🐶 Web API 是通过 HTTP 服务进行交互的一组指令和标准。这些交互可以包括创建、读取、更新、删除（CRUD）等操作，且 Web API 都会有一份说明，概述如何使用这些指令和标准。 （是一个对诸如 HTML 或 JSON 文档等资源进行请求和响应的系统。这些文档使用URL经由 HTTP请求。） Angular适合MVC的框架，和React、Vue不同，提供了更完整的解决方案。 NoSQLNoSQL，顾名思义，它不是一种关系型数据库。我们不能使用 SQL 从关联在一起的数据库表格的行和列中获取数据。 NoSQL 数据库的一个例子是键值对存储。键值对存储模型将数据简化为键值对。如果要将英语词典编入数据库，那么用键值对存储非常合适。每一个单词就是一个键，单词对应的定义就是键的值。对于比较简单的数据结构来说，使用这种数据库比使用传统的关系型数据库要合适。（如果想将一个地址的省、市、区、街道和邮政编码等数据相关联，该怎么办？如果需要这种关系，那最好还是使用关系型模型，毕竟将复杂的关系用一个文档来表示还是很有难度的。） 服务端JSONASP、PHP的：序列化，反序列化，请求json 发送JSON HTTP请求的其他方式：Ruby on Rails，Java，Node.js 配置文件软件中经常会有配置文件或设置文件，它让我们可以不必重新编译就能修改设置。配置文件的格式有很多，有 INI 和 XML 等。每种格式都有优点和缺点。 现实中一个使用 JSON 作为配置文件的极佳例子就是 Node.js 默认的 JavaScript 包管理器：npm（文件名称为 package.json。该文件包含了每个包的具体信息，如名称、版本、作者、贡献者、依赖、脚本以及许可）。当然，它也被 AngularJS 和 jQuery 等其他框架使用。","link":"/2022/01/15/JSON%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"},{"title":"MVC","text":"到现在也搞不清楚，我是垃圾 MVC放一堆MVC链接： 如何理解Web应用程序的MVC模型？ - 知乎 (zhihu.com) 能简单解释一下MVC吗？越简单越好 - SegmentFault 思否 。。。还好多没整理，说的泛泛的 MVC(Model View Controller)是什么？_hmyixiu的博客-CSDN博客 M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。比如一批统计数据可以分别用柱状图、饼图来表示。C存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新。 Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。 View（视图）是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。 Controller（控制器）是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。 MVC 分层有助于管理复杂的应用程序，因为您可以在一个时间内专门关注一个方面。例如，您可以在不依赖业务逻辑的情况下专注于视图设计。同时也让应用程序的测试更加容易。MVC 分层同时也简化了分组开发。不同的开发人员可同时开发视图、控制器逻辑和业务逻辑。 【上面像是说后端要主动把更新发给前端）；下面视图请求数据，检查输入是前端就能写的逻辑，也就发送数据是前端发个fetch告诉后端要怎么操作数据】 如果管理员只有一个，那我只要在改了表之后自动刷新就完了，那就这么设定吧XD 担心项目是不是不合MVC要求 C：我现在理解我的C就是React里模块的逻辑，就是和模块交互，它去决定取什么数据，然后自动到时候改变View，整个业务逻辑就在前端项目就实现了呀。 后端解析url，从而操作数据库，做了一个前后端对接，这个逻辑也是Controller？目前这个逻辑是php写的，然后它调用了另一个专门用来取数据生成json的php文件，Model就是我取出来的那个json。 C需要监控它的变化如果变了就告诉V？双向通讯是MVC要实现的工作吗【好像是的，后端推送信息】 讲技术-什么是Web Hook？ - SegmentFault 思否","link":"/2022/02/02/MVC/"},{"title":"Hello World","text":"hexo新人的使用记录 基础命令新建文章hexo n(new) XXarticle 默认是post（文章），还有page（页面）、draft（草稿）。 文章属性文章可以拥有如下属性： Setting Description Default layout 文章类型 post、page、draft title 文章的标题 date 创建日期 文件的创建日期 updated 修改日期 文件的修改日期 comments 是否开启评论 true tags 标签 categories 分类 permalink url中的名字 文件名 thumbnail 文章缩略图 cover 文章封面 yaml格式。 123456789101112131415161718192021222324252627282930# 标题和创建时间，自带title: Hello Worlddate: 2022-01-25 15:24:17# 分类categories: c1# 多级分类，注意：这是父子关系，不是同级关系categories:- c1- c2# 同级分类categories:- [python,模块,PIL]- [python,模块,matplotlib]# 单标签tags: tag1# 多标签：tags: - tag1 - tag2# ortags: [tag1,tag2]# 摘要，写了就不会显示全文了# 另一种：&lt;!-- more --&gt;，上面是摘要，下面是正文excerpt: 我是摘要# 文章封面cover: https://gitee.com/hoverload/fig-bed/raw/master/iceCube.jpg 发布123456789101112131415# 新建博客hexo init XXblog# 渲染source里的md文件hexo g(generate)# 本地预览hexo s(server)# 建议部署先先清除缓存，然后g渲染，最后d部署。hexo clean# 部署（遇到git认证问题（10054）：使用git自带的bash or 关掉代理）hexo d(deploy)# 还有，传到github后，有时blog没有立刻变化，，我是 强制刷新+等上一分钟，再看就好了 注：新建、删除或修改文章后，不需要重启hexo server，刷新一下即可预览。 自定义toc 目录引入(误)toc安装文档地址：https://github.com/bubkoo/hexo-toc 1npm install hexo-toc --save 并修改hexo目录下的配置文件_config.yml文件,添加toc的相关配置，参数具体含义请查看上面链接里面的readme。 123456789toc: maxdepth: 3 class: toc slugify: transliteration decodeEntities: false anchor: position: after symbol: '#' style: header-anchor 参考：hexo搭建博客踩坑 | Home page (tru-xu.github.io) 掉坑了。不显示toc是因为要在属性里加上toc: true，这谁知道啊&lt;( ‵□′)&gt; 还好，刚装的插件remove掉，toc就正常了 404页面404.html放在主题的source文件夹即可，在本地测不出来（评论模块也是），放到github可以用。 新增菜单栏选项 添加新页面：hexo new page “xx” 在主题配置文件的menu中加上该页面 在zh-CN.yml文件中加上中文意思（看心情） 其他草稿 添加草稿：hexo new draft “xx” 预览草稿：hexo server –draft 发布草稿：hexo publish draft “xx” 代码块加title123``` language titleyour code``` 效果： 我是标题，你也可以在这里写代码路径。12## h2lorem 参考：hexo代码块进阶写法 | Qcmoke’s Blog（博主的是Next，icarus没法加链接的样子） 备份站点配置完善后就不改了，不必 文章的md另外传git。（感想：门户博客这点还是方便啊） 官网文档站点配置： 配置 | Hexo 主题配置（大头）： Icarus用户指南 - 主题配置 常见问题 - Icarus Issues · ppoffice/hexo-theme-icarus (github.com) 其他参考： Hexo 入门指南 | Markdown 简单的世界 配置日志待办： 文章部分显示（摘要） RSS 评论模块 使用category，技术和非技术分开 修改栅栏布局，加宽正文 后期： LaTeX支持 怎么配才能使用F9沉浸阅读 文章悬浮导航 文章界面侧边栏只显示目录 代码高亮换成ayu（那个版本的highlight.js没有） SEO优化","link":"/2022/01/01/hello-world/"},{"title":"Icarus主题定制","text":"调整博客字体、修改边栏与正文宽度 字体icarus默认字体比较小，想要改大点。 需要找到字体所在css文件。首先去source\\css那找找看 themes\\icarus\\source\\css\\style.styl123456789101112131415161718// Base CSS framework@import '../../include/style/base' // &lt;- !// Helper classes &amp; mixins@import '../../include/style/helper'// Icarus components@import '../../include/style/button'@import '../../include/style/card'@import '../../include/style/article'@import '../../include/style/navbar'@import '../../include/style/footer'@import '../../include/style/pagination'@import '../../include/style/timeline'@import '../../include/style/search'@import '../../include/style/codeblock'@import '../../include/style/widget'@import '../../include/style/donate'@import '../../include/style/plugin'@import '../../include/style/responsive' 转移阵地，找到了。 \\themes\\icarus\\include\\style\\base.styl12345678910111213bulma-stylus-root = '../../../../node_modules/bulma-stylus/stylus'/* --------------------------------- * Override Bulma CSS Framework * --------------------------------- */$body-size ?= 14px // 字体大小在这里，我改成了15px$body-background-color ?= #f7f7f7$family-sans-serif ?= Ubuntu, Roboto, 'Open Sans', 'Microsoft YaHei', sans-serif$family-code ?= 'Source Code Pro', monospace, 'Microsoft YaHei'$size-7 ?= .85rem$size-small ?= .75rem 这里也是最主要的css所在地了。 边栏修改宽度左边layout是正文，分成了1栏、2栏、3栏的情况。tablet：平板，desktop：一般电脑屏幕大小，widescreen：宽屏。右边widgets是侧边栏，有2栏和3栏的情况。 我把两栏情况下layout的8-8-8改成了9-9-9，同时吧widgets的从4-4-4改成3-3-3，让它们相加仍然等于12。注意：只改layout是不够的，会导致整体不居中。 不同页面对应不同布局参考官方文档： Icarus用户指南 - 主题配置 - Icarus (ppoffice.github.io)","link":"/2022/01/27/icarus%E4%B8%BB%E9%A2%98%E5%AE%9A%E5%88%B6%E2%80%94%E2%80%94%E5%AD%97%E4%BD%93%E3%80%81%E8%BE%B9%E6%A0%8F%E5%AE%BD%E5%BA%A6/"},{"title":"Ssl和ssh","text":"SSH 即Secure Shell，SSL即Secure Socket Layer。在最初的设计意图中，SSH更多被设计为加强Telnet/FTP安全的传输协议，SSL被设计为加强Web安全传输的协议(事实上还有SMTP/NNTP等)。 SSH协议连接远程主机，在XShell、数据库软件能看到 SSH协议详解 - zmlctt - 博客园 (cnblogs.com) SSL协议https、ftps的s。SSL协议使用通讯双方的客户证书以及CA根证书，是Internet网上安全通讯与交易的标准。 超文本传输安全协议 (wikipedia.org) 浅谈HTTPS（SSL/TLS）原理 Git报错解决 OpenSSL SSL_read: Connection was reset, errno 10054 (cnblogs.com) 真不是因为被墙吗，而且还是移动这个墙中墙，让我用github如此难受。还有下面这个问题。 OpenSSL、OpenSSHOpenSSL：一个C语言函数库，是对SSL协议的实现。openssl 中也有个叫做 openssl 的工具，是 openssl 中的库的命令行接口。 OpenSSH是实现SSH的免费软件， linux/unix都用openssh软件提供SSH服务","link":"/2022/01/30/ssl%E5%92%8Cssh/"},{"title":"Tkmiz作品","text":"和绝望和睦相处。意识到荒诞的存在，反抗这无意义的人生。 つくみず有种文学气质，连载漫画不那么硬核。作者也是东方众，之前画了许多二妹同人志，但除了しにたいフラン外都不太好找，作品补全中。。现在连载的シメジ更是像是在梦境中发生的故事，越往后越超现实了🤣。一开始也是因为少終去瞟一眼，也能对上电波，途中还会被推荐哲学读物（打工的尤太离谱，已经没法认为这是前作二人普通地转生生活的地方了😂）。 Shimeji Simulation - MangaDex mangadex上还有自己上色的汉化组，太强了。。","link":"/2022/02/02/tkmiz%E4%BD%9C%E5%93%81/"},{"title":"To B &amp; to C","text":"B端和C端的产品，从思维到方法是大不相同的。 定义B端产品，也叫To B（To Business）产品，即面向企业或者特定用户群体的企业级别产品； C端产品，也叫To C（To Customer）产品，即面向普通大众消费者的产品。 通常判断一个产品是B端还是C端，最简单的判断的方式就是看产品向谁进行收费：企业付费则是B端产品，消费者付费则是C端产品。 B端产品是为企业提供服务、解决企业痛点的产品，例如[财务系统、项目管理系统。B端产品的决策者是企业管理者，使用者是员工。 C端产品是解决用户在生活中的需求和痛点的产品，例如饿了么、淘宝。C端产品的决策者和使用者都是用户自身。 差异需求 B端注重决策者思维，C端注重纯用户思维 B端注重效率（快速完成任务），C端注重粘性（多打开、多使用） B端注重稳定，C端注重多样性。 拉新B端产品推广门槛远高于C端产品，很多时候B端产品需要专门的市场人员进行销售；C端产品的用户属性的相对单一，通常通过活动：获取用户、提高活跃率、提高留存、变现以及自传播等。 留存B端的留存率会比C端高很多。 对于B端产品，如果用户开始习惯使用，则基本不会再考虑使用其他同类产品： B端产品费用相对较高； 企业相关信息已经都记录在该产品上，迁移成本会非常大。 C端产品的替换成本相对较低，并且在市面上可以找到很多同类替代品，所以用户流失率往往会高于B端产品。 商业模式B端产品一般通过直接收费的方式来实现营收，通常不同级别的需求可能会收取不同的费用。 C端产品大都免费开放给用户，通过流量和资源的变现实现营收，例如：广告、导流、增值服务等。 最后B端产品并非不重视审美和交互体验，而是在复杂的B端业务逻辑面前，其优先级要排在稳定以及高效之后。 不管是B端产品还是C端产品，首先要记住对于所有用户来说：好的产品应该是简单易用的。","link":"/2022/01/29/to-B-to-C/"},{"title":"全栈修炼指南学习笔记","text":"极〇时间专栏课，学习中 杂谈 先成为合格的工程师，再谈全栈。 打标签现实中有不少迈入职场没有几年，却已经给自己打上“前端工程师”“后端工程师”等标签的程序员朋友。我觉得他们可能是受到了某些万恶的职业生涯规划鸡汤的影响，这些标签会让他们在面对新技术和新机遇的时候，觉得身处“不属于自己的领域”而选择封闭自己。 因此我的建议是：职业生涯不宜过早做过细的规划，除了技术深度，也需要在技术广度上积累，等到一定程度以后再来选择自己的发展分支路线。而且，某些特定技术领域，在程序员给自己打标签的时候，压根还没有发展成熟，等到发展起来，时机真正到来的时候，只有那些原本“不偏食”的优秀的程序员才能够脱颖而出。 英文英文能力是突破天花板的一个必选项。我觉得英文是所有进阶的软件工程师应当强化的能力，对全栈工程师来说更甚。因为基于 Web 的全栈技术迭代很快，新的技术资料一般都是英文的，英文能力，尤其是英文的阅读能力会很大程度地影响知识获取的速度。 思考在获取知识的基础上思考，尤其是从比较中思考。 我们在实际工作中需要解决各种各样不可预料的问题，缺乏思考的人只会用自己所知道的技术生硬地往上套，而不去考虑是否适合问题本身，不去分析和比对不同解决方法的优劣。对于全栈技术学习而言，由于技术种类多，同类技术多，基于比较的思考就显得更为重要。但在这方面，我认为入门和进阶的工程师应当有所区别： 如果你在这方面入门不久，那么我建议你还是以知识性学习为主，先建立概念，了解全局。在选择要学习的技术时，要找那些经典的、使用的人多，以及接受度高的技术。在此基础上，尝试去思考这些技术的特点，为什么要这样做，好处和坏处各是什么。了解背景，即在所介绍的技术出现以前，程序员都是怎样做的，比较一下二者的区别是什么，或者说，新技术，带来了什么。 如果你是这方面的进阶工程师，那么“思考”的比重需要更高。全栈的技术太多太杂，不思考而以知识堆叠的方式记忆，是根本学不过来的。因此需要结合自身经验，尤其是针对同类的不同技术，要不断地去权衡，并强化自己的思考习惯——针对学习材料，哪些观点是自己不同意的，哪些内容是自己需要补充的，哪些部分是自己需要延伸学习一下的。 通过耐心地思考和比较，知识积累能够逐渐形成体系，而它，是帮助你融会贯通和保证记忆的最佳方法。请不要在开始时担心这一点，只有具备一定量的积累才能自然而然地孕育出体系来。","link":"/2022/01/29/%E5%85%A8%E6%A0%88%E4%BF%AE%E7%82%BC%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%F0%9F%90%B1%E2%80%8D%F0%9F%91%A4/"},{"title":"关于浏览器的沉浸阅读器","text":"阅读器什么时候能一统天下 发个牢骚。CSDN的页面很乱，还有半屏的广告弹窗，上个油猴脚本；简书的右侧边栏推荐八竿子打不着的文章，adblock屏蔽；博客园有的界面布局不合理，加上live2d挡着，F12手动改。。 浏览器要是推出统一的功能把正文提取出来，统一格式多好。但是人网站不这么想，肯定千方百计避免被屏蔽广告咯。到现在大部分我常用的中文网站都不支持edge阅读器。而且最近edge菜单栏找不到这个选项了，这功能不是被抛弃了吧。 现在可以按F9使用，或者在url前面加read:，强制使用。不过就连windows自个的技术支持网站用阅读器也有bug，比如不能载图。本来我在想，怎么才能让自个博客支持阅读器，但是不知道它的机制怎么搞嘛。 看到好多人给简阅打广告，下过来看看。花里胡哨的，愣是没找到开关在哪。原来它变红色的时候才能用。但是开头提到的网站，tm都不能用啊。难道要氪金才可以么。 另外在少数派介绍它的实现原理。。“为了能够在浏览器中浏览网页时有更好的体验，开发者Kenshin手动分析了上百个资讯类网站的数据源，并针对这些网站页面内的标题、描述、正文、媒体资源等元素进行了提取和适配，最后生成适合中文阅读的排版页面”，纯人工啊。 不过它的文档是这么说的： 能识别hexo的页面，这难道不需要看主题的吗。试了试我的icarus，不行。找了别人的NexT，这第一大主题也不能用啊？！我卸。 关于阅读器实现，找到一些有意思的： 浏览器的阅读模式怎么实现？ - 知乎 (zhihu.com) 阅读模式是如何实现的? - 码匠笔记 (majiang.life) 浏览器中实现阅读模式 - 放飞梦想 (mogoweb.github.io)","link":"/2022/01/29/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B2%89%E6%B5%B8%E9%98%85%E8%AF%BB%E5%99%A8/"},{"title":"刷播放量爬虫","text":"今天去同学github踩踩，看到个刷播放的爬虫，好用！怎么没早点看见hh 链接：yangyaojia/EducoderWatchedAll: YJSchaf来了全看了 (github.com) 一开始不知道他搁哪找的链接，原来在视频资源的网络界面很明显就看到json了，我怎么就没想到里面会有呢！ 然后点开一个视频看一会，发现告知观看进度的api是怎么调用的，OK了。 收获：一直想写个educoder的爬虫，太懒没写。。（爬大家交上的图片，从而获取作业答案），自己写估计也想不到看网络，然后陷入瞎猜参数、url ➡ 猜不中跪了 平时很少仔细看网络，我太懒了 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import requests# MAX_LEN: 修改观看时间MAX_LEN = 3600print(&quot;YJSchaf替你把视频全看了&quot;)courseId = &quot;。。&quot; #input(&quot;输入课程ID：&quot;)# 身份认证的两个cookie，我一上来是在浏览器设置看的c1 = &quot;。。&quot; #input(&quot;autologin_trustie：&quot;)c2 = &quot;。。&quot; #input(&quot;_educoder_session：&quot;)headers = { 'Host': 'data.educoder.net', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0', &quot;Accept&quot;: &quot;application/json&quot;, &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Referer&quot;: &quot;https://www.educoder.net/classrooms/&quot; + courseId + &quot;/video&quot;, &quot;Content-Type&quot;: &quot;application/json; charset=utf-8&quot;, &quot;Origin&quot;: &quot;https://www.educoder.net&quot;, &quot;Connection&quot;: &quot;keep-alive&quot;, &quot;Cookie&quot;: &quot;autologin_trustie=&quot;+c1+&quot;;&quot;+&quot;_educoder_session=&quot;+c2 }vedios_info_url = &quot;https://data.educoder.net/api/courses/&quot; + courseId + &quot;/course_videos.json?coursesId=&quot; + courseId + &quot;&amp;id=&quot; + courseId + &quot;&amp;limit=100&quot;vedios_info = requests.get(vedios_info_url, headers = headers).json()post_url = &quot;https://data.educoder.net/api/watch_video_histories.json&quot;for v in vedios_info[&quot;videos&quot;]: req_payload = { &quot;point&quot;:0, &quot;video_id&quot;: v[&quot;id&quot;], &quot;course_id&quot;: courseId , &quot;duration&quot;: MAX_LEN, &quot;device&quot;: &quot;pc&quot; } response = requests.post(post_url, json = req_payload, headers = headers).json() update_payload = { &quot;point&quot;: MAX_LEN, &quot;log_id&quot;: response[&quot;log_id&quot;], &quot;watch_duration&quot;: MAX_LEN, &quot;total_duration&quot;: MAX_LEN, &quot;ed&quot;:&quot;1&quot; } response = requests.post(post_url, json = update_payload, headers = headers).json() if(response[&quot;message&quot;] == &quot;success&quot;): print(&quot;【success】&quot; + v[&quot;title&quot;]) else: print(&quot;【fail】&quot; + v[&quot;title&quot;])","link":"/2022/01/29/%E5%88%B7%E6%92%AD%E6%94%BE%E9%87%8F%E7%88%AC%E8%99%AB/"},{"title":"基础乐理","text":"这篇基础乐理是三分钟热度的副产品，学习了音律屋的视频教程（要学完的，待我抽个时间orz） 音名与钢琴键盘钢琴键盘最直观，入门都要学习 88键， 键位分布是有规律的：去掉左三右一划分为5组，每组7个白键5个黑键。 白键音名这是去掉边上4键后的。黑键把白键分成两部分CDE和FGAB,就不用数了。 升降号、还原号半音 全音如果两个键之间夹了一个键，那么这两个键之间的关系叫做全音。相邻键是半音。 白键里只有EF和BC是半音关系（没有隔黑键），白键和相邻黑键也是半音关系。 其他白键都被黑键分隔，是全音关系。 黑键音名黑键根据相邻的白键命名。如升C键（降D键）。 因为还原号的使用，两个名字不可以随便选一个用。 等音EF，CB间没黑键，也是有升降音的⬇，这种情况叫等音。 重升重降升或降两次半音，相当于升降一个全音了。不太常见，五线谱用的多。 如何区分同一音名的不同键？大字组 小字组 各类音符时值的关系歌曲拍号拍号的强弱规律歌曲速度（BPM）是什么？附点音符三连音音与节奏的应用唱名与简谱数字自然大调（白键）自然大调（黑键）自然小调大小调有什么区别？音程的基础概念音程的属性（纯、大）音程的属性（小、减、倍减、增、倍增）音程的实战练习音的乐名三和弦七和弦九和弦挂留和弦转位和弦休止符延音线、连音线中古调式考试+总结","link":"/2022/01/20/%E5%9F%BA%E7%A1%80%E4%B9%90%E7%90%86%F0%9F%90%B1%E2%80%8D%F0%9F%91%A4/"},{"title":"帮ZZ搭github博客","text":"博客基本配好了，给zz也整个一样的，虽然她自个不写(*￣3￣) 博客本身倒没什么，改改配置文件，生成静态页面，就等着把deploy那个文件夹上传了。 要来github账号建库：zz.github.io，怎么把我本地的东西传上去？直接hexo d报403没权限，用协作吧。发了协作邀请，换号发现没收到（过一会发现发到邮件去了，没想到吧），还重复了两次。总之用协作身份上传了。 没想到光这样不够，需要去setting选好内容是main分支然后保存，下面还必须选一个theme（忘掉了，老了），然后就会多出一个jekyll的配置文件，这文件当然是多余的，而且影响解析了。把它删掉，这时候网页才配好了。成果：zz’s blog (oblivate1.github.io)","link":"/2022/01/29/%E5%B8%AEzz%E6%90%ADgithub%E5%8D%9A%E5%AE%A2/"},{"title":"日语学习 N5","text":"实际水平：N95 单词拗长音是一个整体！ きょお：分开读 平假名的组合比较少，片假名灵活 语法量词 其他微软日语输入法Alt+反引号、shift+caps lock：切换假名/英语 ctrl+caps lock：平假名 Alt+caps lock：片假名","link":"/2022/01/26/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0-N5%F0%9F%90%B1%E2%80%8D%F0%9F%91%A4/"},{"title":"编码问题——ANSI","text":"微软的记事本里有个格式叫ANSI，经常用它转码。但是做项目时发现sublime居然没有这种格式，怎么回事呢？ 问题场景数据库的表是utf8mb4格式，导出的csv里有汉字，在excel打开是乱码的，因为excel默认用“ANSI编码”。对于这个问题，网上的解决都是：用微软的记事本把编码改成ANSI。这也太没效率了，至少在我常用的编辑器里转码吧，但是死活找不到哪种编码叫“ANSI”。原来这是个标准，每个国家实现都不一样，自己的win系统是简体中文，对应了GB2312。 ANSI编码是一种对ASCII码的拓展。ANSI编码用0x00~0x7f （即十进制下的0到127）范围的1 个字节来表示 1 个英文字符，超出一个字节的 0x80~0xFFFF 范围，开始用两个字节来表示其他语言的其他字符（也就是说，ANSI码仅在前128（0-127）个与ASCII码相同，之后的字符全是某个国家语言的所有字符）。简体中文编码表GB2312，繁体中文BIG5，日文Shift_JIS，各国有各国的标准。受制于当时的条件，不同语言之间的ANSI码之间不能互相转换，这就会导致在多语言混合的文本中会有乱码。 解决如何告知excel这个csv是utf8编码呢？需要在文件头加上BOM。 csv.php12345// excel默认ASCI编码，为了正常显示utf8，要加BOM头header ( &quot;Content-type: text/csv; charset=utf-8&quot;);echo &quot;\\xEF\\xBB\\xBF&quot;;echo 正文... 在UTF-8文件中放置BOM是微软的习惯，而unix又正好反过来：UNIX首行的#!标示依赖于shell解析，而很多shell出于兼容的考虑不检测BOM，所以加进BOM时shell会把它解释为某个普通字符输入导致破坏#!标示。 相关阅读「带 BOM 的 UTF-8」和「无 BOM 的 UTF-8」有什么区别？网页代码一般使用哪个？ - 知乎 (zhihu.com) 字节顺序标记 - 维基百科，自由的百科全书 (wikipedia.org) “烫烫烫”与“锟斤拷”的原理 - wangwust - 博客园 (cnblogs.com) 字符编码Unicode、UTF-8和ANSI - 简书 (jianshu.com) 字符编码ANSI和ASCII区别、Unicode和UTF-8区别 -CSDN博客","link":"/2022/01/29/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94ANSI/"},{"title":"音乐视频测试","text":"咳，麦克风测试——","link":"/2022/01/29/%E9%9F%B3%E4%B9%90%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95/"},{"title":"NUDTcourse开发日志","text":"这不是软件计划书or升级日志，是写给自己的报告：记录知识点、相关工具的配置和使用、debug过程。 目的：记录开发收获，便于回顾总结，力求简练。 NUDTcourse是数据库课要求的一个信息管理系统项目，前后端分离，使用react、LNMP。 导出excel后端：POI、easyExcel（都是java） 前端：js实现⬇ js文件操作之——导出Excel (js-xlsx) - youryida - 博客园 (cnblogs.com) 基于前端JS导出Excel文件（减轻服务端压力） - 云+社区 - 腾讯云 (tencent.com) bug: API接口问题描述：当时误认为php未正确接收表单。 详细：萌新不知道怎么做API测试，打开网络能看到预检（这是第一次听说预检是啥）成功了，后面加一个请求到的文件，但是点开啥都没。 当时的写法（是正确的。记得json要转字符串）： 1234567fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(params)}) php接收： 1234567&lt;?php // // 获取请求 $data = file_get_contents(&quot;php://input&quot;); $data = json_decode($data,true); ... echo &quot;$Sno, $Sname, $Sgender, $Sbirth, $Major&quot;;?&gt; 自己写了个测试： 123456789101112131415161718192021222324...&lt;body&gt; &lt;button onclick=&quot;fn()&quot;&gt;.&lt;/button&gt; &lt;div id=&quot;t&quot;&gt;&lt;/div&gt; &lt;script&gt; url = &quot;.../test.php&quot;; fn = function() { fetch(url, { method: 'POST', mode: 'cors', //跨域 headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({...}) }) .then((rp) =&gt; rp.text()) .then((response) =&gt; { console.log(response); document.getElementById('t').innerHTML = response; }); }&lt;/script&gt;&lt;/body&gt;... 测试发现发送其实成功了，如果直接点网络里请求的php文件是什么都看不到的，误判了。 当时的回应用console.log才能看，原来sql语句错了，取到的变量两边加上单引号。。 结论：自己不熟悉的项目or框架变数太多，可以自己做一个小demo重现bug。当时直接在项目里改，不知道bug出在ajax还是react，范围太大无处下手。 bug: php中文乱码 php从数据库取的数据是??： 解决：php里加上mysqli_query($con,&quot;SET NAMES 'utf8mb4'&quot;); php的array转码后变成了unicode码：{&quot;S1&quot;:&quot;\\u59d3\\u540d&quot;:&quot;\\u8d75\\u4ea6&quot;,&quot;\\u6027\\u522b&quot;:&quot;\\u5973&quot;,&quot;\\u5e74\\u9f84&quot;:&quot;17&quot;,&quot;\\u7cfb\\u522b&quot;:&quot;\\u5973&quot;}... 解决：给json_encode加上第二个参数JSON_UNESCAPED_UNICODE。 php json_encode 中文不转码-php教程-PHP中文网 PHP json_encode函数的参数说明 - 范仁义 - 博客园 (cnblogs.com) 前端路由react-routerV6后端配置问题场景：生产环境，切换页面时向后端发送了请求，但因为那个url是做的前端路由，后端找不到页面，返回服务器的404页面。 ——为什么在开发环境没有发生404呢？本地启动react项目也是给配了服务器的（像vue用了express），而项目给你把这个服务器配好了。但是生产环境本来是后端路由的，需要手动来配。 要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。 给个警告：这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件，404的URL规则自然是交给前端路由来决定了。你应该在 Vue （React）应用里面覆盖所有的路由情况，然后再给出一个 404 页面。 tomcat配置：直接修改了conf/web.xml，暴力解决（但是控制台还能看见404报错）。 【我以为只会跳到index.html，结果router开始工作，路由到了正确的页面。助かる。。】 参考： 说一说前端路由与后端路由的区别 - 前端南玖 - 博客园 (cnblogs.com) HTML5 History 模式 | Vue Router (vuejs.org) 解决单页应用 history 模式下部署 tomcat 刷新页面出现 404 - 瞭月 (lervor.com) js主动使用路由一般是在页面Link元素配路由，但有时候需要用js实现跳转（比如提交表单后跳转/刷新页面）。 V6文档提供的方法如下，没玩会，目前用的是原生方法。 组件必须是函数Hook类型，不能是class类型 2这里，useNavigate要在组件里调用，不能套在它的函数里调用 我的遭遇： 使用上面官方的功能，发现没法跳转到当前页面实现刷新。但是为了重新渲染表格，我先跳到首页再跳回来，白白跳转了两次。而且如果使用返回键前进键，会发现网页的乱跳行为，很影响体验orz 不用这个用原生可以吗？试了reload()、location.reload()不行，**window.location.href=&quot;XXX&quot;可以**，那就用这个了。 V5已经不能用this.props.history了的样子。V6更是改，直接搜博客大多过时了 局部结论：中途把凑合能用的东西强制套上去，浪费了时间。没学完没法避免，但是尽量不要到处套自己会的某方法，有时间要先查查官方想让你怎么做。 参考： React Router | API Reference 警告：非法 Hook 调用 – React (reactjs.org) npmnpm常用命令及参数详解 - SegmentFault 思否 使用“npm init”初始化项目 - 你是远方 - 博客园 (cnblogs.com) Art-template一开始使用了art-template，换react后就用jsx处理了，主要就是循环生成列表、表格，其他功能不太用的上。 模板引擎 – art-template 现在还有学习模版引擎的必要吗 前端模版引擎 - artTemplate 【上】 - 简书 (jianshu.com) (有两个详细的demo!!) 前端模版引擎 - art-template 【下】 - 简书 (jianshu.com) template(temid, json)如果接收不到json或者第二个参数其实是空的，返回的不是渲染好的html而是编译了一个渲染函数（看见函数里边有的字符都被转义了还有很多\\n，不懂，懵逼） 如果返回回来的 JSON 数据是类似数组数据的话，是没有办法直接渲染的。需要对数据做如下包装，才能正常渲染： 123456789101112131415template:&lt;tbody&gt; {{each student value}} &lt;tr&gt; &lt;td&gt;{{value.studentNumber}}&lt;/td&gt; &lt;td&gt;{{value.name}}&lt;/td&gt; &lt;td&gt;{{value.gender}}&lt;/td&gt; &lt;td&gt;{{value.age}}&lt;/td&gt; &lt;td&gt;{{value.major}}&lt;/td&gt; &lt;/tr&gt; {{/each}}&lt;/tbody&gt;json格式:{&quot;student&quot;: php返回的json数组，里面每组的参数：studentNumber、name...} js如何将json对象转成数组??? - SegmentFault 思否 js字符串的裁剪 - 狗尾草的博客 - 博客园 (cnblogs.com) JSON使用变量123456// 定义空对象let json = {};// 使用变量作为key，只能这种写法，否则变量名会被当成字符串// 例如json.k，作用和json = { k: &quot;value&quot; }、json.k = &quot;value&quot;一样let k = &quot;。。。&quot;;json[k] = &quot;value&quot;; 异步问题本来写成两个函数load、render结果render接受不到json。 ajax是典型的异步编程，必须学会回调函数、then（关于promise）。等前面语句运行完有了结果，再执行下面的。 Promise.prototype.then() - JavaScript | MDN (mozilla.org) 123456789function render(tempID, url, id) { fetch(url) .then(response =&gt; response.json()) .then(function(data) { let html = template(tempID, { &quot;student&quot;: data }); document.getElementById(id).innerHTML = html; console.log({ &quot;student&quot;: data }); });} phpphp字符串拼接 - museluo - 博客园 (cnblogs.com) 多行字符串 1234567891011&lt;?php$str=&lt;&lt;&lt;STR'ok',&quot;hello&quot;I will{$str1}STR;/****其中三个小于号代表多行字符串的输入，STR是字符串界定符，界定符的名字可以自己定义，两个界定符之间的内容就是多行字符串。其中的单引号双引号可以直接输出而不必转义，当然里面也可以直接插入变量，输出是会自动替换变量值的****/?&gt; 管理技巧MVP产品原则开发一个最小的可行产品，从而快速试错。每次迭代，焦点都在核心流程上 前后端对接RESTful⚠还未良好实践 鉴权⚠还未良好实践 HMAChmac主要应用在身份验证中，如下是它的使用过程： 1. 客户端发出登录请求（假设是浏览器的GET请求） 2. 服务器返回一个随机值，并在会话中记录这个随机值 3. 客户端将该随机值作为密钥，用户密码进行hmac运算，然后提交给服务器 4. 服务器读取用户数据库中的用户密码和步骤2中发送的随机值做与客户端一样的hmac运算，然后与用户发送的结果比较，如果结果一致则验证用户合法。 在这个过程中，可能遭到安全攻击的是服务器发送的随机值和用户发送的hmac结果，而对于截获了这两个值的黑客而言这两个值是没有意义的，绝无获取用户密码的可能性，随机值的引入使hmac只在当前会话中有效，大大增强了安全性和实用性。 安全https分离方式 半分离式，前端负责开发页面，通过接口（AJAX）获取数据跟页面进行数据绑定（类似原来的JSP标签方式），最终是由前端把页面渲染出来，后端只提供数据接口，前端的页面仍需要跟后端服务部署到同一个web容器中，如果web容器挂掉，那么会直接导致页面访问不了 全分离式， 前端负责的内容同上，只是前端页面单独部属在一个web容器，前端和后端相互不影响，如果是后端容器挂了，前端可以访问，只是请求不到数据 还有一种就是 在前端和后端之间加入node作为服务，node提供一些接口服务，又或者部分页面需要服务端渲染，又或者需要处理一些大并发的问题，如果是需要涉及到一些大数据的查询或者运算，再由node层去跟后端服务（java服务等）进行数据交互，再由node 接口供给前端 用了react后可以全分离也可以都放在nginx下（前端使用的接口是绝对地址，跨域也解决了） 后端是通过nginx挂载php的fastcgi，接收前端发来的请求，对数据库进行相关操作。 前端和后端数据交互的基本知识和常见方式 用 form 可以发请求，但是会刷新页面或新开页面； 用 a 可以发 get 请求，但是也会刷新页面或新开页面； 用 img 可以发 get 请求，但是只能以图片的形式展示； 用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示； 用 script 可以发 get 请求，但是只能以脚本的形式运行。 用 jsonp 实现请求，支持跨域请求。 用 ajax 实现页面无刷新的请求。 ajax技术XMLHttpRequest，结构比较混乱（但出现很久了，使用规模巨大）；fetch，新兴的ajax技术（他俩是平起平坐的关系）。axios库是对XHR的封装，而上面两个是原生api。 综合考虑开发难度和兼容性问题，决定选用axios进行前后端的信息交互。 用了fetch原生。 双向通信WebSocket与消息推送 - 张果 - 博客园 (cnblogs.com) 如何在大型 Web 应用中保持数据的同步更新？ - 知乎 (zhihu.com) 轮询：客户端定时向服务器发送Ajax请求，服务器接到请求后马上返回响应信息并关闭连接。 优点：后端程序编写比较容易。 缺点：请求中有大半是无用，浪费带宽和服务器资源。 实例：适于小型应用【针对管理员开启轮询怎么样orz】。 长轮询：客户端向服务器发送Ajax请求，服务器接到请求后hold住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。 优点：在无消息的情况下不会频繁的请求，耗费资小。 缺点：服务器hold连接会消耗资源，返回数据顺序无保证，难于管理维护。 Comet异步的ashx， 实例：WebQQ、Hi网页版、Facebook IM。 长连接：在页面里嵌入一个隐蔵iframe，将这个隐蔵iframe的src属性设为对一个长连接的请求或是采用xhr请求，服务器端就能源源不断地往客户端输入数据。 优点：消息即时到达，不发无用请求；管理起来也相对方便。 缺点：服务器维护一个长连接会增加开销。 实例：Gmail聊天 Websocket: WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。依靠这种技术可以实现客户端和服务器端的长连接，双向实时通信。 特点：事件驱动、异步、使用ws或者wss协议的客户端socket，能够实现真正意义上的推送功能 缺点：少部分浏览器不支持，浏览器支持的程度与方式有区别。 跨域问题cors跨域之简单请求与预检请求（发送请求头带令牌token） - SegmentFault 思否 使用 Fetch - Web API 接口参考 | MDN (mozilla.org) 允许跨域配置nginx： 12Access-Control-Allow-Origin: *Access-Control-Allow-Origin: &lt;origin&gt; 后端出错导致误判？ 虽然这么显示但跨域已经配好了，预验是通过的，只是后端出错返回500。可能因此控制台也报错。 Cookie最早被提出来的本地存储方式，在每一次 http 请求携带 Cookie，可以判断多个请求是不是同一个用户发起的，特点是： 有安全问题，如果被拦截，就可以获得 Session 所有信息，然后将 Cookie 转发就能达到目的。(关于攻击和防范本可以看另一篇文章 吃透浏览器安全（同源限制/XSS/CSRF/中间人攻击）) 每个域名下的Cookie不能超过20个，大小不能超过4kb Cookie在请求新页面的时候都会被发送过去 Cookie创建成功名称就不能修改 跨域名不能共享Cookie 如果要跨域名共享Cookie有两个方法 用 Nginx 反向代理 在一个站点登录之后，往其他网站写 Cookie。服务端的 Session 存储到一个节点，Cookie 存储 SessionId Cookie的使用场景 最常见的就是 Cookie 和 Session 结合使用，将 SessionId 存储到 Cookie 中，每次请求都会带上这个 SessionId 这样服务端就知道是谁发起的请求 可以用来统计页面的点击次数 Cookie都有哪些字段 Name、Size 顾名思义 Value：保存用户登录状态，应该将该值加密，不能使用明文 Path：可以访问此 Cookie 的路径。比如 juejin.cn/editor ，path是/editor，只有/editor这个路径下的才可以读取 Cookie httpOnly：表示禁止通过 JS 访问 Cookie，减少 XSS 攻击。 Secure：只能在 https 请求中携带 SameSite：规定浏览器不能在跨域请求中携带 Cookie 减少 CSRF 攻击，详细说明看这里 Domain：域名，跨域或者 Cookie 的白名单，允许一个子域获取或操作父域的 Cookie，实现单点登录的话会非常有用 Expires/Max-size：指定时间或秒数的过期时间，没设置的话就和 Session 一样关闭浏览器就失效 LNMP配置原理太长不看：Nginx工作原理和优化总结 💥配置文件详解：Nginx和PHP的配置 php环境搭建（正确配置nginx和php） Nginx 是非阻塞IO &amp; IO复用模型，通过操作系统提供的类似 epoll 的功能，可以在一个线程里处理多个客户端的请求。Nginx 的进程就是线程，即每个进程里只有一个线程，但这一个线程可以服务多个客户端。 fastCGI ：为了解决不同的语言解释器(如php、python解释器)与webserver的通信，于是出现了cgi协议。只要你按照cgi协议去编写程序，就能实现语言解释器与webserver的通信。如php-cgi程序。但是webserver每收到一个请求，都会去fork一个cgi进程，请求结束再kill掉这个进程。这样有10000个请求，就需要fork、kill php-cgi进程10000次。 fastcgi是cgi的改良版本。fast-cgi每次处理完请求后，不会kill掉这个进程，而是保留这个进程，使这个进程可以一次处理多个请求。 什么是正向代理与反向代理 正向代理是从客户端的角度出发，服务于特定用户（比如说一个局域网内的客户）以访问非特定的服务；反向代理正好与此相反，从服务端的角度出发，服务于非特定用户（通常是所有用户），已访问特定的服务。 URI规范url 设计规范管理员可以重新组织服务器上的文件系统结构，而无需改动URI，这就需要URI和真实的服务器文件系统结构之间有一个映射机制，而不是生硬的对应。 隐藏文件后缀名带后缀名不够美观：nginx一招配置，帮你快速隐藏php后缀名 零散的日记12.15封装了fetch，ajax简洁多了。想要使用RESTful 风格，用四种请求方法分别对应了增删改查。但没有用http状态码，url布置、JWT鉴权都还不会做，实在称不上RESTful。 11.25React 踩坑–input中的value与defaultValue - 墨西哥郊外的晚上* - 博客园 (cnblogs.com) 关于http请求规范： Using Fetch - Web APIs | MDN (mozilla.org) reactjs - Javascript: Fetch DELETE and PUT requests - Stack Overflow 关于在GET请求中使用body_HermitSun的博客 大概只有get不该带body，其他带了都有情可原（它们改服务器数据了） 11.23头次验收。老师建议：用java。php是做小网站的。 我的理解：php太好学了，功能上、性能上不够强。（直接用php是很简洁，所以很多功能不能实现。要想php实现和java一样的功能，也是要学很复杂的框架的） 前端打算换react了，脚手架走起。 ——1.27：这时候才换的？ 11.6上完周五的数据库，重看了聂总的视频，结果从周五下午吸收到周六中午🤣 把看的网页堆这里（也有很多放到前端工具 &amp; 概念 (wolai.com)了，要及时回顾） 10.29师曰：直接显示个php页面上去还不行，要加Model层。我：Model是啥？ 查了巨多MVC、前后端分离、前端工程化（没写过后端，所以什么都拿到前端来搞）。又担心php是不是没有java先进，看了很多知乎上的【xxx是不是过时了】。光是看这些网页花了两三个晚上。确实学到不少，但凭现在的技术落不到实处，决定后端就用php。 收获：及时了解新技术。下面这些就算真过时了，学了对渐进入门有好处，可以帮助理解原理、学习设计方法。（拔草总是比种草有B格hh。但不同于劝退炒股，这是技术文章，看别人的批判是为了更好的了解，注意理性判断） Spring MVC 过时了吗？ - 知乎 (zhihu.com)为什么我劝你放弃mybatis - 知乎 (zhihu.com) 10.20开始系统写日志，顺路看到：谈谈开发日志 - 飞鸟_Asuka 。 刚起步时获取的信息比较杂乱，需要整理总结吸收。 10.15BS5最佳学习网站：Bootstrap5 中文手册-俺老刘 注意时效性，网上很多v3v4的，也不声明自己什么版本。官方文档最靠谱。","link":"/2022/01/05/NUDTcourse%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"},{"title":"全屏滚动","text":"只是备忘啥是全屏滚动 demo： 用fullPage.js制作百度百科史记2013效果演示_dowebok 用fullPage.js制作搜狐快站页面效果演示_dowebok hash方式参数，视觉效果像全屏轮播图/PPT。demo随便找的，比较丑。","link":"/2022/02/04/%E5%85%A8%E5%B1%8F%E6%BB%9A%E5%8A%A8/"},{"title":"在26岁时写给18岁的自己","text":"作者：V2站长livid 原文链接：https://livid.v2ex.com/essays/2012/01/24/a-letter-from-26-to-18.html Jan 24, 2012 我知道现在的自己是再也回不去的了。可是倘若有机会，我是多么希望能让 18 岁的你在一个晴朗的，没有负担的午后读到这封信，并且多么希望你能够将它读上好多遍。 这样的场景或许只会发生在奇幻电影中，26 岁的我坐在这里一字一字写下给 18 岁的你的文字，当文字就这么不停地落下，周遭的景致便不停变化，有的记忆会消失，有的记忆会莫名浮起，不知处在什么年岁的夹在中间的我，就像是芝诺悖论中的阿喀琉斯或那只乌龟，不知道谁会最终超过谁。 而此时此刻，在这个世界上，还有无数的像你一样 18 岁的少年，他们绝对无法知道在他们人生未来的岁月里将会发生的。有一天他们也会到 26 岁，那个时候他们会希望未来的自己游回这 8 年的时间河流，和青春的自己长谈么？ 这些文字恐怕不可避免地会带有说教的意味，并非是现在的自己觉得那时的你做的不好。只是，你所做的每一件事，都会基于你当时所掌握的所有信息量。如果信息量发生改变，你所做的决定和之后的实际行动也就会必然发生改变。 身体你的身体是你最宝贵的、首要的一切。 未来你所拥有的最有创造力的时间是固定的，你最有想象力的那些创造需要的是彻底不被打扰的时间，而保有完美的身体，将会始终保证你能够将你的最好的时光都用在最美好的事情上。 不要挑食，你需要每天都均衡地摄入各种食物，那些能够让你健康的食物，不要太多，也不要太少。你需要学会为自己的所有事情做计划，你会先根据直觉，为自己设定一个健康的食谱，然后再逐渐调整它。你的所有计划需要放在一个你能够经常看到的地方。 随着你脑中的事情越来越多，你可能会越来越忽略自己的身体。所以你不仅需要的是对于保护身体的持续提醒，你更需要的是良好的习惯。 每天睡觉之前，和睡醒之后，一定要记得刷牙，并且要用牙线，只是不要用力过猛。用完牙线之后，记得用漱口水，一定要含足 30 秒之后再吐掉。只用李施德林牌的漱口水，具有强烈刺激性的味道，没准可以启发你的灵感。 在你的人生中，你可能不可避免地会有一段时间必须在夜深人静的时候才能完成自己的想法。不要让这样的生活方式成为常态。你应该每天晨跑，还记得 15 岁中考前为了拿体育满分的每日晨跑么？晨跑是一件会上瘾的，对你的一切都有好处的事情。为了提醒自己养成这个良好习惯，用一个专门的本子记下自己每个月跑的公里数，每页一个月，每行一天，那么在 30 岁时，你就会有一本写满了跑步公里数的 144 页的本子，这只是半本中文版《一九八四》的厚度。而 12 年间，你会至少跑过 10000 公里。这不是一件这个世界上的所有人都能做到的事情，但是如果你做到了，那么在你试着去完成别的事情的过程中，这件事情会给你信心。 另外就是，不要喝任何太甜的饮料，尤其是碳酸饮料。不过，在你头痛的时候，你或许可以稍微喝一点点可口可乐，这东西对缓解头痛确实有点效果。 精神读《圣经》。找到一个轻便的版本，放进你随身的包里。 在你高兴的时候，痛苦的时候，困惑的时候，想到里面的句子，打开它，静静地读。和你爱的人分享你从阅读《圣经》中所体会的。 你要相信，这个世界上存在着一种最高的道德和标准，你知道这样的存在却并不知道其具体的面貌，只是，在你面临选择的时候，想到书中的那些话，想想自己要如何做会让他高兴和认可。 每个月至少读一本和自己专业无关的书，为自己读过的书写下一点什么。 看你能找到的所有电影，从 IMDB TOP 250 开始看，记下喜欢的导演的名字，去 Wikipedia 看他的人生经历，找他的其他电影来看。 这个世界会将很多的音乐推入你的耳朵，而有些特别的音乐需要你自己去寻找。找到巴赫的所有音乐去听，不要错过 GEB 这本书，这会是一本你在人生不同的阶段用自己不同的信息量去读的一本书。 朋友在你的人生中，你不可避免地会遇到很多人。而越往后，你所遇到的人对你而言的情况就越复杂，恐怕你们也就越难成为一生的好朋友。而那些你很早就遇到，现在却依然在你身边的人，你需要付出努力让他们能够一直在你身边，他们是你一生的朋友。 这些努力包括： 不要简单地觉得别人错了，很多时候可能是因为自己没有仔细读说明书或是往来邮件。 忘掉你为朋友做的事情 。 当你有负面情绪的时候，不要把任何人想成坏人。转移注意力，用音乐和电影去挤掉脑中的负面情绪，一天，两天，一周，两周，一年，两年后，你会看到别人在变，或者你已忘记。 整理你需要持续地整理自己周遭的一切。因为你处在的这个世界所指向的趋势是无序的。如果你自身不做足够多的努力，你就会被这样的无序性所吞噬。 暴露在空气中的食物在一个星期之后就会变坏，沙滩上堆砌的小城堡会被风和海浪还原成沙子，这一切都是因为我们所处在的这个世界的熵在升高。 而生命的诞生、发展和存在的过程却是与此相反的，虽然生命的最终结局是熵到达最大值时吞噬一切意义，但是那个时刻离现在的我们还有几十年的时间。而在这几十年里，你需要持续整理你周遭的一切。这或许可以理解为一种对抗，也可以被认为这就是生命的意义。 积累整理的结果，就是你的积累。而你能对这个世界所产生的有益贡献，就是你以自己的方式所积累的。而你从这个世界所获得回报，由你所积累的质量决定。 所以，在你 18 岁，甚至更早的时候，你就应该已然找到一个你能够积累的方向，也可以说成是兴趣的。然后你接下来所做的，就是让这个方向上所有的信息都尽可能多的汇聚到你的大脑中，你的记忆或者说潜意识就像一片大海一样当然是能够装下这一切的。然后，想象你从 20000 米的高空俯瞰大地，大地上是你日复一日所积累的信息，然后你将他们分类，合并，丢弃那些质量低劣的。你见得越多，你就越明白什么算是质量低劣的，也就必然丢得越多。 积累某个方向上的信息量是你一辈子的工作的本质。 你所积累的信息量，最终需要传递到别人那里去。当有越多的人需要你所积累的信息时，这个世界也就会自然给你越丰厚的回报。所以，你需要时不时的问问自己，自己现在在积累的这些信息，由这些信息所创造的现实存在，究竟能够帮助到多少人，又被多少人所必需。 而这一切或许不会在积累之初便看得很清楚。但是，当你在做正确的事情时，你就会自然从这个世界的各个角落听到对于你所做的事情的讨论乃至感谢。这一切或许会需要时间，但是你不要觉得自己是在等待什么，你只是在持续地，习惯性地积累自己所爱的方向上的信息量。","link":"/2022/02/04/%E5%9C%A826%E5%B2%81%E6%97%B6%E5%86%99%E7%BB%9918%E5%B2%81%E7%9A%84%E8%87%AA%E5%B7%B1/"},{"title":"镜面屏雾面屏","text":"其实也不挑这个，唯一讨厌的是被戳电脑显示屏，这时候雾面屏不那么显脏。 我电脑和外接显示屏都是雾面的，21年10月挑了显示屏，有好多地方要关注，品牌、品控、分辨率、尺寸、色域、出厂校色、护眼、智能亮度调节、看评论区说坏点多不多，甚至考虑拿旧屏DIY（不瞎折腾了），一挑一晚上谁还管那个。买的24mq，显示屏就是耐操，只要包装盒跟泡沫没人乱扔，邮递也不大担心。谁给扔了我骂他。不过要是它是镜面，不用的时候一个24寸大镜子竖在那，说不定还反光。感觉旁边的人会不爽。另外就是不反光更护眼，尤其黑色主题。 手机平板追求画质不贴磨砂正常，电脑谁把脸贴到上面看去，甚至屏不好雾面还能掩盖一下。 关于上面说的拿笔记本15.6寸自制那种，自己没搞过就只能照着别人给的硬件型号买，然后组装我也没整过，没钱没时间，不敢乱搞。网上买个现成的又水很深，明明那么小一个便携屏，品牌货那个价都够买24寸了，小牌子又不知道搞得什么屏。还是大屏香。","link":"/2022/02/04/%E9%95%9C%E9%9D%A2%E5%B1%8F%E9%9B%BE%E9%9D%A2%E5%B1%8F/"}],"tags":[{"name":"js","slug":"js","link":"/tags/js/"},{"name":"MVC","slug":"MVC","link":"/tags/MVC/"},{"name":"设计","slug":"设计","link":"/tags/%E8%AE%BE%E8%AE%A1/"},{"name":"时间管理","slug":"时间管理","link":"/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"},{"name":"GTD","slug":"GTD","link":"/tags/GTD/"},{"name":"json","slug":"json","link":"/tags/json/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"ssh","slug":"ssh","link":"/tags/ssh/"},{"name":"ssl","slug":"ssl","link":"/tags/ssl/"},{"name":"通信协议","slug":"通信协议","link":"/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"},{"name":"つくみず","slug":"つくみず","link":"/tags/%E3%81%A4%E3%81%8F%E3%81%BF%E3%81%9A/"},{"name":"产品","slug":"产品","link":"/tags/%E4%BA%A7%E5%93%81/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"浏览器","slug":"浏览器","link":"/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"爬虫","slug":"爬虫","link":"/tags/%E7%88%AC%E8%99%AB/"},{"name":"乐理","slug":"乐理","link":"/tags/%E4%B9%90%E7%90%86/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"日语语法","slug":"日语语法","link":"/tags/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95/"},{"name":"编码","slug":"编码","link":"/tags/%E7%BC%96%E7%A0%81/"},{"name":"debug","slug":"debug","link":"/tags/debug/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"php","slug":"php","link":"/tags/php/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"acg","slug":"acg","link":"/tags/acg/"},{"name":"屏幕","slug":"屏幕","link":"/tags/%E5%B1%8F%E5%B9%95/"}],"categories":[{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"乱弹","slug":"乱弹","link":"/categories/%E4%B9%B1%E5%BC%B9/"},{"name":"产品","slug":"技术/产品","link":"/categories/%E6%8A%80%E6%9C%AF/%E4%BA%A7%E5%93%81/"},{"name":"读书笔记","slug":"技术/读书笔记","link":"/categories/%E6%8A%80%E6%9C%AF/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"发展","slug":"发展","link":"/categories/%E5%8F%91%E5%B1%95/"},{"name":"开发","slug":"技术/开发","link":"/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"},{"name":"配置","slug":"技术/配置","link":"/categories/%E6%8A%80%E6%9C%AF/%E9%85%8D%E7%BD%AE/"},{"name":"娱乐","slug":"娱乐","link":"/categories/%E5%A8%B1%E4%B9%90/"},{"name":"web","slug":"技术/web","link":"/categories/%E6%8A%80%E6%9C%AF/web/"},{"name":"时间管理","slug":"发展/时间管理","link":"/categories/%E5%8F%91%E5%B1%95/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"},{"name":"acg","slug":"娱乐/acg","link":"/categories/%E5%A8%B1%E4%B9%90/acg/"},{"name":"职业规划","slug":"发展/职业规划","link":"/categories/%E5%8F%91%E5%B1%95/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"},{"name":"音乐","slug":"娱乐/音乐","link":"/categories/%E5%A8%B1%E4%B9%90/%E9%9F%B3%E4%B9%90/"}]}