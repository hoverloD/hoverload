{"pages":[{"title":"About","text":"新年新气象，hoverload换了个新博客。这是本人第三个个人博客。","link":"/about/"},{"title":"Links","text":"","link":"/links/"},{"title":"","text":"404 img { width: 50%; height: 50%; display: inline-block; vertical-align: middle; text-align: center; } 页面不存在，可能是修改了标题导致的😲 回到主页","link":"/404"},{"title":"","text":"","link":"/attachments/Pasted%20image%2020230503231159.png"}],"posts":[{"title":"JSON必知必会","text":"概要 前三章 JSON语法第四章 Schema做一致性检验第五章 安全问题第六章 Ajax，API，跨域和JSON-P — 下面几章就很浅了 — 第七章 jQuery，Angular框架第八章 NoSQL第九章 服务端的JSON第十章 JSON作为配置文件 JSON语法JSON语法是JavaScript的真子集，但它是独立于编程语言的一种数据交换格式。 数据交换格式的核心是数据，所以 JSON 中并不会涉及 JavaScript 对象字面量中的函数。JSON 所基于的 JavaScript 对象字面量单纯指对象字面量及其属性的语法表示。这种属性表示方法也就是通过名称 - 值对来实现的。 名称只能用双引号包裹，里面名称甚至可以放单引号。但是 ↓ 命名规范为了获得最大可移植性，应尽可能避免使用空格或特殊字符。 JSON 中的名称 - 值对的名称如果被系统作为对象装入内存的话，将会成为“属性”。在部分系统中，属性名可以包含下划线或数字，但是大多数情况下最好是使用英文字母 A~Z 或 a~z。 ——我选择驼峰 JSON对象有意思所以。。 注意逗号 如果你在名称 - 值对列表的结尾处加上一个逗号，你给机器的指令是“一个新部分的开始”，但是后面什么都没有。 JSON的媒体类型当你在传递数据时，需要提前告知接收方数据是什么类型，这就会涉及媒体类型。媒体类型也有一些你可能听过的其他称呼，如“互联网媒体类型”“内容类型”或“MIME 类型”。它使用“类型 / 子类型”这种格式来表示，比如你可能见过的 text/html。 JSON 的 MIME 类型是 application/json。 互联网数字分配机构（Internet Assigned Numbers Authority，IANA）维护着一个包含全部媒体类型的列表（http://www.iana.org/assignments/media-types/media-types.xhtml）。 JSON Schema🔗JSON Schema 规范（中文版） (apifox.cn) JSON Schema （schema意为格式）可以帮助回答下列问题： 值的数据类型是否正确？ 可以具体规定一个值是数字、字符串等类型。 是否包含所需要的数据？ 可以具体规定哪些数据是需要的，哪些是不需要的。 值的形式是不是我需要的？ 可以指定范围、最小值和最大值 一个JSON Schema 文件，它就是JSON格式的。 123456789101112131415161718192021222324{ &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;, &quot;title&quot;: &quot;Cat&quot;, &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; &quot;minLength&quot;: 3, &quot;maxLength&quot; : 20 }, &quot;age&quot;: { &quot;type&quot;: &quot;number&quot;, &quot;description&quot;: &quot;Your cat's age in years.&quot; &quot;minimum&quot; : 0 }, &quot;declawed&quot;: { &quot;type&quot;: &quot;boolean&quot; } }, &quot;required&quot;: [ &quot;name&quot;, &quot;age&quot;, &quot;declawed&quot; ]} 本章提供的例子只是简介，是冰山一角。JSON Schema 还支持正则表达式（一种字符形式，比如电子邮件地址的格式）以及枚举类型（一个包含所有可能值的列表）。如果你希望深入掌握 JSON Schema，可以访问下面的链接，了解相关规范： JSON Schema 主页（http://json-schema.org/） JSON Schema 验证规范（http://json-schema.org/latest/json-schema-validation. html） 附加一个Linter知识： 是做语法验证的，而schema是检测语义是否合法 JS Linter 进化史 - 知乎 (zhihu.com) JSON安全跨站请求伪造跨站请求伪造，即 CSRF（cross-site request forgery，读作 sea-surf），是一种 利用站点对用户浏览器信任而发起攻击的方式。CSRF 漏洞已经存在了很长时间，远比 JSON 出现得早。 跨站脚本攻击注入攻击：依赖于将数据注入到 Web 应用程序以方便恶意数据执行或编译的攻击 总结 不要使用顶级数组。顶级数组是合法的 JavaScript 脚本，它们可以用&lt;script&gt;标签链接并使用。而如果是个对象，就不会被成功解析。 对于不想公开的资源，仅允许使用 HTTP POST 方法请求，而不是 GET方法。GET 方法可以通过 URL 来请求，甚至可以放在&lt;script&gt;标签中。 使用 JSON.parse() 来代替 eval()。eval() 函数会将传入的字符串编译并执行，这会让你的代码易被攻击。应仅使用 JSON.parse() 来解析 JSON 数据。 零碎Web API🔗Web API简介 - 学习 Web 开发 | MDN (mozilla.org) Web API的服务内容和普通网站差不多，但是它并不是用来拿给人看的🐶 Web API 是通过 HTTP 服务进行交互的一组指令和标准。这些交互可以包括创建、读取、更新、删除（CRUD）等操作，且 Web API 都会有一份说明，概述如何使用这些指令和标准。 （是一个对诸如 HTML 或 JSON 文档等资源进行请求和响应的系统。这些文档使用URL经由 HTTP请求。） Angular适合MVC的框架，和React、Vue不同，提供了更完整的解决方案。 NoSQLNoSQL，顾名思义，它不是一种关系型数据库。我们不能使用 SQL 从关联在一起的数据库表格的行和列中获取数据。 NoSQL 数据库的一个例子是键值对存储。键值对存储模型将数据简化为键值对。如果要将英语词典编入数据库，那么用键值对存储非常合适。每一个单词就是一个键，单词对应的定义就是键的值。对于比较简单的数据结构来说，使用这种数据库比使用传统的关系型数据库要合适。（如果想将一个地址的省、市、区、街道和邮政编码等数据相关联，该怎么办？如果需要这种关系，那最好还是使用关系型模型，毕竟将复杂的关系用一个文档来表示还是很有难度的。） 服务端JSONASP、PHP的：序列化，反序列化，请求json 发送JSON HTTP请求的其他方式：Ruby on Rails，Java，Node.js 配置文件软件中经常会有配置文件或设置文件，它让我们可以不必重新编译就能修改设置。配置文件的格式有很多，有 INI 和 XML 等。每种格式都有优点和缺点。 现实中一个使用 JSON 作为配置文件的极佳例子就是 Node.js 默认的 JavaScript 包管理器：npm（文件名称为 package.json。该文件包含了每个包的具体信息，如名称、版本、作者、贡献者、依赖、脚本以及许可。由于json没有注释这一说法，想要加点说明时，可以用一个键值对&quot;comment&quot;: &quot;xxx&quot;来代替）。当然，它也被 AngularJS 和 jQuery 等其他框架使用。","link":"/2022/02/15/JSON%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"},{"title":"MVC","text":"到现在也不得要领，难道是这次技术选型不对导致的orz MVC放一堆MVC链接： 如何理解Web应用程序的MVC模型？ - 知乎 (zhihu.com) 能简单解释一下MVC吗？越简单越好 - SegmentFault 思否 。。。还好多没整理，说的泛泛的 MVC(Model View Controller)是什么？_hmyixiu的博客-CSDN博客 M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。比如一批统计数据可以分别用柱状图、饼图来表示。C存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新。 Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。 View（视图）是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。 Controller（控制器）是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。 MVC 分层有助于管理复杂的应用程序，因为您可以在一个时间内专门关注一个方面。例如，您可以在不依赖业务逻辑的情况下专注于视图设计。同时也让应用程序的测试更加容易。MVC 分层同时也简化了分组开发。不同的开发人员可同时开发视图、控制器逻辑和业务逻辑。 【上面像是说后端要主动把更新发给前端）；下面视图请求数据，检查输入是前端就能写的逻辑，也就发送数据是前端发个fetch告诉后端要怎么操作数据】 如果管理员只有一个，那我只要在改了表之后自动刷新就完了，那就这么设定吧XD 担心项目是不是不合MVC要求 C：我现在理解我的C就是React里模块的逻辑，就是和模块交互，它去决定取什么数据，然后自动到时候改变View，整个业务逻辑就在前端项目就实现了呀。 后端解析url，从而操作数据库，做了一个前后端对接，这个逻辑也是Controller？目前这个逻辑是php写的，然后它调用了另一个专门用来取数据生成json的php文件，Model就是我取出来的那个json。 C需要监控它的变化如果变了就告诉V？双向通讯是MVC要实现的工作吗【好像是的，后端推送信息】 讲技术-什么是Web Hook？ - SegmentFault 思否","link":"/2022/02/02/MVC/"},{"title":"Icarus主题定制","text":"调整博客字体、修改边栏与正文宽度 字体icarus默认字体比较小，想要改大点。 需要找到字体所在css文件。首先去source\\css那找找看 themes\\icarus\\source\\css\\style.styl123456789101112131415161718// Base CSS framework@import '../../include/style/base' // &lt;- !// Helper classes &amp; mixins@import '../../include/style/helper'// Icarus components@import '../../include/style/button'@import '../../include/style/card'@import '../../include/style/article'@import '../../include/style/navbar'@import '../../include/style/footer'@import '../../include/style/pagination'@import '../../include/style/timeline'@import '../../include/style/search'@import '../../include/style/codeblock'@import '../../include/style/widget'@import '../../include/style/donate'@import '../../include/style/plugin'@import '../../include/style/responsive' 转移阵地，找到了。 \\themes\\icarus\\include\\style\\base.styl12345678910111213bulma-stylus-root = '../../../../node_modules/bulma-stylus/stylus'/* --------------------------------- * Override Bulma CSS Framework * --------------------------------- */$body-size ?= 14px // 字体大小在这里，我改成了15px$body-background-color ?= #f7f7f7$family-sans-serif ?= Ubuntu, Roboto, 'Open Sans', 'Microsoft YaHei', sans-serif$family-code ?= 'Source Code Pro', monospace, 'Microsoft YaHei'$size-7 ?= .85rem$size-small ?= .75rem 这里也是最主要的css所在地了。 边栏修改宽度左边layout是正文，分成了1栏、2栏、3栏的情况。tablet：平板，desktop：一般电脑屏幕大小，widescreen：宽屏。右边widgets是侧边栏，有2栏和3栏的情况。 我把两栏情况下layout的8-8-8改成了9-9-9，同时吧widgets的从4-4-4改成3-3-3，让它们相加仍然等于12。注意：只改layout是不够的，会导致整体不居中。 不同页面对应不同布局参考官方文档： Icarus用户指南 - 主题配置 - Icarus (ppoffice.github.io)","link":"/2022/01/27/icarus%E4%B8%BB%E9%A2%98%E5%AE%9A%E5%88%B6%E2%80%94%E2%80%94%E5%AD%97%E4%BD%93%E3%80%81%E8%BE%B9%E6%A0%8F%E5%AE%BD%E5%BA%A6/"},{"title":"Hello World","text":"hexo新人的使用记录 基础命令新建文章hexo n(new) XXarticle 默认是post（文章），还有page（页面）、draft（草稿）。 文章属性文章可以拥有如下属性： Setting Description Default layout 文章类型 post、page、draft title 文章的标题 date 创建日期 文件的创建日期 updated 修改日期 文件的修改日期 comments 是否开启评论 true tags 标签 categories 分类 permalink url中的名字 文件名 thumbnail 文章缩略图 cover 文章封面 yaml格式。 123456789101112131415161718192021222324252627282930# 标题和创建时间，自带title: Hello Worlddate: 2022-01-25 15:24:17# 分类categories: c1# 多级分类，注意：这是父子关系，不是同级关系categories:- c1- c2# 同级分类categories:- [python,模块,PIL]- [python,模块,matplotlib]# 单标签tags: tag1# 多标签：tags: - tag1 - tag2# ortags: [tag1,tag2]# 摘要，写了就不会显示全文了# 另一种：&lt;!-- more --&gt;，上面是摘要，下面是正文excerpt: 我是摘要# 文章封面cover: https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/iceCube.jpg 发布123456789101112131415# 新建博客hexo init XXblog# 渲染source里的md文件hexo g(generate)# 本地预览hexo s(server)# 建议部署先先清除缓存，然后g渲染，最后d部署。hexo clean# 部署（遇到git认证问题（10054）：使用git自带的bash or 关掉代理）hexo d(deploy)# 还有，传到github后，有时blog没有立刻变化，，我是强制刷新+等上一分钟，再看就好了 注：新建、删除或修改文章后，不需要重启hexo server，刷新一下即可预览。 自定义toc 目录引入(误)toc安装文档地址：https://github.com/bubkoo/hexo-toc 1npm install hexo-toc --save 并修改hexo目录下的配置文件_config.yml文件,添加toc的相关配置，参数具体含义请查看上面链接里面的readme。 123456789toc: maxdepth: 3 class: toc slugify: transliteration decodeEntities: false anchor: position: after symbol: '#' style: header-anchor 参考：hexo搭建博客踩坑 | Home page (tru-xu.github.io) 掉坑了。不显示toc是因为要在属性里加上toc: true，这谁知道啊&lt;( ‵□′)&gt; 还好，刚装的插件remove掉，toc就正常了 404页面404.html放在主题的source文件夹即可，在本地测不出来（评论模块也是），放到github可以用。 新增菜单栏选项 添加新页面：hexo new page “xx” 在主题配置文件的menu中加上该页面 在zh-CN.yml文件中加上中文意思（看心情） 文档头scaffolds文件夹下有draft、page和post的文档头模板，可参考上文的文章属性填写，示例： yourBlog\\scaffolds\\post.md12345678---title: {{ title }}date: {{ date }}categories: tags: toc: truecover: https://cdn.jsdelivr.net/gh/yourID/figbed@main/images/.jpg--- 其他草稿 添加草稿：hexo new draft “xx” 预览草稿：hexo server –draft 发布草稿：hexo publish draft “xx” 代码块加title123``` [language] [title]your code``` 效果： 我是标题，你也可以在这里写代码路径。12## h2lorem 参考：hexo代码块进阶写法 | Qcmoke’s Blog（博主的是Next，icarus没法加链接的样子） 备份站点配置完善后就不改了，不必 文章的md另外传git。（感想：门户博客这点还是方便啊） 官网文档站点配置： 配置 | Hexo 主题配置（大头）： Icarus用户指南 - 主题配置 常见问题 - Icarus Issues · ppoffice/hexo-theme-icarus (github.com) 其他参考： Hexo 入门指南 | Markdown 简单的世界 配置日志待办： 文章部分显示（摘要） RSS 评论模块 使用category，技术和非技术分开 自定义文档头 修改栅栏布局，加宽正文 后期： LaTeX支持 怎么配才能使用F9沉浸阅读 文章悬浮导航 文章界面侧边栏只显示目录 代码高亮换成ayu（那个版本的highlight.js没有） SEO优化","link":"/2022/01/01/hello-world/"},{"title":"云主机被回收了","text":"图便宜用了软工课上给的某比赛提供的云主机，本还未过期，比赛结束后云主机被回收了。联系客服“恢复”了，但是完全没有网络，可能是平台给断网了（恢复了但没有完全恢复🐶） 开启服务nginx:nginx -s reload MySQL:service start mysql Tomcat:在安装目录/bin下执行./startup.sh。 关闭防火墙以上完成后，可以通过访问127.0.0.1:xxx查看Nginx和Tomcat代理的网页了，但还上不了网，公网ip也ping不通，问了客服，答复是需要关防火墙。刚拿到主机的时候没整网络直接就能用，可能开始是关的？ 查询得知有两种防火墙：firewalld、iptables。但执行关闭命令时发现这两个都找不到，最后确定了有iptables。 还稀里糊涂执行了iptables -F，没有保险意识。。至少本来都是ACCEPT，还不是最坏情况。 学习了：【小知识】第9期 20分钟掌握iptables指令_哔哩哔哩_bilibili 处理入站信息包的规则被添加到 INPUT 链中。处理出站信息包的规则被添加到 OUTPUT 链中。处理正在转发的信息包的规则被添加到 FORWARD 链中。这三个链是基本信息包过滤表中内置的缺省主链。 INPUT是进来的数据包，OUTPUT是出去，现在全ACCEPT按理不相当于关了吗？那么暂且认为不是因为这个原因。 查看本机开放端口：netstat -tulnp，看着也没问题。 最后看了这篇：Job for network.service failed because the control process exited with error code. See “systemc的解决办法_Spring Boot-Common On With You-CSDN博客，发现我的networking也没在工作： 但是这是做底层的网络配置吧，或许就是平台给断网了。凭我的debug能力也到此为止了。 关于这事的日记： 2.24 因为环境迁移，服务器被重启了，服务需要手动开一下。 联系客服后次日就能开机了，但两个快照都没了。发现不能上网后一通胡乱操作。。 2.25 今天用最原始方式（截图）备份了php代码，数据库或许也截一下生成代码？至少现在能通过平台远程控制 3.2 今早客服说自己买个IP换上就好。因为平台只允许我持有一个公网ip，现在手上拿着的删不了，没法换，平台提示让我填一个工单来申请配额。 3.9 填了之后一周过去也没人处理，估计个人用户就不在服务范围内（一开始找客服，也被当成企业用户）。 没人搭理，我想着如果真是现在的ip有问题，大概是被回收了，但是平台表面并不显示？毕竟网站完成度就挺低。于是花20块钱续了一个月，没变化。。 吐槽： 发的优惠券面值几千，但是就够买4核8G两个月 首先是价格水分大，阿里腾讯之类的学生优惠，估计一百左右就能买半年我现在的配置 当时想用久点买了2核4G四个月，不是很公平的换算吗，但是就是直接被搞掉了 2月十来号，官网突然一整天上不去，搞迁移。之后主机就出问题，说是被标记为活动用户资源被回收），事先一点通知都没。平台上到期时间明明白白写着5月，谁想得到来这出？ 又逛了一遍他们官网，简陋，帮助文档都是空白一片，当时怎么就为了省点钱就用下去了？感觉没商业化，不知道提供给谁用的。。这两三周和我说话的客服也就那一个人，不觉得ta能提出啥帮助了。 做的快照被搞没了 好，我的忿忿完结了。。 这个事主要对我情绪影响比较大，其实可以花一晚上把数据库的表建回来，填点条目进去再测试一遍；把软工后端截图再敲出来；本地环境拿出来重新投入使用。毕竟除了数据库其他多多少少有备份，只是我花在手动配置和远程操作上的时间蛮多的（可能是有感情了之类的🤣但是实在没必要，再配一次速度快很多，对自己太没信心了）。 头一次买云主机，因为缺少经验找了不靠谱的平台，下次计划买腾讯的学生优惠。。另外要知道这次环境被搞崩没什么大不了的，各软件配置都不是啥大问题，只是没配过所以手生。 4.8 今天数据库验收，我自认学习方法不对，后面也没热情写下去但还是腆着脸去了趟。老师还是很客气，听我抱怨云主机的事。听完还说，这些公司都这样，没什么好消沉的。。原来这种事还很多，被社会教做人了🤣 相关阅读netstatlinux netstat命令：网络状态查看命令 (biancheng.net) iptablesiptables详解及一些常用规则 - 简书 (jianshu.com)Linux下iptables防火墙配置详解 - 简书 (jianshu.com) 12345#首先在清除规则前要将policy INPUT改成ACCEPT，以免DROP全部导致悲剧iptables -P INPUT ACCEPT#清空默认所有规则iptables -F 查看文件类型使用ls -l或缩写ll即可，看属性第一个字符。 也可使用file命令或stat命令。 普通文件类型 -Linux中最多的一种文件类型，包括 纯文本文件(ASCII)、二进制文件(binary)、数据格式的文件(data)、各种压缩文件。 目录文件类型 d毕竟linux一切皆文件，能用cd进入的目录也是。 字符设备文件 c即串行端口的接口设备，例如键盘、鼠标。 块设备文件 b即存储数据以供系统存取的接口设备，简单而言就是硬盘。例如一号硬盘的代码是 /dev/hda1等文件。 套接字文件 s这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。最常在 /var/run目录中看到这种文件类型。 管道文件 pFIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO是first-in-first-out的缩写。 链接文件 l类似快捷方式。 软链接：指向目标文件，inode互不相同。删除软连接时，不影响源文件，删除源文件后，软连接失效；硬链接：共享inode，因为硬链接文件是同一个文件，文件大小也一样，相当于另一个文件入口。","link":"/2022/02/25/%E4%BA%91%E4%B8%BB%E6%9C%BA%E8%A2%AB%E5%9B%9E%E6%94%B6%E4%BA%86/"},{"title":"Ssl和ssh","text":"SSH 即Secure Shell，SSL即Secure Socket Layer。在最初的设计意图中，SSH更多被设计为加强Telnet/FTP安全的传输协议，SSL被设计为加强Web安全传输的协议(事实上还有SMTP/NNTP等)。 SSH协议连接远程主机，在XShell、数据库软件能看到 SSH协议详解 - zmlctt - 博客园 (cnblogs.com) SSL协议https、ftps的s。SSL协议使用通讯双方的客户证书以及CA根证书，是Internet网上安全通讯与交易的标准。 超文本传输安全协议 (wikipedia.org) 浅谈HTTPS（SSL/TLS）原理 Git报错解决 OpenSSL SSL_read: Connection was reset, errno 10054 (cnblogs.com) 真不是因为被墙吗，而且还是移动这个墙中墙，让我用github如此难受。还有下面这个问题。 OpenSSL、OpenSSHOpenSSL：一个C语言函数库，是对SSL协议的实现。openssl 中也有个叫做 openssl 的工具，是 openssl 中的库的命令行接口。 OpenSSH是实现SSH的免费软件， linux/unix都用openssh软件提供SSH服务","link":"/2022/01/30/ssl%E5%92%8Cssh/"},{"title":"To B &amp; to C","text":"B端和C端的产品，从思维到方法是大不相同的。 定义B端产品，也叫To B（To Business）产品，即面向企业或者特定用户群体的企业级别产品； C端产品，也叫To C（To Customer）产品，即面向普通大众消费者的产品。 通常判断一个产品是B端还是C端，最简单的判断的方式就是看产品向谁进行收费：企业付费则是B端产品，消费者付费则是C端产品。 B端产品是为企业提供服务、解决企业痛点的产品，例如财务系统、项目管理系统。B端产品的决策者是企业管理者，使用者是员工。 C端产品是解决用户在生活中的需求和痛点的产品，例如饿了么、淘宝。C端产品的决策者和使用者都是用户自身。 差异需求 B端注重决策者思维，C端注重纯用户思维 B端注重效率（快速完成任务），C端注重粘性（多打开、多使用） B端注重稳定，C端注重多样性。 拉新B端产品推广门槛远高于C端产品，很多时候B端产品需要专门的市场人员进行销售；C端产品的用户属性的相对单一，通常通过活动：获取用户、提高活跃率、提高留存、变现以及自传播等。 留存B端的留存率会比C端高很多。 对于B端产品，如果用户开始习惯使用，则基本不会再考虑使用其他同类产品： B端产品费用相对较高； 企业相关信息已经都记录在该产品上，迁移成本会非常大。 C端产品的替换成本相对较低，并且在市面上可以找到很多同类替代品，所以用户流失率往往会高于B端产品。 商业模式B端产品一般通过直接收费的方式来实现营收，通常不同级别的需求可能会收取不同的费用。 C端产品大都免费开放给用户，通过流量和资源的变现实现营收，例如：广告、导流、增值服务等。 最后B端产品并非不重视审美和交互体验，而是在复杂的B端业务逻辑面前，其优先级要排在稳定以及高效之后。 不管是B端产品还是C端产品，首先要记住对于所有用户来说：好的产品应该是简单易用的。","link":"/2022/01/29/to-B-to-C/"},{"title":"使用Unsplash图库","text":"Unsplash是最著名的免费图库，国内载图速度也很可以，可以通过他们提供的API来方便地获取各种风格、尺寸的随机图片。 使用示例下方图片是用链接 https://source.unsplash.com/random/1920×1080?cake 加载的： 话说乘号在哪打？发现输入法输入cheng会看到。 如何保存图片我发现这样载图有个缺点：由于图片链接写的是生成前的api，读者在浏览器右键保存这张图片时，会发现得到了另一张重新生成的图。 解决方式：读者可以按F12或ctrl+shift+I打开开发者模式，从源代码一栏获取。图片位置如下图： 常用参数返回随机图片/random 指定返回的图片大小/random/1920x1080 搜索指定用户/user/jjying 搜索特定关键词/?sunny,day","link":"/2022/03/17/%E4%BD%BF%E7%94%A8Unsplash%E5%9B%BE%E5%BA%93/"},{"title":"刷播放量爬虫","text":"今天去同学github踩踩，看到个刷播放的爬虫，好用！怎么没早点看见hh 链接：yangyaojia/EducoderWatchedAll: YJSchaf来了全看了 (github.com) 一开始不知道他搁哪找的链接，原来在视频资源的网络界面很明显就看到json了，我怎么就没想到里面会有呢！ 然后点开一个视频看一会，发现告知观看进度的api是怎么调用的，OK了。 收获：一直想写个educoder的爬虫，太懒没写。。（爬大家交上的图片，从而获取作业答案），自己写估计也想不到看网络，然后陷入瞎猜参数、url ➡ 猜不中跪了 平时很少仔细看网络，我太懒了 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import requests# MAX_LEN: 修改观看时间MAX_LEN = 3600print(&quot;YJSchaf替你把视频全看了&quot;)courseId = &quot;。。&quot; #input(&quot;输入课程ID：&quot;)# 身份认证的两个cookie，我一上来是在浏览器设置看的c1 = &quot;。。&quot; #input(&quot;autologin_trustie：&quot;)c2 = &quot;。。&quot; #input(&quot;_educoder_session：&quot;)headers = { 'Host': 'data.educoder.net', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0', &quot;Accept&quot;: &quot;application/json&quot;, &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Referer&quot;: &quot;https://www.educoder.net/classrooms/&quot; + courseId + &quot;/video&quot;, &quot;Content-Type&quot;: &quot;application/json; charset=utf-8&quot;, &quot;Origin&quot;: &quot;https://www.educoder.net&quot;, &quot;Connection&quot;: &quot;keep-alive&quot;, &quot;Cookie&quot;: &quot;autologin_trustie=&quot;+c1+&quot;;&quot;+&quot;_educoder_session=&quot;+c2 }vedios_info_url = &quot;https://data.educoder.net/api/courses/&quot; + courseId + &quot;/course_videos.json?coursesId=&quot; + courseId + &quot;&amp;id=&quot; + courseId + &quot;&amp;limit=100&quot;vedios_info = requests.get(vedios_info_url, headers = headers).json()post_url = &quot;https://data.educoder.net/api/watch_video_histories.json&quot;for v in vedios_info[&quot;videos&quot;]: req_payload = { &quot;point&quot;:0, &quot;video_id&quot;: v[&quot;id&quot;], &quot;course_id&quot;: courseId , &quot;duration&quot;: MAX_LEN, &quot;device&quot;: &quot;pc&quot; } response = requests.post(post_url, json = req_payload, headers = headers).json() update_payload = { &quot;point&quot;: MAX_LEN, &quot;log_id&quot;: response[&quot;log_id&quot;], &quot;watch_duration&quot;: MAX_LEN, &quot;total_duration&quot;: MAX_LEN, &quot;ed&quot;:&quot;1&quot; } response = requests.post(post_url, json = update_payload, headers = headers).json() if(response[&quot;message&quot;] == &quot;success&quot;): print(&quot;【success】&quot; + v[&quot;title&quot;]) else: print(&quot;【fail】&quot; + v[&quot;title&quot;])","link":"/2022/01/29/%E5%88%B7%E6%92%AD%E6%94%BE%E9%87%8F%E7%88%AC%E8%99%AB/"},{"title":"关于浏览器的沉浸阅读器","text":"阅读器什么时候能一统天下 发个牢骚。CSDN的页面很乱，还有半屏的广告弹窗，上个油猴脚本；简书的右侧边栏推荐八竿子打不着的文章，adblock屏蔽；博客园有的界面布局不合理，加上live2d挡着，F12手动改。。 浏览器要是推出统一的功能把正文提取出来，统一格式多好。但是人网站不这么想，肯定千方百计避免被屏蔽广告咯。到现在大部分我常用的中文网站都不支持edge阅读器。而且最近edge菜单栏找不到这个选项了，这功能不是被抛弃了吧。 现在可以按F9使用，或者在url前面加read:，强制使用。不过就连windows自个的技术支持网站用阅读器也有bug，比如不能载图。本来我在想，怎么才能让自个博客支持阅读器，但是不知道它的机制怎么搞嘛。 看到好多人给简悦打广告于是下过来试试，愣是没找到开关在哪，原来它变红色的时候才能用。但是开头提到的网站居然都不能用啊。说好听点，或许我没有找到合适的应用场景。 看了它的文档是这么说的： 于是又去了几个hexo和wordpress博客，发现并不能用，遂放弃。 不知道什么时候关注了Kenshin的推，他有些文字让我对简悦有所改观😂毕竟也是个爱用RSS的，同道中人。放一篇他的说明：什么才是阅读模式该有的样子？ - Kenshin’s Blog 但是下回来果然还是没适配多少我常看的站点，算了。 关于阅读器实现，找到一些有意思的： 浏览器的阅读模式怎么实现？ - 知乎 (zhihu.com) 阅读模式是如何实现的? - 码匠笔记 (majiang.life) 浏览器中实现阅读模式 - 放飞梦想 (mogoweb.github.io)","link":"/2022/01/29/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B2%89%E6%B5%B8%E9%98%85%E8%AF%BB%E5%99%A8/"},{"title":"帮ZZ搭github博客","text":"博客基本配好了，给zz整个同款，虽然她平时不写博客^ ^ 博客本身倒没什么，改改配置文件，生成静态页面，就等着把deploy那个文件夹上传了。 要来github账号建库：zz.github.io，怎么把本地的东西传上github？直接hexo d提交会报403没权限，用协作吧。发了协作邀请，在平台并没看到消息，后来发现发到邮件去了（这就是文化差异吗😂）。总之用协作身份上传了。 没想到光这样不够，需要去setting选好内容是main分支然后保存，下面还必须选一个theme（忘掉了），然后就会多出一个jekyll的配置文件，这文件当然是多余的，把它删掉，这时候网页才配好了。成果：zz’s blog (oblivate1.github.io)","link":"/2022/01/29/%E5%B8%AEzz%E6%90%ADgithub%E5%8D%9A%E5%AE%A2/"},{"title":"在26岁时写给18岁的自己","text":"作者：V2站长livid 原文链接：https://livid.v2ex.com/essays/2012/01/24/a-letter-from-26-to-18.html Jan 24, 2012 我知道现在的自己是再也回不去的了。可是倘若有机会，我是多么希望能让 18 岁的你在一个晴朗的，没有负担的午后读到这封信，并且多么希望你能够将它读上好多遍。 这样的场景或许只会发生在奇幻电影中，26 岁的我坐在这里一字一字写下给 18 岁的你的文字，当文字就这么不停地落下，周遭的景致便不停变化，有的记忆会消失，有的记忆会莫名浮起，不知处在什么年岁的夹在中间的我，就像是芝诺悖论中的阿喀琉斯或那只乌龟，不知道谁会最终超过谁。 而此时此刻，在这个世界上，还有无数的像你一样 18 岁的少年，他们绝对无法知道在他们人生未来的岁月里将会发生的。有一天他们也会到 26 岁，那个时候他们会希望未来的自己游回这 8 年的时间河流，和青春的自己长谈么？ 这些文字恐怕不可避免地会带有说教的意味，并非是现在的自己觉得那时的你做的不好。只是，你所做的每一件事，都会基于你当时所掌握的所有信息量。如果信息量发生改变，你所做的决定和之后的实际行动也就会必然发生改变。 身体你的身体是你最宝贵的、首要的一切。 未来你所拥有的最有创造力的时间是固定的，你最有想象力的那些创造需要的是彻底不被打扰的时间，而保有完美的身体，将会始终保证你能够将你的最好的时光都用在最美好的事情上。 不要挑食，你需要每天都均衡地摄入各种食物，那些能够让你健康的食物，不要太多，也不要太少。你需要学会为自己的所有事情做计划，你会先根据直觉，为自己设定一个健康的食谱，然后再逐渐调整它。你的所有计划需要放在一个你能够经常看到的地方。 随着你脑中的事情越来越多，你可能会越来越忽略自己的身体。所以你不仅需要的是对于保护身体的持续提醒，你更需要的是良好的习惯。 每天睡觉之前，和睡醒之后，一定要记得刷牙，并且要用牙线，只是不要用力过猛。用完牙线之后，记得用漱口水，一定要含足 30 秒之后再吐掉。只用李施德林牌的漱口水，具有强烈刺激性的味道，没准可以启发你的灵感。 在你的人生中，你可能不可避免地会有一段时间必须在夜深人静的时候才能完成自己的想法。不要让这样的生活方式成为常态。你应该每天晨跑，还记得 15 岁中考前为了拿体育满分的每日晨跑么？晨跑是一件会上瘾的，对你的一切都有好处的事情。为了提醒自己养成这个良好习惯，用一个专门的本子记下自己每个月跑的公里数，每页一个月，每行一天，那么在 30 岁时，你就会有一本写满了跑步公里数的 144 页的本子，这只是半本中文版《一九八四》的厚度。而 12 年间，你会至少跑过 10000 公里。这不是一件这个世界上的所有人都能做到的事情，但是如果你做到了，那么在你试着去完成别的事情的过程中，这件事情会给你信心。 另外就是，不要喝任何太甜的饮料，尤其是碳酸饮料。不过，在你头痛的时候，你或许可以稍微喝一点点可口可乐，这东西对缓解头痛确实有点效果。 精神读《圣经》。找到一个轻便的版本，放进你随身的包里。 在你高兴的时候，痛苦的时候，困惑的时候，想到里面的句子，打开它，静静地读。和你爱的人分享你从阅读《圣经》中所体会的。 你要相信，这个世界上存在着一种最高的道德和标准，你知道这样的存在却并不知道其具体的面貌，只是，在你面临选择的时候，想到书中的那些话，想想自己要如何做会让他高兴和认可。 每个月至少读一本和自己专业无关的书，为自己读过的书写下一点什么。 看你能找到的所有电影，从 IMDB TOP 250 开始看，记下喜欢的导演的名字，去 Wikipedia 看他的人生经历，找他的其他电影来看。 这个世界会将很多的音乐推入你的耳朵，而有些特别的音乐需要你自己去寻找。找到巴赫的所有音乐去听，不要错过 GEB 这本书，这会是一本你在人生不同的阶段用自己不同的信息量去读的一本书。 朋友在你的人生中，你不可避免地会遇到很多人。而越往后，你所遇到的人对你而言的情况就越复杂，恐怕你们也就越难成为一生的好朋友。而那些你很早就遇到，现在却依然在你身边的人，你需要付出努力让他们能够一直在你身边，他们是你一生的朋友。 这些努力包括： 不要简单地觉得别人错了，很多时候可能是因为自己没有仔细读说明书或是往来邮件。 忘掉你为朋友做的事情 。 当你有负面情绪的时候，不要把任何人想成坏人。转移注意力，用音乐和电影去挤掉脑中的负面情绪，一天，两天，一周，两周，一年，两年后，你会看到别人在变，或者你已忘记。 整理你需要持续地整理自己周遭的一切。因为你处在的这个世界所指向的趋势是无序的。如果你自身不做足够多的努力，你就会被这样的无序性所吞噬。 暴露在空气中的食物在一个星期之后就会变坏，沙滩上堆砌的小城堡会被风和海浪还原成沙子，这一切都是因为我们所处在的这个世界的熵在升高。 而生命的诞生、发展和存在的过程却是与此相反的，虽然生命的最终结局是熵到达最大值时吞噬一切意义，但是那个时刻离现在的我们还有几十年的时间。而在这几十年里，你需要持续整理你周遭的一切。这或许可以理解为一种对抗，也可以被认为这就是生命的意义。 积累整理的结果，就是你的积累。而你能对这个世界所产生的有益贡献，就是你以自己的方式所积累的。而你从这个世界所获得回报，由你所积累的质量决定。 所以，在你 18 岁，甚至更早的时候，你就应该已然找到一个你能够积累的方向，也可以说成是兴趣的。然后你接下来所做的，就是让这个方向上所有的信息都尽可能多的汇聚到你的大脑中，你的记忆或者说潜意识就像一片大海一样当然是能够装下这一切的。然后，想象你从 20000 米的高空俯瞰大地，大地上是你日复一日所积累的信息，然后你将他们分类，合并，丢弃那些质量低劣的。你见得越多，你就越明白什么算是质量低劣的，也就必然丢得越多。 积累某个方向上的信息量是你一辈子的工作的本质。 你所积累的信息量，最终需要传递到别人那里去。当有越多的人需要你所积累的信息时，这个世界也就会自然给你越丰厚的回报。所以，你需要时不时的问问自己，自己现在在积累的这些信息，由这些信息所创造的现实存在，究竟能够帮助到多少人，又被多少人所必需。 而这一切或许不会在积累之初便看得很清楚。但是，当你在做正确的事情时，你就会自然从这个世界的各个角落听到对于你所做的事情的讨论乃至感谢。这一切或许会需要时间，但是你不要觉得自己是在等待什么，你只是在持续地，习惯性地积累自己所爱的方向上的信息量。","link":"/2022/02/04/%E5%9C%A826%E5%B2%81%E6%97%B6%E5%86%99%E7%BB%9918%E5%B2%81%E7%9A%84%E8%87%AA%E5%B7%B1/"},{"title":"编码问题——ANSI","text":"微软的记事本里有个格式叫ANSI，经常用它转码。但是做项目时发现sublime居然没有这种格式，怎么回事呢？ 问题场景数据库的表是utf8mb4格式，导出的csv里有汉字，在excel打开是乱码的，因为excel默认用“ANSI编码”。对于这个问题，网上的解决都是：用微软的记事本把编码改成ANSI。这也太没效率了，至少在我常用的编辑器里转码吧，但是死活找不到哪种编码叫“ANSI”。原来这是个标准，每个国家实现都不一样，自己的win系统是简体中文，对应了GB2312。 ANSI编码是一种对ASCII码的拓展。ANSI编码用0x00~0x7f （即十进制下的0到127）范围的1 个字节来表示 1 个英文字符，超出一个字节的 0x80~0xFFFF 范围，开始用两个字节来表示其他语言的其他字符（也就是说，ANSI码仅在前128（0-127）个与ASCII码相同，之后的字符全是某个国家语言的所有字符）。简体中文编码表GB2312，繁体中文BIG5，日文Shift_JIS，各国有各国的标准。受制于当时的条件，不同语言之间的ANSI码之间不能互相转换，这就会导致在多语言混合的文本中会有乱码。 解决如何告知excel这个csv是utf8编码呢？需要在文件头加上BOM。 csv.php12345// excel默认ASCI编码，为了正常显示utf8，要加BOM头header ( &quot;Content-type: text/csv; charset=utf-8&quot;);echo &quot;\\xEF\\xBB\\xBF&quot;;echo 正文... 在UTF-8文件中放置BOM是微软的习惯，而unix又正好反过来：UNIX首行的#!标示依赖于shell解析，而很多shell出于兼容的考虑不检测BOM，所以加进BOM时shell会把它解释为某个普通字符输入导致破坏#!标示。 相关阅读「带 BOM 的 UTF-8」和「无 BOM 的 UTF-8」有什么区别？网页代码一般使用哪个？ - 知乎 (zhihu.com) 字节顺序标记 - 维基百科，自由的百科全书 (wikipedia.org) “烫烫烫”与“锟斤拷”的原理 - wangwust - 博客园 (cnblogs.com) 字符编码Unicode、UTF-8和ANSI - 简书 (jianshu.com) 字符编码ANSI和ASCII区别、Unicode和UTF-8区别 -CSDN博客","link":"/2022/03/29/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94ANSI/"},{"title":"数字水印","text":"数字水印技术可以给数字载体在空域、频域或时域添加水印，但不影响载体的使用、不易被人的知觉系统察觉。 现实中就我听说过的例子：阿里月饼门（频域），还有最近看到网上在传的豆瓣在白色背景加了两行#fefefe小字（看描述也没啥技术含量，其实我去小组页面那里找了没找到，感觉是假的）。","link":"/2022/02/22/%E9%9A%90%E6%B0%B4%E5%8D%B0/"},{"title":"音乐视频测试","text":"咳，麦克风测试——","link":"/2022/01/29/%E9%9F%B3%E4%B9%90%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95/"},{"title":"镜面屏雾面屏","text":"其实也不挑这个，唯一讨厌的是被戳电脑显示屏，这时候雾面屏不那么显脏。 我电脑和外接显示屏都是雾面的，21年10月挑了显示屏，有好多地方要关注，品牌、品控、分辨率、尺寸、色域、出厂校色、护眼、智能亮度调节、看评论区说坏点多不多，甚至考虑拿旧屏DIY（不瞎折腾了），一挑一晚上谁还管那个。买的24mq，显示屏就是耐操，只要包装盒跟泡沫没人乱扔，邮递也不大担心。谁给扔了我骂他。不过要是它是镜面，不用的时候一个24寸大镜子竖在那，说不定还反光。感觉旁边的人会不爽。另外就是不反光更护眼，尤其黑色主题。 手机平板追求画质不贴磨砂正常，电脑谁把脸贴到上面看去，甚至屏不好雾面还能掩盖一下。 关于上面说的拿笔记本15.6寸自制那种，自己没搞过就只能照着别人给的硬件型号买，然后组装我也没整过，没钱没时间，不敢乱搞。网上买个现成的又水很深，明明那么小一个便携屏，品牌货那个价都够买24寸了，小牌子又不知道搞得什么屏。还是大屏香。","link":"/2022/02/04/%E9%95%9C%E9%9D%A2%E5%B1%8F%E9%9B%BE%E9%9D%A2%E5%B1%8F/"},{"title":"NUDTcourse开发日志","text":"这不是软件计划书or升级日志，是写给自己的报告：记录知识点、相关工具的配置和使用、debug过程。 目的：记录开发收获，便于回顾总结，力求简练。 NUDTcourse是数据库课要求的一个信息管理系统项目，前后端分离，使用react、LNMP。 导出excel后端：POI、easyExcel（都是java） 前端：js实现⬇ js文件操作之——导出Excel (js-xlsx) - youryida - 博客园 (cnblogs.com) 基于前端JS导出Excel文件（减轻服务端压力） - 云+社区 - 腾讯云 (tencent.com) bug: API接口问题描述：当时误认为php未正确接收表单。 详细：萌新不知道怎么做API测试，打开网络能看到预检（这是第一次听说预检是啥）成功了，后面加一个请求到的文件，但是点开啥都没。 当时的写法（是正确的。记得json要转字符串）： 1234567fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(params)}) php接收： 1234567&lt;?php // // 获取请求 $data = file_get_contents(&quot;php://input&quot;); $data = json_decode($data,true); ... echo &quot;$Sno, $Sname, $Sgender, $Sbirth, $Major&quot;;?&gt; 自己写了个测试： 123456789101112131415161718192021222324...&lt;body&gt; &lt;button onclick=&quot;fn()&quot;&gt;.&lt;/button&gt; &lt;div id=&quot;t&quot;&gt;&lt;/div&gt; &lt;script&gt; url = &quot;.../test.php&quot;; fn = function() { fetch(url, { method: 'POST', mode: 'cors', //跨域 headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({...}) }) .then((rp) =&gt; rp.text()) .then((response) =&gt; { console.log(response); document.getElementById('t').innerHTML = response; }); }&lt;/script&gt;&lt;/body&gt;... 测试发现发送其实成功了，如果直接点网络里请求的php文件是什么都看不到的，误判了。 当时的回应用console.log才能看，原来sql语句错了，取到的变量两边加上单引号。。 结论：自己不熟悉的项目or框架变数太多，可以自己做一个小demo重现bug。当时直接在项目里改，不知道bug出在ajax还是react，范围太大无处下手。 bug: php中文乱码 php从数据库取的数据是??： 解决：php里加上mysqli_query($con,&quot;SET NAMES 'utf8mb4'&quot;); php的array转码后变成了unicode码：{&quot;S1&quot;:&quot;\\u59d3\\u540d&quot;:&quot;\\u8d75\\u4ea6&quot;,&quot;\\u6027\\u522b&quot;:&quot;\\u5973&quot;,&quot;\\u5e74\\u9f84&quot;:&quot;17&quot;,&quot;\\u7cfb\\u522b&quot;:&quot;\\u5973&quot;}... 解决：给json_encode加上第二个参数JSON_UNESCAPED_UNICODE。 php json_encode 中文不转码-php教程-PHP中文网 PHP json_encode函数的参数说明 - 范仁义 - 博客园 (cnblogs.com) 前端路由react-routerV6后端配置问题场景：生产环境，切换页面时向后端发送了请求，但因为那个url是做的前端路由，后端找不到页面，返回服务器的404页面。 ——为什么在开发环境没有发生404呢？本地启动react项目也是给配了服务器的（像vue用了express），而项目给你把这个服务器配好了。但是生产环境本来是后端路由的，需要手动来配。 要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。 给个警告：这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件，404的URL规则自然是交给前端路由来决定了。你应该在 Vue （React）应用里面覆盖所有的路由情况，然后再给出一个 404 页面。 tomcat配置：直接修改了conf/web.xml，暴力解决（但是控制台还能看见404报错）。 【我以为只会跳到index.html，结果router开始工作，路由到了正确的页面。助かる。。】 参考： 说一说前端路由与后端路由的区别 - 前端南玖 - 博客园 (cnblogs.com) HTML5 History 模式 | Vue Router (vuejs.org) 解决单页应用 history 模式下部署 tomcat 刷新页面出现 404 - 瞭月 (lervor.com) js主动使用路由一般是在页面Link元素配路由，但有时候需要用js实现跳转（比如提交表单后跳转/刷新页面）。 V6文档提供的方法如下，没玩会，目前用的是原生方法。 组件必须是函数Hook类型，不能是class类型 2这里，useNavigate要在组件里调用，不能套在它的函数里调用 我的遭遇： 使用上面官方的功能，发现没法跳转到当前页面实现刷新。但是为了重新渲染表格，我先跳到首页再跳回来，白白跳转了两次。而且如果使用返回键前进键，会发现网页的乱跳行为，很影响体验orz 不用这个用原生可以吗？试了reload()、location.reload()不行，**window.location.href=&quot;XXX&quot;可以**，那就用这个了。 V5已经不能用this.props.history了的样子。V6更是改，直接搜博客大多过时了 局部结论：中途把凑合能用的东西强制套上去，浪费了时间。没学完没法避免，但是尽量不要到处套自己会的某方法，有时间要先查查官方想让你怎么做。 参考： React Router | API Reference 警告：非法 Hook 调用 – React (reactjs.org) npmnpm常用命令及参数详解 - SegmentFault 思否 使用“npm init”初始化项目 - 你是远方 - 博客园 (cnblogs.com) Art-template一开始使用了art-template，换react后就用jsx处理了，主要就是循环生成列表、表格，其他功能不太用的上。 模板引擎 – art-template 现在还有学习模版引擎的必要吗 前端模版引擎 - artTemplate 【上】 - 简书 (jianshu.com) (有两个详细的demo!!) 前端模版引擎 - art-template 【下】 - 简书 (jianshu.com) template(temid, json)如果接收不到json或者第二个参数其实是空的，返回的不是渲染好的html而是编译了一个渲染函数（看见函数里边有的字符都被转义了还有很多\\n，不懂，懵逼） 如果返回回来的 JSON 数据是类似数组数据的话，是没有办法直接渲染的。需要对数据做如下包装，才能正常渲染： 123456789101112131415template:&lt;tbody&gt; {{each student value}} &lt;tr&gt; &lt;td&gt;{{value.studentNumber}}&lt;/td&gt; &lt;td&gt;{{value.name}}&lt;/td&gt; &lt;td&gt;{{value.gender}}&lt;/td&gt; &lt;td&gt;{{value.age}}&lt;/td&gt; &lt;td&gt;{{value.major}}&lt;/td&gt; &lt;/tr&gt; {{/each}}&lt;/tbody&gt;json格式:{&quot;student&quot;: php返回的json数组，里面每组的参数：studentNumber、name...} js如何将json对象转成数组??? - SegmentFault 思否 js字符串的裁剪 - 狗尾草的博客 - 博客园 (cnblogs.com) JSON使用变量123456// 定义空对象let json = {};// 使用变量作为key，只能这种写法，否则变量名会被当成字符串// 例如json.k，作用和json = { k: &quot;value&quot; }、json.k = &quot;value&quot;一样let k = &quot;。。。&quot;;json[k] = &quot;value&quot;; 异步问题本来写成两个函数load、render结果render接受不到json。 ajax是典型的异步编程，必须学会回调函数、then（关于promise）。等前面语句运行完有了结果，再执行下面的。 Promise.prototype.then() - JavaScript | MDN (mozilla.org) 123456789function render(tempID, url, id) { fetch(url) .then(response =&gt; response.json()) .then(function(data) { let html = template(tempID, { &quot;student&quot;: data }); document.getElementById(id).innerHTML = html; console.log({ &quot;student&quot;: data }); });} phpphp字符串拼接 - museluo - 博客园 (cnblogs.com) 多行字符串 1234567891011&lt;?php$str=&lt;&lt;&lt;STR'ok',&quot;hello&quot;I will{$str1}STR;/****其中三个小于号代表多行字符串的输入，STR是字符串界定符，界定符的名字可以自己定义，两个界定符之间的内容就是多行字符串。其中的单引号双引号可以直接输出而不必转义，当然里面也可以直接插入变量，输出是会自动替换变量值的****/?&gt; 管理技巧MVP产品原则开发一个最小的可行产品，从而快速试错。每次迭代，焦点都在核心流程上 前后端对接RESTful⚠还未良好实践 鉴权⚠还未良好实践 HMAChmac主要应用在身份验证中，如下是它的使用过程： 1. 客户端发出登录请求（假设是浏览器的GET请求） 2. 服务器返回一个随机值，并在会话中记录这个随机值 3. 客户端将该随机值作为密钥，用户密码进行hmac运算，然后提交给服务器 4. 服务器读取用户数据库中的用户密码和步骤2中发送的随机值做与客户端一样的hmac运算，然后与用户发送的结果比较，如果结果一致则验证用户合法。 在这个过程中，可能遭到安全攻击的是服务器发送的随机值和用户发送的hmac结果，而对于截获了这两个值的黑客而言这两个值是没有意义的，绝无获取用户密码的可能性，随机值的引入使hmac只在当前会话中有效，大大增强了安全性和实用性。 安全https分离方式 半分离式，前端负责开发页面，通过接口（AJAX）获取数据跟页面进行数据绑定（类似原来的JSP标签方式），最终是由前端把页面渲染出来，后端只提供数据接口，前端的页面仍需要跟后端服务部署到同一个web容器中，如果web容器挂掉，那么会直接导致页面访问不了 全分离式， 前端负责的内容同上，只是前端页面单独部属在一个web容器，前端和后端相互不影响，如果是后端容器挂了，前端可以访问，只是请求不到数据 还有一种就是 在前端和后端之间加入node作为服务，node提供一些接口服务，又或者部分页面需要服务端渲染，又或者需要处理一些大并发的问题，如果是需要涉及到一些大数据的查询或者运算，再由node层去跟后端服务（java服务等）进行数据交互，再由node 接口供给前端 用了react后可以全分离也可以都放在nginx下（前端使用的接口是绝对地址，跨域也解决了） 后端是通过nginx挂载php的fastcgi，接收前端发来的请求，对数据库进行相关操作。 前端和后端数据交互的基本知识和常见方式 用 form 可以发请求，但是会刷新页面或新开页面； 用 a 可以发 get 请求，但是也会刷新页面或新开页面； 用 img 可以发 get 请求，但是只能以图片的形式展示； 用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示； 用 script 可以发 get 请求，但是只能以脚本的形式运行。 用 jsonp 实现请求，支持跨域请求。 用 ajax 实现页面无刷新的请求。 ajax技术XMLHttpRequest，结构比较混乱（但出现很久了，使用规模巨大）；fetch，新兴的ajax技术（他俩是平起平坐的关系）。axios库是对XHR的封装，而上面两个是原生api。 综合考虑开发难度和兼容性问题，决定选用axios进行前后端的信息交互。 用了fetch原生。 双向通信WebSocket与消息推送 - 张果 - 博客园 (cnblogs.com) 如何在大型 Web 应用中保持数据的同步更新？ - 知乎 (zhihu.com) 轮询：客户端定时向服务器发送Ajax请求，服务器接到请求后马上返回响应信息并关闭连接。 优点：后端程序编写比较容易。 缺点：请求中有大半是无用，浪费带宽和服务器资源。 实例：适于小型应用【针对管理员开启轮询怎么样orz】。 长轮询：客户端向服务器发送Ajax请求，服务器接到请求后hold住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。 优点：在无消息的情况下不会频繁的请求，耗费资小。 缺点：服务器hold连接会消耗资源，返回数据顺序无保证，难于管理维护。 Comet异步的ashx， 实例：WebQQ、Hi网页版、Facebook IM。 长连接：在页面里嵌入一个隐蔵iframe，将这个隐蔵iframe的src属性设为对一个长连接的请求或是采用xhr请求，服务器端就能源源不断地往客户端输入数据。 优点：消息即时到达，不发无用请求；管理起来也相对方便。 缺点：服务器维护一个长连接会增加开销。 实例：Gmail聊天 Websocket: WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。依靠这种技术可以实现客户端和服务器端的长连接，双向实时通信。 特点：事件驱动、异步、使用ws或者wss协议的客户端socket，能够实现真正意义上的推送功能 缺点：少部分浏览器不支持，浏览器支持的程度与方式有区别。 跨域问题cors跨域之简单请求与预检请求（发送请求头带令牌token） - SegmentFault 思否 使用 Fetch - Web API 接口参考 | MDN (mozilla.org) 允许跨域配置nginx： 12Access-Control-Allow-Origin: *Access-Control-Allow-Origin: &lt;origin&gt; Cookie最早被提出来的本地存储方式，在每一次 http 请求携带 Cookie，可以判断多个请求是不是同一个用户发起的，特点是： 有安全问题，如果被拦截，就可以获得 Session 所有信息，然后将 Cookie 转发就能达到目的。(关于攻击和防范本可以看另一篇文章 吃透浏览器安全（同源限制/XSS/CSRF/中间人攻击）) 每个域名下的Cookie不能超过20个，大小不能超过4kb Cookie在请求新页面的时候都会被发送过去 Cookie创建成功名称就不能修改 跨域名不能共享Cookie 如果要跨域名共享Cookie有两个方法 用 Nginx 反向代理 在一个站点登录之后，往其他网站写 Cookie。服务端的 Session 存储到一个节点，Cookie 存储 SessionId Cookie的使用场景 最常见的就是 Cookie 和 Session 结合使用，将 SessionId 存储到 Cookie 中，每次请求都会带上这个 SessionId 这样服务端就知道是谁发起的请求 可以用来统计页面的点击次数 Cookie都有哪些字段 Name、Size 顾名思义 Value：保存用户登录状态，应该将该值加密，不能使用明文 Path：可以访问此 Cookie 的路径。比如 juejin.cn/editor ，path是/editor，只有/editor这个路径下的才可以读取 Cookie httpOnly：表示禁止通过 JS 访问 Cookie，减少 XSS 攻击。 Secure：只能在 https 请求中携带 SameSite：规定浏览器不能在跨域请求中携带 Cookie 减少 CSRF 攻击，详细说明看这里 Domain：域名，跨域或者 Cookie 的白名单，允许一个子域获取或操作父域的 Cookie，实现单点登录的话会非常有用 Expires/Max-size：指定时间或秒数的过期时间，没设置的话就和 Session 一样关闭浏览器就失效 LNMP配置原理太长不看：Nginx工作原理和优化总结 💥配置文件详解：Nginx和PHP的配置 php环境搭建（正确配置nginx和php） Nginx 是非阻塞IO &amp; IO复用模型，通过操作系统提供的类似 epoll 的功能，可以在一个线程里处理多个客户端的请求。Nginx 的进程就是线程，即每个进程里只有一个线程，但这一个线程可以服务多个客户端。 fastCGI ：为了解决不同的语言解释器(如php、python解释器)与webserver的通信，于是出现了cgi协议。只要你按照cgi协议去编写程序，就能实现语言解释器与webserver的通信。如php-cgi程序。但是webserver每收到一个请求，都会去fork一个cgi进程，请求结束再kill掉这个进程。这样有10000个请求，就需要fork、kill php-cgi进程10000次。 fastcgi是cgi的改良版本。fast-cgi每次处理完请求后，不会kill掉这个进程，而是保留这个进程，使这个进程可以一次处理多个请求。 什么是正向代理与反向代理 正向代理是从客户端的角度出发，服务于特定用户（比如说一个局域网内的客户）以访问非特定的服务；反向代理正好与此相反，从服务端的角度出发，服务于非特定用户（通常是所有用户），已访问特定的服务。 URI规范url 设计规范管理员可以重新组织服务器上的文件系统结构，而无需改动URI，这就需要URI和真实的服务器文件系统结构之间有一个映射机制，而不是生硬的对应。 隐藏文件后缀名带后缀名不够美观：nginx一招配置，帮你快速隐藏php后缀名 零散的日记12.15封装了fetch，ajax简洁多了。想要使用RESTful 风格，用四种请求方法分别对应了增删改查。但没有用http状态码，url布置、JWT鉴权都还不会做，实在称不上RESTful。 11.25React 踩坑–input中的value与defaultValue - 墨西哥郊外的晚上* - 博客园 (cnblogs.com) 关于http请求规范： Using Fetch - Web APIs | MDN (mozilla.org) reactjs - Javascript: Fetch DELETE and PUT requests - Stack Overflow 关于在GET请求中使用body_HermitSun的博客 大概只有get不该带body，其他带了都有情可原（它们改服务器数据了） 11.23头次验收。老师建议：用java。php是做小网站的。 我的理解：php太好学了，功能上、性能上不够强。（直接用php是很简洁，所以很多功能不能实现。要想php实现和java一样的功能，也是要学很复杂的框架的） 前端打算换react了，脚手架走起。 ——1.27：这时候才换的？ 11.6上完周五的数据库，重看了聂总的视频，结果从周五下午吸收到周六中午🤣 把看的网页堆这里（也有很多放到前端工具 &amp; 概念 (wolai.com)了，要及时回顾） 10.29师曰：直接显示个php页面上去还不行，要加Model层。我：Model是啥？ 查了巨多MVC、前后端分离、前端工程化（没写过后端，所以什么都拿到前端来搞）。又担心php是不是没有java先进，看了很多知乎上的【xxx是不是过时了】。光是看这些网页花了两三个晚上。确实学到不少，但凭现在的技术落不到实处，决定后端就用php。 收获：及时了解新技术。下面这些就算真过时了，学了对渐进入门有好处，可以帮助理解原理、学习设计方法。（拔草总是比种草有B格hh。但不同于劝退炒股，这是技术文章，看别人的批判是为了更好的了解，注意理性判断） Spring MVC 过时了吗？ - 知乎 (zhihu.com)为什么我劝你放弃mybatis - 知乎 (zhihu.com) 10.20开始系统写日志，顺路看到：谈谈开发日志 - 飞鸟_Asuka 。 刚起步时获取的信息比较杂乱，需要整理总结吸收。 10.15BS5最佳学习网站：Bootstrap5 中文手册-俺老刘 注意时效性，网上很多v3v4的，也不声明自己什么版本。官方文档最靠谱。","link":"/2022/01/05/NUDTcourse%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"},{"title":"华为集团IT面经","text":"记录秋招在华为的面试经历 流程：投简历+笔试+综测+三场面试（技术两面，主管一面） 9月中旬加了hr，约笔试的时候不巧约的国庆，他们放假了😂。顺延到了10.13的晚上，600分的题做了不到200，题挺难做，T1是字符串处理但是很复杂；T2是图的题可能还要做dp，菜鸡直接跳过（其实写的代码最多，但辛苦分是不存在的）；T3是模拟计算器，改用python拿了一部分分。当晚就通知进入下一流程了。综测的话正常选就行了，不要出现前后矛盾的地方。 10.17-10.18是远程面试，难度：二面&gt;一面&gt;三面，整体表现一般。学校课程就浅浅看了遍，项目也是好几个月没动了，答个前端三件套都不熟。尤其二面的时候问了很多业务，回答得很烂！没想到还是面完了，等结果中。。 1.13OC啦！华子收留秋招心碎大学生了！中间等这么久以为凉了，人都等麻了，已经想准备春招了🤣真是让人好等啊。（图床bug了先不传图了，好久没写博客了哈哈） 一面时间16:00 - 17:00，中午吃完饭就跑到图书馆的面试空间去了（其实图书馆中午会下班，两点半回来，要是再晚点中午就进不去了）。 手撕开始先问了熟悉什么语言，回答学校教了C和Python，自己写项目学了JS，刷题常用C++的STL。面试官想再问清楚点，让选一个最熟练的，我就说做题用C++吧。口头出了道优先级排序，根据成绩和学生姓名来排。开头纠结自己不会把俩元素存到一起（pair用的少），就分了两个vector存的，插入排序很快写完了。 学校课程然后问了专业课，主要是数据结构的一些简单问题，排序算法的复杂度（就想起来4种）、根据二叉树的前&amp;中序还原、怎么求图中两点的最短距离（我说的dfs bfs，把Dijstra跟Floyd给忘了。。平时刷题确实也不爱做图，这俩算法也就当时上课写过orz），KMP我没复习。。只说了知道C++的API用的BM而不是KMP，因为KMP的平均时间复杂度不如BM。 项目后面浅问了下项目，自己介绍了下也没深挖，看到我自己搭了LNMP，面试官问了个Linux命令，新建文件夹。我几乎没用过mkdir，就坦白说涉及到文件操作是xftp上做的（有图形界面能看到目录结构，更好操作嘛），想不起来了。 然后又问了服务器不需要重启吗，关机什么命令？我说这个云主机的控制台有重启的UI，我也没输命令关过机，想展示下控制台，就随手点开了新买的腾讯云😂，面试官好奇：为啥买的是腾讯云呢？我忙着解释，话题就转到聊天了。。聊了些轻松的内容，还有之前做的数学建模竞赛。 反问反问环节问了一个，部门主要做什么业务。面试官回答之前先问了下你之前有做什么了解吗？我说看到职业描述提到Devops之类一些技术，没说具体业务。他就谈了十几分钟公共服务主要做的啥，我听到公共服务就问了嘴是SaaS？他说也不是，确实也有SaaS的项目，说了俩（名字记不清了，好像是做审批和会议的）。主要是各类项目都需要的流程，单点登陆之类的，我问像中台那样？回答说比较像，我们部门体量很庞大。大概到这里结束了。 二面时间11:10 - 12:40，因为是饭点就在宿舍楼找的房间。（这面给我问蔫了！之后感觉凉了，状态一直没变。三点多问了hr，她催完变绿了😂） 项目因为项目是前后端分离，问了跨域问题怎么解决。我说在Nginx配置项，要我说一下都改了哪几项，key-value各是什么。纯知识性问题，要是刚做过肯定有印象（记性不好，好久没看那个项目），解决这种问题都是查一下文档然后改了完事嘛。说不上全名。。再就是前端发送的请求需要配置哪项？key-value叫什么，这个甚至不记得我配过没，感觉前端没配，但最后项目也是解决跨域了，可能nginx那配得太松了？ 业务怎么解决就不展开了吧，要不这篇要写不完了orz 一个页面满是图片，怎么异步加载实现图片的异步加载（转载） - RexFang - 博客园 (cnblogs.com) 纯html进度条怎么写，你会用几个div；如果要和后端获取进度信息再真实显示怎么写；如果根据另一个组件的变量变化而变化怎么写N 种仅仅使用 HTML/CSS 实现各类进度条的方式 - ChokCoco - 博客园 (cnblogs.com) 如果写个js脚本把服务器发来的页面里的a链接都改掉，要怎么改？如果不该链接内容，只是统计链接点击次数，怎么写才能统计？ 数据库学过吗，问了数据库三大范式，还有怎么加快查询速度。 语言基础js的事件、冒泡怎么处理、正则页面布局、flex、怎么让元素在页面居中 手撕做题之前面试官问了句做过多少题？我说三百多道。他说，那背包、动规都是学过的吧，吓我一跳我写不好的😂就支支吾吾说，背包没写过。。 以为他要出难题了，结果从word文档里挑了一个坐标转换的题目，每隔几个数把大矩阵划分开，求一个坐标在第几块，类似矩阵重塑啥的简单题。面试官先说自己要离开一会，我就“秒掉“发到会议聊天里了。马上发现有个地方取余和除法搞错了。。囧。后面又默默改了会，重新发了，等他回来讲了一下（他解释是电脑没电了去充电） 反问撕完题已经十二点半了，面试官问我有啥问题想问吗？其实我有想问的，因为他介绍过自己写了二十年代码，前端也做过五年。。但是前面问的好多不会感觉要凉了，加上是饭点，担心他不想理我就没问😭 主管面时间还蛮紧的，因为二面之后十二点半，等了很久消息，四点得知过了，但原本约的时间不会改，下午六点半开面。这面类似聊天，面了四十分钟左右。之前担心是压力面，结果面试官人很好，也不手撕代码。没聊家里情况也没问想去哪，问了些网上就能查到的泛用问题。反问环节我问了下需要的能力、新人培训制度。 1.16面经写完啦（干货被你忽略，变成日记）！现在签了两方还没签三方但已经稳了，等着签完领礼包咯。","link":"/2023/01/16/%E5%8D%8E%E4%B8%BA%E9%9B%86%E5%9B%A2IT%E9%9D%A2%E7%BB%8F/"},{"title":"简约至上：交互式设计四策略","text":"一本讲交互设计的小书，提出了删除、组织、隐藏、转移四个策略。这学期初就打算读，直到毕设答辩完才抽出来空。书本身就很简洁，这里只是做了一些摘抄。 话说简单我在工作中一直在想方设法把技术变得简单。问题在于一谈到简单，人们只会想到诸如“少即是多”这样含糊其辞的话。为此，我已经摸索出一些切实可行的策略，也收集到不少相关的实例和故事，准备在本书中与大家分享。 “夸耀效用原理”：人们喜欢自己被包围在不必要的功能中。 不断向软件中增加功能，是不可持续的。客户希望增加功能，投资人也希望通过新功能提振产品。有时候他们是对的。然而功能越多，就越难发现真正对用户有价值的东西。新功能总有一天会归于平淡。增加复杂性意味着遗留代码越来越沉重，导致产品维护成本越来越高，而且也越来越难以灵活应对市场变化。与此同时，用户也会渐渐地对你的产品越来越不满意，因为增加的复杂性导致他们很难找到自己真正需要的功能。况且，想到为那么多没用的功能买了单，他们会不高兴。无法理解的功能也让他们感到害怕。 冒充简单的做法已经被大众普遍接受。这些做法的特点是能解决眼下的问题，相对便宜，而且不会引起什么争议。 正因为如此，一遇到设计难题，冒充简单的点子就会层出不穷。而且由于所有人都“知道”这些东西可以用，因此即使失败也不会有人被追究责任。 使用冒充简单的解决方案的人反而会说：“我一直在努力啊。”可实际上他们并没有非常努力，也没有做得很好。 借助这种额外的东西不可能营造出简单的用户体验来。用户只会觉得又多了一件事要做。 复杂的代价不仅是学习，还包括知道在压力下放松自己。要做到这些需要经验，还需要更多的训练——因为这不是每天都要做的。用户不可避免地会赶时间，会分心，会忘记自己学过的东西。在最大的压力下，用户需要最简单的方案。 “我不认为贴近复杂的简单毫无价值，但我更喜欢远离复杂的简单。”换句话说，有两种简单。 第一种发生于我们探索问题之初。此时，我们的知识不完整，我们的想法简单化，并因为过于简化而抓不着重点。 但随着对问题理解得越来越深入，我们了解到它有多复杂。各种问题、微妙之处，还有相互关联的地方，都是我们始料不及的。此时，我们的解决方案也是复杂的，没有说明书就很难理解。 某一天，我们开始意识到更底层的模式，并发现一种不同的简单方案。这个方案试图把整个宇宙的复杂性都打包到几个问题里。复杂性还在，只是 、随时准备被拆开，但我们现在可以通过包装来实现真正的简单。 【简单-&gt;复杂-&gt;简单，真正的简单来之不易】 在做技术产品的设计时，至少有三个角度：管理人员、工程师和用户。 本书是从用户角度来看问题的，换句话说，我们要讨论的是怎么让用户感觉用起来简单。 简单并不意味着欠缺或低劣，也不意味着不注重装饰或者完全赤裸裸，而是说装饰应该紧密贴近设计本身，任何无关的要素都应该予以剔除。——Paul Jacques Grillo（Form, Function &amp; Design） 抛开极简主义，也能够成就简单。简单的特征和个性应该源自你使用的方法、所要表现的产品，以及用户执行的任务。 【简单不是极简，要贴近设计、产品功能、用户要完成的任务，剔除多余的无关的】 愿景：一张蓝图绘到底不管问题大小，愿景应该聚焦于用户。 “我在这里打算干什么“、“我正在设计什么” “用户在这里要干什么” “用户在这里真正要干的是什么？” 用户注册是因为他们想要保护重要的东西（比如他们的银行账户信息）？想得到你的奖励（这个理由比较弱）？还是因为我们让他们那么做的其实是我们设置了障碍？ 三种用户 提到简单，可以把用户分为三种类型。 专家型用户愿意探索你的产品或服务，并且会给你提出各种改进建议。他们希望看到为他们量身定做的前所未有的技术。 第二类可以叫作随意型用户。他们可能使用过类似的产品或服务。他们有兴趣使用更高级、更复杂的产品，却不愿意接触全新的东西——要想让他们认可新功能，那么新功能必须足够简单。 最大的一个用户群体是主流用户。他们自己不会因为你的技术而使用你的产品，使用你产品的目的是完成某项任务。他们会掌握一些重要功能的使用方法，但永远不会产生学会所有功能的想法。这些人的口头禅就是：“我的手机只要能打电话、能发短信就行了。”大多数人属于这一类。 你可能会天真地认为，一段时间以后，其中一类人就会升级为另一类人。 但这几乎是不可能发生的。如果你也想设计简单的产品，记住要为主流用户而设计。 主流用户想要什么 主流用户最感兴趣的是立即把工作做完，专家则喜欢首先设定自己的偏好。 主流用户认为容易操控最有价值，专家则在乎操控得是不是很精确。 主流用户想得到靠谱的结果，专家则希望看到完美的结果。 主流用户害怕弄坏什么，专家则有拆解一切刨根问底的冲动。 主流用户觉得只要合适就行了，专家则想着必须精确匹配。 主流用户想看到示例和故事，专家想看的则是原理。 简单的用户体验是初学者、新手的体验，或者是压力之下的主流用户的体验。 体现品牌特征 如果你在为一家组织设计，那么你的产品必须符合它们的品牌定位。如果组织本身以“充满活力”为傲，那你的设计就必须有动感。如果组织的定位是“可靠”，那你的设计就要让人有安全感。符合这种期望的设计，就会让人觉得简单。 极端的可用性 要想简单，就务必把目标定得高些再高些，不要使用常规的可用性目标。目标中“瞬间”和“毫不费力”听起来有点夸张，因为事实上这是做不到的。然而，争取你不可能达成的目标有一个重要的好处：保持正确的方向。 愿景 与别人分享你的愿景，即使你不在场也能保证做出正确的决定。而且，你的所有利益相关方都能说出什么是好的决定，什么是坏的决定。 让最核心的理念随处可见，提醒人们时刻谨记。随时随地使用，让它成为人们时刻不忘的追求。把它公之于众，意味着团队所有成员都知道自己应该交付什么样的功能。 简约四策略战略是对当前状况的一种诊断，基于它可以制订优秀的方案和长期规划，以便在竞争中立于不败之地。不管什么战略，目标都是建立稳固的用户群以保证生存（通过获得收入或保持黏性） 根据竞争战略之父迈克尔 • 波特的理论，一家公司为寻求竞争优势，有三种战略可以选择：差异化（通过树立壁垒来维持较高价格）、低成本（通过控制成本费用实现利润最大化）或专一化（专注于某个细分人群或细分市场）。越来越多的公司倾向于混合战略，但总有一种主战略，做设计决策时总有一个优先级。 对比每项改变的重要性与可行性。如果你问别人，别人会告诉你它们都重要，都可行。因此要对重要性和可行性加以量化，用固定的分数（或虚拟的钱）来表示。 只考虑成本（或可行性）来排列改变的优化级会导致一个问题：预期的改变列表中充斥着“速效方案”。摒弃速效方案意味着要做两件事： 首先（正如前面所见），既要看到“影响”，也要看到“可行性”（或成本）。 其次，应该把改变分成三类：速效方案（快速生效）、基础方案（会产生巨大影响或让其他改变更容易）和战略方案（让产品与公司战略及愿景统一起来） 几年来，我见过很多为简化电视遥控器而设计的方案，我把这些方案分成四大类： 删除——去掉所有不必要的按钮，直至减到不能再减。 组织——按照有意义的标准将按钮划分成组。 隐藏——把那些不是最重要的按钮安排在活动仓盖之下，避免分散用户注意力。 转移——只在遥控器上保留具备最基本功能的按钮，其他控制通过电视屏幕上的菜单、语音或手势来实现，从而将复杂性从遥控器转移到电视。 多数人的设计与这几个类别都沾边，但通常会倾向于其中一种策略。有些人会想到加入新的技术，例如在遥控器上设计一块触摸屏，或者为电视加装手势识别模块。不管怎样，只是形式不同而已，本质上仍然是删除、组织、隐藏和转移 删除简化设计最明显的方式就是删除不必要的功能。 简单的产品更容易制造（成本也更低），也更容易使用（市场也更广）。删除杂乱的特性可以让设计师专注于把有限的重要问题解决好，而且也有助于用户心无旁骛地完成自己的目标。 什么不能删 截止日期当前，首先被砍掉的往往是实现难度大的功能。理由是这样能保证先发布一个 MVP，其他功能以后可以再加。但MVP应该符合愿景并提供某种价值。而以后再加功能必须是你有时间， 而且有钱去做才行。这种做法会导致项目发散、没有灵魂。 不要等着别人不分青红皂白地、无情地删除最有意思的功能。要总揽全局，保证只交付那些对用户体验而言真正有价值的功能和内容。 找到核心所在 体验的核心是最能打动用户的东西。找到它，删什么留什么就一目了然。 在按照优先级对功能排序时，要记住关系到用户日常使用体验的功能很有价值，但不一定是最常用的功能。另外，能够消除用户挫折感的功能同样也会受到欢迎。 砍掉残缺的功能 删掉实现得不够理想的功能也是很重要的。有人可能会说，删除不完整的功能或内容会导致已经付出的时间和努力白白浪费掉，即“沉没成本误区” 。事实上，用于创建这部分功能的成本是不可能收回来的，因此判定的唯一方式就是看它能够发挥几分作用，看保留它会额外导致多少成本。 功能和内容会给用户造成精神上的负担（“这个需要看吗”），会导致一定的维护开支（总要有人保证内容与时俱进，功能持续有效）。换句话说，任何功能都需要你和用户付出代价，因此功能必须有价值。某个功能残缺了，话只说一半，另一个地方还有个类似的功能，都会导致价值打折扣。问题绝非“为什么应该去掉它”，而是“为什么要留着它”。 导致出错的功能如果一个小变化导致了复杂的流程，就应该退一步去寻找更好的解决方案。把注意力集中到客户的目的上，问自己：“还有其他的解决方式吗？” 错误如果你选择了将来的日期，就会有一条错误消息提示你，意思说白了就是你很笨。用户在纠正错误的时候，总会分散一部分注意力，而且感觉遇到了麻烦。 为了避免发生错误，设计人员经常会打断用户：“你确定要这样做吗？”但从某种角度来说，这种方式是很差劲的，因为这样会干扰所有人，即使人家的选择没错也不能幸免。【消除错误的来源，减少报错消息】 功能多对于没有机会试用的消费者有吸引力。但是消费者使用了产品之后，他们的偏好就会改变，一下子从重视功能变成了更重视可用性。 要知道人们真正关心什么，探知他们对删掉某个功能后的产品有什么意见，最好的方法就是先做个原型让他们试用。想在任何时候取悦所有用户是不可能的。因此，我们只能退而求其次，专注于目标客户的核心任务。 去掉那些可有可无的选项、内容和分散人们注意力的玩意儿，可以减轻用户的负担，让用户专心去做自己想做的事。去掉分散注意力的视觉元素， 可以让用户感觉速度更快、更可靠。 给用户提供选择会让人感觉自己在把控着局面，而在某些情况下人们更愿意少一些选择。如果选择超过了一定的界限，特别是在很多选择都相似的情况下，选择反而变成了负担。 分心 如果我想告诉你一件事，那我得先看你现在忙不忙。我会等你有空的时候再跟你说。人类在打断别人时会选择时机，因为知道什么事更有价值。 如今，我使用的社交应用默认不会区分重要更新和不重要的更新，一律会给我发通知。其实我们都很清楚这两种情况是应该区分的。至于原因，当然是应用开发者故意要打断我们，想不失时机地搏得我们的眼球。 减少视觉混乱： 使用空白或浅背景色来划分页面，不要使用线条。为什么？因为线条在前景中，而空白和颜色在背景上，前景会更多地吸引人的注意力。【但是线条比空行更清楚呀？我现在就在纠结这篇摘抄的章节划分不清楚，不如用列表或者分割线（纯文字和web页面比是吧）】 尽可能少使用强调。如果仅加粗就行了，就不必又加粗、又放大、又变成红色。 别使用粗黑线，匀称、浅色的线更好。 控制信息的层次。如果页面中信息的层次超过了 2 或 3 个层次，就会导致用户迷惑。比如说，要少用数字、大字体或粗字体，最好总共不超过 3 个层次：标题、子标题和正文。 减少元素大小的变化。例如，如果你在设计某个报纸的电子版，可能会有一大块放置头条新闻，另有 5 小块放置次要一些的新闻，千万不要让版面上出现大小都不同的 6 个区块。 减少元素形状的变化。整个界面中最好只使用一种按钮样式，使用 3 或 4 种按钮样式就太花哨了。 删减文字： 删除引见性文字，开门见山，减少废话。 删除不必要的说明。删掉“填写完这些字段后，请您按提交按钮把申请提交给我们”。页面的标题（“申请表”）和内容（表单）足以让用户明白自己该怎么做了。 删除烦琐的解释。 使用描述性链接。【附：如何定义好一个符合规范的url】 精简句子，不使用介词（“对于 / 根据 / 为了 / 基于 / 通过 / 关于”）。这些词会弱化句子的谓语，因此要尽量省略。 “把每一页中的文字删掉一半，然后把剩下的再删掉一半。”——史蒂夫 • 克鲁格《点石成金》中第三条可用性法则 一次交互就是用户与设备之间的一次对话。听一听两个人之间的对话，会发现一些有意思的规则，可以应用到人机对话中：人会随机应变。时间压力，错误的风险和后果，以及共享的知识——这三个因素是人类用于简化对话的核心因素。 在没有按钮的电梯里，人们会感觉是在浪费时间，心烦意乱。没有了控制感，也没有了电梯工作正常的反馈，就相当于把自己完全交给了这部机器去碰运气。 组织如果想通过组织的方式来简化设计，要点在于只强调一两个最重要的主题。 有关分块的经典建议是把项组织到7±2个块中。理论上讲，这个数字是人的大脑瞬间能够记住的最大数目。如果眼前有一个包含 10 项的列表，那么你很可能会像“狗熊掰棒子”一样，前脚看完后脚就忘了。不少心理学家认为人类的瞬间记忆存储空间其实更小，大约只有 4 项。 确定清晰的分类标准。简单的组织模式具有清晰的界限，是非分明。 虽然按字母排序看起来简单，但其结果通常很难用。 按热门程度排序也有问题，因为不可能知道其他人喜欢什么。把那些“隐藏的”重要元类别揭示出来，是创建简单体验的关键。 按照格式（文本、图片和视频）来组织内容，也是一种看似简单其实没用的分类方式。如果你在看夏威夷的信息，你也希望看到那里的图片和视频。再返回开头，重新寻找夏威夷相关的视频会很麻烦。 选择与任务相关的索引。 按照人们都熟悉的模式来组织信息，用户识别和处理起来会非常快。即便没有模式，用户也倾向于看到模式。可以通过“锚定”用户来引导他们找到正确答案，只要用户知道你说的是 “神秘博士”（Doctor Who），那么看似毫无关联的“螺丝刀、电话、围巾、主人”就是有意义的。 没有一个人始终会把搜索作为第一选择。只有在网站没有提供有效导航的情况下，用户才会使用搜索。 只要想一想，为了找到一个恰如其分的搜索关键词，要先输入这个关键词，然后再挑选出有用的搜索结果，这个过程有多么麻烦。 无论是设计还是使用，搜索都比浏览困难得多。先对内容有效地组织，然后再考虑如何设计搜索。 隐藏隐藏比组织具有一个明显的优势：用户不会因不常用的功能分散注意力。对某些人来说，隐藏可能还是删除不必要功能的开始，但欲删从速是更好的思路。 不常用但不能少：我们通常会发现“设置”功能在用户界面中会偏居一隅。最好把它们放在一个开放的页面，或者放在所有页面中（不可能知道用户什么时候想要修改设置，因此最好把它们隐藏在网站的开始位置，或者应用程序的边缘）。 在寻找要隐藏的功能时，设置通常都是首选。设置与不常用的任务有很大的区别，因为后者一般会涉及外部目标（如给朋友发短信），而设置的目的则是让用户更好地使用软件（如自动为列表添加项目符号）。 自定义可能是一件非常耗费时间，也非常令人讨厌的事。如果有时间的话，你可以自定义 Microsoft Word 中名目繁多的浮动面板和工具栏。那可是一项艰苦的工作，因为你必须知道怎样才能构建一个好的用户界面。更具有讽刺意味的是，在简化用户界面之前，你必须对这个软件中各种各样的功能了如指掌。 自适应菜单：程序会记住你经常使用的命令，并对菜单自动调整，最终只显示你最常用的命令，隐藏其他命令。自动定制不会让界面变得更简单，反而会把界面搞得很复杂，给用户带来极大不便。主要原因有三点： 不同用户的常用功能差别非常之大 用户需要更长的时间确认菜单中的功能 用户最终不知道去哪里找自己想用的命令，因为这些命令的位置有可能会变。 渐进展示：隐藏为专家级用户准备的扩展性的精确控制部件。保存对话框刚一打开，应该只显示主流用户关注的核心选项。对于专家用户，可以单击扩展图标，然后在展开的区域内寻找自己想要的功能。这个对话框可以记住你想使用哪个版本，而且将来会以该版本的面目出来。 这样做好过自动定制，因为用户只是选择了界面如何显示。这样做也比通常的自定义效果更好，因为用户在操作的同时就已经做出了选择，他们不必为创建某个菜单而单独执行一番操作。而且，主流用户也不会因此而被迫去自定义。 阶段展示：随着用户逐步深入界面而展示相应的功能。 讲故事，让用户理解这个环节在做什么。一个在线下单的网页，该页面上来就要求用户输入他们的名字和地址。管理人员解释说，这是为了即使后面出了问题，我们也能够联系到客户。但是客户不认同这一点。当所有环节都如讲故事一般依次展开时（“你想干什么？好，接下来我们要到下一个页面去了。”），这个网站的转换率开始有了明显增长 说用户的语言，专业名词、行业术语不该给外行看，一个专业词汇不如换成一段好理解的话。 信息合理分块 在流程中的每一步都符合用户心理预期的情况下，阶段展示的效果最好。 适时出现：《纽约时报》的词典功能，在你需要时（合适的时机）出现在合适的位置上。隐藏得如此之深需要极大的勇气。设计团队一定会担心有用户永远不会知道他们还提供了这么一项功能，因此有必要向用户展示这项功能。 Google“高级”搜索：隐藏复杂性的一个原因，就是不想让用户产生自己什么都不懂的感觉。而为按钮打上“高级”的标签，显然就是在讥讽用户不配使用这项功能。这种感觉可不好。 单击并按住不放的小三角形：应邀探索设计模式，而非一个试图介绍更多功能的标签。这种方法的针对性特别好：调出高级工具的上下文， 能够让用户清楚地知道高级工具与基本工具能够完成类似的任务。隐藏处理得好的界面会给人一种优雅的感觉：界面中包含的线索尽管细微，却能恰到好处地提示出隐藏功能的位置和功用 就算标签再大，如果把它放到了用户关注点之外，用户也看不到。 转移把合适的功能转移到合适的设备上去。 在“错误的”设备上执行某些操作只会让人觉得“别扭”。但最合适的设备始终都是离你最近的那个。为了省事（比如不用再寻找或打开其他设备），人们还是会愿意忍受某种程度的“别扭”。 设计要坚持移动优先。移动设备更常用，比电脑更方便。 向用户转移：让用户和计算机各自做最擅长的事。计算机擅长保存、计算。人喜欢指挥、控制结果。有些对计算机来说复杂的任务，对于人而言却是轻而易举的。 适时提醒：监控是计算机所擅长的，知道什么时候可以打断别人则是人所擅长的。如果要在这两者间架起桥梁，要么多借助人工，要么多教会计算机了解人类的社交场景。 让一个组件/功能具有多种用途：找一个功能总比在几个类似功能中选择容易，学习一个功能也比学习多个功能容易，且一个功能更容易维护。 死板的表单：公司强迫客户不折不扣地遵守他们的数据格式规则，是懒惰和无礼的表现。计算机有能力识别并将用户提供的数据结构化，让用户使用任意格式和人类语言来写邮件。 在难以分清设备之间如何协同工作时，要实现功能的转移是比较困难的。有些人可能没有手机，只想使用网站。有些人可能死心眼，只愿意使用手机。还有一些人可能这两种偏好兼而有之。当面对这种不确定性的时候，你就会在两个平台上重复相同的功能。 如果想把任务转移到用户一方，你必须相信用户有能力完成该任务。 相信用户是非常困难的。构筑信任关系的唯一方式，就是让用户参与测试原型或实物模型。在能够正确地把握如何分配任务之后，让用户专注于选择和指挥，让计算机专注于存储和计算。 最后的话任何应用程序都会有一些无法消除的复杂性，关键的问题在于：谁会面对这些复杂性？ 你越是努力试图“说服”别人，他们给你设置的障碍就会越多，即使看起来跟你是一个战线，他们也会在第一次麻烦出现时改变主意。不要尝试说服别人，听他们说，让他们自己判断，让他们自己承认问题。 如果你把简单作为策略，那就要推销体验，而不是产品了。同样，这也意味着体验的其他方面，比如客户服务、退货、维修和更换，也都必须容易。过不了多久，你会发现自己在重塑整个组织。如果没有，那你会发现组织在慢慢地腐化你的产品，让它变得不再简单，而你也没有选择。 这也就意味着你需要创造一种寻求简单的文化。决定寻求简单是一段长途旅行的开始。能够做到什么程度，取决于有多少人受你影响，成为你的追随者。","link":"/2023/06/15/%E7%AE%80%E7%BA%A6%E8%87%B3%E4%B8%8A%EF%BC%9A%E4%BA%A4%E4%BA%92%E5%BC%8F%E8%AE%BE%E8%AE%A1%E5%9B%9B%E7%AD%96%E7%95%A5/"}],"tags":[{"name":"js","slug":"js","link":"/tags/js/"},{"name":"MVC","slug":"MVC","link":"/tags/MVC/"},{"name":"设计","slug":"设计","link":"/tags/%E8%AE%BE%E8%AE%A1/"},{"name":"json","slug":"json","link":"/tags/json/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"云主机","slug":"云主机","link":"/tags/%E4%BA%91%E4%B8%BB%E6%9C%BA/"},{"name":"ssh","slug":"ssh","link":"/tags/ssh/"},{"name":"ssl","slug":"ssl","link":"/tags/ssl/"},{"name":"通信协议","slug":"通信协议","link":"/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"},{"name":"产品","slug":"产品","link":"/tags/%E4%BA%A7%E5%93%81/"},{"name":"图库","slug":"图库","link":"/tags/%E5%9B%BE%E5%BA%93/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"爬虫","slug":"爬虫","link":"/tags/%E7%88%AC%E8%99%AB/"},{"name":"浏览器","slug":"浏览器","link":"/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"编码","slug":"编码","link":"/tags/%E7%BC%96%E7%A0%81/"},{"name":"debug","slug":"debug","link":"/tags/debug/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"数字水印","slug":"数字水印","link":"/tags/%E6%95%B0%E5%AD%97%E6%B0%B4%E5%8D%B0/"},{"name":"屏幕","slug":"屏幕","link":"/tags/%E5%B1%8F%E5%B9%95/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"php","slug":"php","link":"/tags/php/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"华为","slug":"华为","link":"/tags/%E5%8D%8E%E4%B8%BA/"},{"name":"面试","slug":"面试","link":"/tags/%E9%9D%A2%E8%AF%95/"}],"categories":[{"name":"发展","slug":"发展","link":"/categories/%E5%8F%91%E5%B1%95/"},{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"web","slug":"技术/web","link":"/categories/%E6%8A%80%E6%9C%AF/web/"},{"name":"产品","slug":"技术/产品","link":"/categories/%E6%8A%80%E6%9C%AF/%E4%BA%A7%E5%93%81/"},{"name":"乱弹","slug":"乱弹","link":"/categories/%E4%B9%B1%E5%BC%B9/"},{"name":"读书笔记","slug":"技术/读书笔记","link":"/categories/%E6%8A%80%E6%9C%AF/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"开发","slug":"技术/开发","link":"/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"},{"name":"配置","slug":"技术/配置","link":"/categories/%E6%8A%80%E6%9C%AF/%E9%85%8D%E7%BD%AE/"},{"name":"面经","slug":"发展/面经","link":"/categories/%E5%8F%91%E5%B1%95/%E9%9D%A2%E7%BB%8F/"}]}