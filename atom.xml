<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hoverload&#39;s blog</title>
  
  
  <link href="https://hoverlod.github.io/atom.xml" rel="self"/>
  
  <link href="https://hoverlod.github.io/"/>
  <updated>2023-01-16T17:13:56.198Z</updated>
  <id>https://hoverlod.github.io/</id>
  
  <author>
    <name>hoverload</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>华为集团IT面经</title>
    <link href="https://hoverlod.github.io/2023/01/16/%E5%8D%8E%E4%B8%BA%E9%9B%86%E5%9B%A2IT%E9%9D%A2%E7%BB%8F/"/>
    <id>https://hoverlod.github.io/2023/01/16/%E5%8D%8E%E4%B8%BA%E9%9B%86%E5%9B%A2IT%E9%9D%A2%E7%BB%8F/</id>
    <published>2023-01-15T18:22:00.000Z</published>
    <updated>2023-01-16T17:13:56.198Z</updated>
    
    <content type="html"><![CDATA[<p>记录秋招在华为的面试经历</p><span id="more"></span><p>流程：投简历+笔试+综测+三场面试（技术两面，主管一面）</p><p>9月中旬加了hr，约笔试的时候不巧约的国庆，他们放假了😂。顺延到了10.13的晚上，600分的题做了不到200，题挺难做，T1是字符串处理但是很复杂；T2是图的题可能还要做dp，菜鸡直接跳过（其实写的代码最多，但辛苦分是不存在的）；T3是模拟计算器，改用python拿了一部分分。当晚就通知进入下一流程了。综测的话正常选就行了，不要出现前后矛盾的地方。</p><p>10.17-10.18是远程面试，难度：二面&gt;一面&gt;三面，整体表现一般。学校课程就浅浅看了遍，项目也是好几个月没动了，答个前端三件套都不熟。尤其二面的时候问了很多业务，回答得很烂！没想到还是面完了，等结果中。。</p><blockquote><p>1.13<br>OC啦！华子收留秋招心碎大学生了！中间等这么久以为凉了，人都等麻了，已经想准备春招了🤣真是让人好等啊。（图床bug了先不传图了，好久没写博客了哈哈）</p></blockquote><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>时间16:00 - 17:00，中午吃完饭就跑到图书馆的面试空间去了（其实图书馆中午会下班，两点半回来，要是再晚点中午就进不去了）。</p><h3 id="手撕"><a href="#手撕" class="headerlink" title="手撕"></a>手撕</h3><p>开始先问了熟悉什么语言，回答学校教了C和Python，自己写项目学了JS，刷题常用C++的STL。面试官想再问清楚点，让选一个最熟练的，我就说做题用C++吧。口头出了道优先级排序，根据成绩和学生姓名来排。开头纠结自己不会把俩元素存到一起（pair用的少），就分了两个vector存的，插入排序很快写完了。</p><h3 id="学校课程"><a href="#学校课程" class="headerlink" title="学校课程"></a>学校课程</h3><p>然后问了专业课，主要是数据结构的一些简单问题，排序算法的复杂度（就想起来4种）、根据二叉树的前&amp;中序还原、怎么求图中两点的最短距离（我说的dfs bfs，把Dijstra跟Floyd给忘了。。平时刷题确实也不爱做图，这俩算法也就当时上课写过orz），KMP我没复习。。只说了知道C++的API用的BM而不是KMP，因为KMP的平均时间复杂度不如BM。</p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>后面浅问了下项目，自己介绍了下也没深挖，看到我自己搭了LNMP，面试官问了个Linux命令，新建文件夹。我几乎没用过mkdir，就坦白说涉及到文件操作是xftp上做的（有图形界面能看到目录结构，更好操作嘛），想不起来了。</p><p>然后又问了服务器不需要重启吗，关机什么命令？我说这个云主机的控制台有重启的UI，我也没输命令关过机，想展示下控制台，就随手点开了新买的腾讯云😂，面试官好奇：为啥买的是腾讯云呢？我忙着解释，话题就转到聊天了。。聊了些轻松的内容，还有之前做的数学建模竞赛。</p><h3 id="反问"><a href="#反问" class="headerlink" title="反问"></a>反问</h3><p>反问环节问了一个，部门主要做什么业务。面试官回答之前先问了下你之前有做什么了解吗？我说看到职业描述提到Devops之类一些技术，没说具体业务。他就谈了十几分钟公共服务主要做的啥，我听到公共服务就问了嘴是SaaS？他说也不是，确实也有SaaS的项目，说了俩（名字记不清了，好像是做审批和会议的）。主要是各类项目都需要的流程，单点登陆之类的，我问像中台那样？回答说比较像，我们部门体量很庞大。大概到这里结束了。</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>时间11:10 - 12:40，因为是饭点就在宿舍楼找的房间。（这面给我问蔫了！之后感觉凉了，状态一直没变。三点多问了hr，她催完变绿了😂）</p><h3 id="项目-1"><a href="#项目-1" class="headerlink" title="项目"></a>项目</h3><p>因为项目是前后端分离，问了跨域问题怎么解决。我说在Nginx配置项，要我说一下都改了哪几项，key-value各是什么。纯知识性问题，要是刚做过肯定有印象（记性不好，好久没看那个项目），解决这种问题都是查一下文档然后改了完事嘛。说不上全名。。再就是前端发送的请求需要配置哪项？key-value叫什么，这个甚至不记得我配过没，感觉前端没配，但最后项目也是解决跨域了，可能nginx那配得太松了？</p><h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><p>怎么解决就不展开了吧，要不这篇要写不完了orz</p><p>一个页面满是图片，怎么异步加载<br><a href="https://www.cnblogs.com/rexfang/p/7058020.html">实现图片的异步加载（转载） - RexFang - 博客园 (cnblogs.com)</a></p><p>纯html进度条怎么写，你会用几个div；如果要和后端获取进度信息再真实显示怎么写；如果根据另一个组件的变量变化而变化怎么写<br><a href="https://www.cnblogs.com/coco1s/p/15506976.html">N 种仅仅使用 HTML/CSS 实现各类进度条的方式 - ChokCoco - 博客园 (cnblogs.com)</a></p><p>如果写个js脚本把服务器发来的页面里的a链接都改掉，要怎么改？如果不该链接内容，只是统计链接点击次数，怎么写才能统计？</p><p>数据库学过吗，问了<a href="https://www.jianshu.com/p/0355d9e5ba0e">数据库三大范式</a>，还有怎么加快查询速度。</p><h3 id="语言基础"><a href="#语言基础" class="headerlink" title="语言基础"></a>语言基础</h3><p>js的事件、冒泡怎么处理、正则<br>页面布局、flex、怎么让元素在页面居中</p><h3 id="手撕-1"><a href="#手撕-1" class="headerlink" title="手撕"></a>手撕</h3><p>做题之前面试官问了句做过多少题？我说三百多道。他说，那背包、动规都是学过的吧，吓我一跳我写不好的😂就支支吾吾说，背包没写过。。</p><p>以为他要出难题了，结果从word文档里挑了一个坐标转换的题目，每隔几个数把大矩阵划分开，求一个坐标在第几块，类似矩阵重塑啥的简单题。面试官先说自己要离开一会，我就“秒掉“发到会议聊天里了。马上发现有个地方取余和除法搞错了。。囧。后面又默默改了会，重新发了，等他回来讲了一下（他解释是电脑没电了去充电）</p><h3 id="反问-1"><a href="#反问-1" class="headerlink" title="反问"></a>反问</h3><p>撕完题已经十二点半了，面试官问我有啥问题想问吗？其实我有想问的，因为他介绍过自己写了二十年代码，前端也做过五年。。但是前面问的好多不会感觉要凉了，加上是饭点，担心他不想理我就没问😭</p><h2 id="主管面"><a href="#主管面" class="headerlink" title="主管面"></a>主管面</h2><p>时间还蛮紧的，因为二面之后十二点半，等了很久消息，四点得知过了，但原本约的时间不会改，下午六点半开面。这面类似聊天，面了四十分钟左右。之前担心是压力面，结果面试官人很好，也不手撕代码。没聊家里情况也没问想去哪，问了些网上就能查到的泛用问题。反问环节我问了下需要的能力、新人培训制度。</p><blockquote><p>1.16<br>面经写完啦（干货被你忽略，变成日记）！现在签了两方还没签三方但已经稳了，等着签完领礼包咯。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录秋招在华为的面试经历&lt;/p&gt;</summary>
    
    
    
    <category term="发展" scheme="https://hoverlod.github.io/categories/%E5%8F%91%E5%B1%95/"/>
    
    <category term="面经" scheme="https://hoverlod.github.io/categories/%E5%8F%91%E5%B1%95/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="华为" scheme="https://hoverlod.github.io/tags/%E5%8D%8E%E4%B8%BA/"/>
    
    <category term="面试" scheme="https://hoverlod.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>编码问题——ANSI</title>
    <link href="https://hoverlod.github.io/2022/03/29/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94ANSI/"/>
    <id>https://hoverlod.github.io/2022/03/29/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94ANSI/</id>
    <published>2022-03-29T01:20:46.000Z</published>
    <updated>2022-04-16T19:06:01.869Z</updated>
    
    <content type="html"><![CDATA[<p>微软的记事本里有个格式叫ANSI，经常用它转码。但是做项目时发现sublime居然没有这种格式，怎么回事呢？</p><span id="more"></span><h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><p>数据库的表是utf8mb4格式，导出的csv里有汉字，在excel打开是乱码的，因为excel默认用“ANSI编码”。对于这个问题，网上的解决都是：用微软的记事本把编码改成ANSI。这也太没效率了，至少在我常用的编辑器里转码吧，但是死活找不到哪种编码叫“ANSI”。原来这是个标准，每个国家实现都不一样，自己的win系统是简体中文，对应了<a href="https://www.qqxiuzi.cn/zh/hanzi-gb2312-bianma.php">GB2312</a>。</p><p><strong>ANSI编码</strong>是一种对ASCII码的拓展。ANSI编码用0x00~0x7f （即十进制下的0到127）范围的1 个字节来表示 1 个英文字符，超出一个字节的 0x80~0xFFFF 范围，开始用两个字节来表示其他语言的其他字符（也就是说，ANSI码仅在前128（0-127）个与ASCII码相同，之后的字符全是某个国家语言的所有字符）。简体中文编码表GB2312，繁体中文BIG5，日文Shift_JIS，各国有各国的标准。受制于当时的条件，不同语言之间的ANSI码之间不能互相转换，这就会导致在多语言混合的文本中会有乱码。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>如何告知excel这个csv是utf8编码呢？需要在文件头加上BOM。</p><figure class="highlight php"><figcaption><span>csv.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// excel默认ASCI编码，为了正常显示utf8，要加BOM头</span></span><br><span class="line">header ( <span class="string">&quot;Content-type: text/csv; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\xEF\xBB\xBF&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> 正文...</span><br></pre></td></tr></table></figure><p>在UTF-8文件中放置BOM是微软的习惯，而unix又正好反过来：UNIX首行的<a href="https://zh.wikipedia.org/wiki/Shebang"><code>#!</code></a>标示依赖于shell解析，而很多shell出于兼容的考虑不检测BOM，所以加进BOM时shell会把它解释为某个普通字符输入导致破坏<code>#!</code>标示。</p><h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h2><p><a href="https://www.zhihu.com/question/20167122">「带 BOM 的 UTF-8」和「无 BOM 的 UTF-8」有什么区别？网页代码一般使用哪个？ - 知乎 (zhihu.com)</a></p><p><a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F">字节顺序标记 - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://www.cnblogs.com/wangwust/p/8942944.html">“烫烫烫”与“锟斤拷”的原理 - wangwust - 博客园 (cnblogs.com)</a></p><p><a href="https://www.jianshu.com/p/c23f3ea5443d">字符编码Unicode、UTF-8和ANSI - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/xiangxianghehe/article/details/77574965">字符编码ANSI和ASCII区别、Unicode和UTF-8区别 -CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;微软的记事本里有个格式叫ANSI，经常用它转码。但是做项目时发现sublime居然没有这种格式，怎么回事呢？&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="web" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/web/"/>
    
    
    <category term="编码" scheme="https://hoverlod.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
    <category term="debug" scheme="https://hoverlod.github.io/tags/debug/"/>
    
    <category term="windows" scheme="https://hoverlod.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>使用Unsplash图库</title>
    <link href="https://hoverlod.github.io/2022/03/17/%E4%BD%BF%E7%94%A8Unsplash%E5%9B%BE%E5%BA%93/"/>
    <id>https://hoverlod.github.io/2022/03/17/%E4%BD%BF%E7%94%A8Unsplash%E5%9B%BE%E5%BA%93/</id>
    <published>2022-03-16T16:39:31.000Z</published>
    <updated>2022-04-19T17:07:01.340Z</updated>
    
    <content type="html"><![CDATA[<p>Unsplash是最著名的免费图库，国内载图速度也很可以，可以通过他们提供的API来方便地获取各种风格、尺寸的随机图片。</p><span id="more"></span><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>下方图片是用链接 <code>https://source.unsplash.com/random/1920×1080?cake</code> 加载的：</p><p><img src="https://source.unsplash.com/random/1920%C3%971080?cake" alt="从Unsplash随机抓取一张图片"></p><p>话说乘号在哪打？发现输入法输入cheng会看到。</p><h2 id="如何保存图片"><a href="#如何保存图片" class="headerlink" title="如何保存图片"></a>如何保存图片</h2><p>我发现这样载图有个<strong>缺点</strong>：由于图片链接写的是生成前的api，读者在浏览器右键保存这张图片时，会发现得到了另一张重新生成的图。</p><p>解决方式：读者可以按F12或<code>ctrl+shift+I</code>打开开发者模式，从源代码一栏获取。图片位置如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/image-20220410013204479.png"></p><hr><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><p><strong>返回随机图片</strong><br>/random</p><p><strong>指定返回的图片大小</strong><br>/random/1920x1080</p><p><strong>搜索指定用户</strong><br>/user/jjying</p><p><strong>搜索特定关键词</strong><br>/?sunny,day</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Unsplash是最著名的免费图库，国内载图速度也很可以，可以通过他们提供的API来方便地获取各种风格、尺寸的随机图片。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="blog" scheme="https://hoverlod.github.io/tags/blog/"/>
    
    <category term="图库" scheme="https://hoverlod.github.io/tags/%E5%9B%BE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>云主机被回收了</title>
    <link href="https://hoverlod.github.io/2022/02/25/%E4%BA%91%E4%B8%BB%E6%9C%BA%E8%A2%AB%E5%9B%9E%E6%94%B6%E4%BA%86/"/>
    <id>https://hoverlod.github.io/2022/02/25/%E4%BA%91%E4%B8%BB%E6%9C%BA%E8%A2%AB%E5%9B%9E%E6%94%B6%E4%BA%86/</id>
    <published>2022-02-25T12:31:39.000Z</published>
    <updated>2022-05-26T14:31:36.481Z</updated>
    
    <content type="html"><![CDATA[<p>图便宜用了软工课上给的某比赛提供的云主机，本还未过期，比赛结束后云主机被回收了。<br>联系客服“恢复”了，但是完全没有网络，可能是平台给断网了（恢复了但没有完全恢复🐶）</p><span id="more"></span><h2 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx:"></a>nginx:</h3><p><code>nginx -s reload</code></p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL:"></a>MySQL:</h3><p><code>service start mysql</code></p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat:"></a>Tomcat:</h3><p>在<code>安装目录/bin</code>下执行<code>./startup.sh</code>。</p><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>以上完成后，可以通过访问<code>127.0.0.1:xxx</code>查看Nginx和Tomcat代理的网页了，但还上不了网，公网ip也ping不通，问了客服，答复是需要关防火墙。刚拿到主机的时候没整网络直接就能用，可能开始是关的？</p><p>查询得知有两种防火墙：firewalld、iptables。但执行关闭命令时发现这两个都找不到，最后确定了有iptables。</p><p>还稀里糊涂执行了<code>iptables -F</code>，没有保险意识。。至少本来都是ACCEPT，还不是最坏情况。</p><p>学习了：<a href="https://www.bilibili.com/video/av71574590?from=search&seid=10566413664966638925&spm_id_from=333.337.0.0">【小知识】第9期 20分钟掌握iptables指令_哔哩哔哩_bilibili</a></p><blockquote><p>处理入站信息包的规则被添加到 INPUT 链中。处理出站信息包的规则被添加到 OUTPUT 链中。处理正在转发的信息包的规则被添加到 FORWARD 链中。这三个链是基本信息包过滤表中内置的缺省主链。</p></blockquote><p>INPUT是进来的数据包，OUTPUT是出去，现在全ACCEPT按理不相当于关了吗？那么暂且认为不是因为这个原因。</p><p>查看本机开放端口：<code>netstat -tulnp</code>，看着也没问题。</p><p>最后看了这篇：<a href="https://blog.csdn.net/Hello_World_QWP/article/details/101162295">Job for network.service failed because the control process exited with error code. See “systemc的解决办法_Spring Boot-Common On With You-CSDN博客</a>，发现我的networking也没在工作：</p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E5%81%9C%E6%AD%A2.jpg" alt="网络服务停止" style="zoom:70%;" /><p>但是这是做底层的网络配置吧，或许就是平台给断网了。凭我的debug能力也到此为止了。</p><p>关于这事的日记：</p><blockquote><p>2.24</p><p>因为环境迁移，服务器被重启了，服务需要手动开一下。 </p><p>联系客服后次日就能开机了，但两个快照都没了。发现不能上网后一通胡乱操作。。</p><p>2.25</p><p>今天用最原始方式（截图）备份了php代码，数据库或许也截一下生成代码？至少现在能通过平台远程控制</p><p>3.2</p><p>今早客服说自己买个IP换上就好。因为平台只允许我持有一个公网ip，现在手上拿着的删不了，没法换，平台提示让我填一个工单来申请配额。</p><p>3.9</p><p>填了之后一周过去也没人处理，估计个人用户就不在服务范围内（一开始找客服，也被当成企业用户）。</p><p>没人搭理，我想着如果真是现在的ip有问题，大概是被回收了，但是平台表面并不显示？毕竟网站完成度就挺低。于是花20块钱续了一个月，没变化。。</p><p>吐槽：</p><ul><li>发的优惠券面值几千，但是就够买4核8G两个月<ul><li>首先是价格水分大，阿里腾讯之类的学生优惠，估计一百左右就能买半年我现在的配置</li><li>当时想用久点买了2核4G四个月，不是很公平的换算吗，但是就是直接被搞掉了</li></ul></li><li>2月十来号，官网突然一整天上不去，搞迁移。之后主机就出问题，说是被标记为活动用户资源被回收），事先一点通知都没。平台上到期时间明明白白写着5月，谁想得到来这出？</li><li>又逛了一遍他们官网，简陋，帮助文档都是空白一片，当时怎么就为了省点钱就用下去了？感觉没商业化，不知道提供给谁用的。。这两三周和我说话的客服也就那一个人，不觉得ta能提出啥帮助了。</li><li>做的快照被搞没了</li></ul><p>好，我的忿忿完结了。。</p><p>这个事主要对我情绪影响比较大，其实可以花一晚上把数据库的表建回来，填点条目进去再测试一遍；把软工后端截图再敲出来；本地环境拿出来重新投入使用。毕竟除了数据库其他多多少少有备份，只是我花在手动配置和远程操作上的时间蛮多的（可能是有感情了之类的🤣但是实在没必要，再配一次速度快很多，对自己太没信心了）。</p><p>头一次买云主机，因为缺少经验找了不靠谱的平台，下次计划买腾讯的学生优惠。。另外要知道这次环境被搞崩没什么大不了的，各软件配置都不是啥大问题，只是没配过所以手生。</p><p>4.8</p><p>今天数据库验收，我自认学习方法不对，后面也没热情写下去但还是腆着脸去了趟。老师还是很客气，听我抱怨云主机的事。听完还说，这些公司都这样，没什么好消沉的。。原来这种事还很多，被社会教做人了🤣</p></blockquote><h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h2><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p><a href="http://c.biancheng.net/view/800.html">linux netstat命令：网络状态查看命令 (biancheng.net)</a></p><h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><p><a href="https://www.jianshu.com/p/ee4ee15d3658">iptables详解及一些常用规则 - 简书 (jianshu.com)</a><br><a href="https://www.jianshu.com/p/586da7c8fd42">Linux下iptables防火墙配置详解 - 简书 (jianshu.com)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">首先在清除规则前要将policy INPUT改成ACCEPT，以免DROP全部导致悲剧</span></span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">清空默认所有规则</span></span><br><span class="line">iptables -F</span><br></pre></td></tr></table></figure><iframe src="//player.bilibili.com/player.html?aid=71574590&bvid=BV1rE411r7Ao&cid=124026806&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><!-- ### systemd和init.d ### 其他[解决Linux关闭或开启防火墙出现Unit iptables.service failed to load: No such file or directory._Hern（宋兆恒）的博客-CSDN博客](https://blog.csdn.net/qq_36761831/article/details/97545831)[【Linux】iptables的内核模块问题大坑！ - zclinux - 博客园 (cnblogs.com)](https://www.cnblogs.com/zclinux/p/14268328.html)--><h3 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h3><p>使用<code>ls -l</code>或缩写<code>ll</code>即可，看属性第一个字符。</p><p>也可使用file命令或stat命令。</p><h4 id="普通文件类型"><a href="#普通文件类型" class="headerlink" title="普通文件类型 -"></a>普通文件类型 -</h4><p>Linux中最多的一种文件类型，包括 纯文本文件(ASCII)、二进制文件(binary)、数据格式的文件(data)、各种压缩文件。</p><h4 id="目录文件类型-d"><a href="#目录文件类型-d" class="headerlink" title="目录文件类型 d"></a>目录文件类型 d</h4><p>毕竟linux一切皆文件，能用<code>cd</code>进入的目录也是。</p><h4 id="字符设备文件-c"><a href="#字符设备文件-c" class="headerlink" title="字符设备文件 c"></a>字符设备文件 c</h4><p>即串行端口的接口设备，例如键盘、鼠标。</p><h4 id="块设备文件-b"><a href="#块设备文件-b" class="headerlink" title="块设备文件 b"></a>块设备文件 b</h4><p>即存储数据以供系统存取的接口设备，简单而言就是硬盘。例如一号硬盘的代码是 /dev/hda1等文件。</p><h4 id="套接字文件-s"><a href="#套接字文件-s" class="headerlink" title="套接字文件 s"></a>套接字文件 s</h4><p>这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。最常在 /var/run目录中看到这种文件类型。</p><h4 id="管道文件-p"><a href="#管道文件-p" class="headerlink" title="管道文件 p"></a>管道文件 p</h4><p>FIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO是first-in-first-out的缩写。</p><h4 id="链接文件-l"><a href="#链接文件-l" class="headerlink" title="链接文件 l"></a>链接文件 l</h4><p>类似快捷方式。</p><p>软链接：指向目标文件，inode互不相同。删除软连接时，不影响源文件，删除源文件后，软连接失效；<br>硬链接：共享inode，因为硬链接文件是同一个文件，文件大小也一样，相当于另一个文件入口。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;图便宜用了软工课上给的某比赛提供的云主机，本还未过期，比赛结束后云主机被回收了。&lt;br&gt;联系客服“恢复”了，但是完全没有网络，可能是平台给断网了（恢复了但没有完全恢复🐶）&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="web" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/web/"/>
    
    
    <category term="云主机" scheme="https://hoverlod.github.io/tags/%E4%BA%91%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>数字水印</title>
    <link href="https://hoverlod.github.io/2022/02/22/%E9%9A%90%E6%B0%B4%E5%8D%B0/"/>
    <id>https://hoverlod.github.io/2022/02/22/%E9%9A%90%E6%B0%B4%E5%8D%B0/</id>
    <published>2022-02-22T04:54:19.000Z</published>
    <updated>2022-04-14T18:34:23.215Z</updated>
    
    <content type="html"><![CDATA[<p>数字水印技术可以给数字载体在空域、频域或时域添加水印，但不影响载体的使用、不易被人的知觉系统察觉。</p><p>现实中就我听说过的例子：阿里月饼门（频域），还有最近看到网上在传的豆瓣在白色背景加了两行#fefefe小字（看描述也没啥技术含量，其实我去小组页面那里找了没找到，感觉是假的）。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;数字水印技术可以给数字载体在空域、频域或时域添加水印，但不影响载体的使用、不易被人的知觉系统察觉。&lt;/p&gt;
&lt;p&gt;现实中就我听说过的例子：阿里月饼门（频域），还有最近看到网上在传的豆瓣在白色背景加了两行#fefefe小字（看描述也没啥技术含量，其实我去小组页面那里找了没找到，感觉是假的）。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="数字水印" scheme="https://hoverlod.github.io/tags/%E6%95%B0%E5%AD%97%E6%B0%B4%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>JSON必知必会</title>
    <link href="https://hoverlod.github.io/2022/02/15/JSON%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <id>https://hoverlod.github.io/2022/02/15/JSON%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</id>
    <published>2022-02-14T21:44:58.000Z</published>
    <updated>2022-04-16T19:06:12.697Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概要</strong></p><p>前三章 JSON语法<br>第四章 Schema做一致性检验<br>第五章 安全问题<br>第六章 Ajax，API，跨域和JSON-P</p><p>— 下面几章就很浅了 —</p><p>第七章 jQuery，Angular框架<br>第八章 NoSQL<br>第九章 服务端的JSON<br>第十章 JSON作为配置文件</p><span id="more"></span><h2 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h2><p>JSON语法是JavaScript的真子集，但它是独立于编程语言的一种<strong>数据交换格式</strong>。</p><p>数据交换格式的核心是数据，所以 JSON 中并不会涉及 JavaScript 对象字面量中的函数。JSON 所基于的 JavaScript 对象字面量单纯指对象字面量及其属性的语法表示。这种属性表示方法也就是通过<strong>名称 - 值对</strong>来实现的。</p><p>名称只能用双引号包裹，里面名称甚至可以放单引号。但是 ↓</p><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><p>为了获得<strong>最大可移植性</strong>，应尽可能避免使用空格或特殊字符。 JSON 中的名称 - 值对的名称如果被系统作为对象装入内存的话，将会成为“属性”。在部分系统中，属性名可以包含下划线或数字，但是大多数情况下最好是使用英文字母 A<del>Z 或 a</del>z。</p><p>——我选择驼峰</p><h4 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h4><p>有意思所以。。</p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/json%E9%92%A6%E7%82%B9.png" alt="json钦点" style="zoom:80%;" /><h4 id="注意逗号"><a href="#注意逗号" class="headerlink" title="注意逗号"></a>注意逗号</h4><blockquote><p>如果你在名称 - 值对列表的结尾处加上一个逗号，你给机器的指令是“一个新部分的开始”，但是后面什么都没有。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/json%E6%B3%A8%E6%84%8F%E9%80%97%E5%8F%B7.png" alt="json注意逗号" style="zoom:80%;" /><h4 id="JSON的媒体类型"><a href="#JSON的媒体类型" class="headerlink" title="JSON的媒体类型"></a>JSON的媒体类型</h4><p>当你在传递数据时，需要提前告知接收方数据是什么类型，这就会涉及<strong>媒体类型</strong>。媒体类型也有一些你可能听过的其他称呼，如“互联网媒体类型”“内容类型”或“MIME 类型”。它使用“类型 / 子类型”这种格式来表示，比如你可能见过的 text/html。</p><p>JSON 的 MIME 类型是 application/json。</p><p>互联网数字分配机构（Internet Assigned Numbers Authority，IANA）维护着一个包含全部媒体类型的列表（<a href="http://www.iana.org/assignments/media-types/media-types.xhtml%EF%BC%89%E3%80%82">http://www.iana.org/assignments/media-types/media-types.xhtml）。</a></p><h2 id="JSON-Schema"><a href="#JSON-Schema" class="headerlink" title="JSON Schema"></a>JSON Schema</h2><p>🔗<a href="https://json-schema.apifox.cn/">JSON Schema 规范（中文版） (apifox.cn)</a></p><p>JSON Schema （schema意为格式）可以帮助回答下列问题：</p><ul><li>值的数据类型是否正确？ 可以具体规定一个值是数字、字符串等类型。</li><li>是否包含所需要的数据？ 可以具体规定哪些数据是需要的，哪些是不需要的。</li><li>值的形式是不是我需要的？ 可以指定范围、最小值和最大值</li></ul><p>一个JSON Schema 文件，它就是JSON格式的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;http://json-schema.org/draft-04/schema#&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Cat&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">      <span class="string">&quot;minLength&quot;</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;maxLength&quot;</span> : <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Your cat&#x27;s age in years.&quot;</span></span><br><span class="line">      <span class="string">&quot;minimum&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;declawed&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;boolean&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;required&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>,</span><br><span class="line">    <span class="string">&quot;declawed&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本章提供的例子只是简介，是冰山一角。JSON Schema 还支持正则表达式（一种字符形式，比如电子邮件地址的格式）以及枚举类型（一个包含所有可能值的列表）。如果你希望深入掌握 JSON Schema，可以访问下面的链接，了解相关规范：</p><ul><li>JSON Schema 主页（<a href="http://json-schema.org/%EF%BC%89">http://json-schema.org/）</a></li><li>JSON Schema 验证规范（<a href="http://json-schema.org/latest/json-schema-validation">http://json-schema.org/latest/json-schema-validation</a>. html）</li></ul><p>附加一个Linter知识：</p><p>是做<strong>语法</strong>验证的，而schema是检测<strong>语义</strong>是否合法</p><p><a href="https://zhuanlan.zhihu.com/p/34656263">JS Linter 进化史 - 知乎 (zhihu.com)</a></p><h2 id="JSON安全"><a href="#JSON安全" class="headerlink" title="JSON安全"></a>JSON安全</h2><h4 id="跨站请求伪造"><a href="#跨站请求伪造" class="headerlink" title="跨站请求伪造"></a>跨站请求伪造</h4><p>跨站请求伪造，即 CSRF（cross-site request forgery，读作 sea-surf），是一种 利用站点对用户浏览器信任而发起攻击的方式。CSRF 漏洞已经存在了很长时间，远比 JSON 出现得早。</p><h4 id="跨站脚本攻击"><a href="#跨站脚本攻击" class="headerlink" title="跨站脚本攻击"></a>跨站脚本攻击</h4><p>注入攻击：依赖于将数据注入到 Web 应用程序以方便恶意数据执行或编译的攻击</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>不要使用顶级数组。顶级数组是合法的 JavaScript 脚本，它们可以用<code>&lt;script&gt;</code>标签链接并使用。而如果是个对象，就不会被成功解析。</li><li>对于不想公开的资源，仅允许使用 HTTP POST 方法请求，而不是 GET方法。GET 方法可以通过 URL 来请求，甚至可以放在<code>&lt;script&gt;</code>标签中。</li><li>使用 JSON.parse() 来代替 eval()。eval() 函数会将传入的字符串编译并执行，这会让你的代码易被攻击。应仅使用 JSON.parse() 来解析 JSON 数据。</li></ul><h2 id="零碎"><a href="#零碎" class="headerlink" title="零碎"></a>零碎</h2><h3 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h3><p>🔗<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Introduction">Web API简介 - 学习 Web 开发 | MDN (mozilla.org)</a></p><p>Web API的服务内容和普通网站差不多，但是它并不是用来拿给人看的🐶</p><p>Web API 是通过 HTTP 服务进行交互的一组指令和标准。这些交互可以包括创建、读取、更新、删除（CRUD）等操作，且 Web API 都会有一份说明，概述如何使用这些指令和标准。 （是一个对诸如 HTML 或 JSON 文档等资源进行请求和响应的系统。这些文档使用URL经由 HTTP请求。）</p><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><p>适合MVC的框架，和React、Vue不同，提供了更完整的解决方案。</p><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>NoSQL，顾名思义，它不是一种关系型数据库。我们不能使用 SQL 从关联在一起的数据库表格的行和列中获取数据。</p><p>NoSQL 数据库的一个例子是键值对存储。键值对存储模型将数据简化为键值对。如果要将英语词典编入数据库，那么用键值对存储非常合适。每一个单词就是一个键，单词对应的定义就是键的值。对于比较简单的数据结构来说，使用这种数据库比使用传统的关系型数据库要合适。（如果想将一个地址的省、市、区、街道和邮政编码等数据相关联，该怎么办？如果需要这种关系，那最好还是使用关系型模型，毕竟将复杂的关系用一个文档来表示还是很有难度的。）</p><h3 id="服务端JSON"><a href="#服务端JSON" class="headerlink" title="服务端JSON"></a>服务端JSON</h3><p>ASP、PHP的：序列化，反序列化，请求json</p><p>发送JSON HTTP请求的其他方式：Ruby on Rails，Java，Node.js</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>软件中经常会有配置文件或设置文件，它让我们可以不必重新编译就能修改设置。配置文件的格式有很多，有 INI 和 XML 等。每种格式都有优点和缺点。</p><p>现实中一个使用 JSON 作为配置文件的极佳例子就是 Node.js 默认的 JavaScript 包管理器：npm（<em>文件名称为 package.json。该文件包含了每个包的具体信息，如名称、版本、作者、贡献者、依赖、脚本以及许可</em>。由于json没有注释这一说法，想要加点说明时，可以用一个键值对<code>&quot;comment&quot;: &quot;xxx&quot;</code>来代替）。当然，它也被 AngularJS 和 jQuery 等其他框架使用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前三章 JSON语法&lt;br&gt;第四章 Schema做一致性检验&lt;br&gt;第五章 安全问题&lt;br&gt;第六章 Ajax，API，跨域和JSON-P&lt;/p&gt;
&lt;p&gt;— 下面几章就很浅了 —&lt;/p&gt;
&lt;p&gt;第七章 jQuery，Angular框架&lt;br&gt;第八章 NoSQL&lt;br&gt;第九章 服务端的JSON&lt;br&gt;第十章 JSON作为配置文件&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="读书笔记" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="json" scheme="https://hoverlod.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>在26岁时写给18岁的自己</title>
    <link href="https://hoverlod.github.io/2022/02/04/%E5%9C%A826%E5%B2%81%E6%97%B6%E5%86%99%E7%BB%9918%E5%B2%81%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    <id>https://hoverlod.github.io/2022/02/04/%E5%9C%A826%E5%B2%81%E6%97%B6%E5%86%99%E7%BB%9918%E5%B2%81%E7%9A%84%E8%87%AA%E5%B7%B1/</id>
    <published>2022-02-04T07:01:35.000Z</published>
    <updated>2022-03-29T19:00:05.832Z</updated>
    
    <content type="html"><![CDATA[<p>作者：V2站长livid</p><p>原文链接：<a href="https://livid.v2ex.com/essays/2012/01/24/a-letter-from-26-to-18.html">https://livid.v2ex.com/essays/2012/01/24/a-letter-from-26-to-18.html</a></p><span id="more"></span><p>Jan 24, 2012</p><p>我知道现在的自己是再也回不去的了。可是倘若有机会，我是多么希望能让 18 岁的你在一个晴朗的，没有负担的午后读到这封信，并且多么希望你能够将它读上好多遍。</p><p>这样的场景或许只会发生在奇幻电影中，26 岁的我坐在这里一字一字写下给 18 岁的你的文字，当文字就这么不停地落下，周遭的景致便不停变化，有的记忆会消失，有的记忆会莫名浮起，不知处在什么年岁的夹在中间的我，就像是芝诺悖论中的阿喀琉斯或那只乌龟，不知道谁会最终超过谁。</p><p>而此时此刻，在这个世界上，还有无数的像你一样 18 岁的少年，他们绝对无法知道在他们人生未来的岁月里将会发生的。有一天他们也会到 26 岁，那个时候他们会希望未来的自己游回这 8 年的时间河流，和青春的自己长谈么？</p><p>这些文字恐怕不可避免地会带有说教的意味，并非是现在的自己觉得那时的你做的不好。只是，你所做的每一件事，都会基于你当时所掌握的所有信息量。如果信息量发生改变，你所做的决定和之后的实际行动也就会必然发生改变。</p><h2 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h2><p>你的身体是你最宝贵的、首要的一切。</p><p>未来你所拥有的最有创造力的时间是固定的，你最有想象力的那些创造需要的是彻底不被打扰的时间，而保有完美的身体，将会始终保证你能够将你的最好的时光都用在最美好的事情上。</p><p>不要挑食，你需要每天都均衡地摄入各种食物，那些能够让你健康的食物，不要太多，也不要太少。你需要学会为自己的所有事情做计划，你会先根据直觉，为自己设定一个健康的食谱，然后再逐渐调整它。你的所有计划需要放在一个你能够经常看到的地方。</p><p>随着你脑中的事情越来越多，你可能会越来越忽略自己的身体。所以你不仅需要的是对于保护身体的持续提醒，你更需要的是良好的习惯。</p><p>每天睡觉之前，和睡醒之后，一定要记得刷牙，并且要用牙线，只是不要用力过猛。用完牙线之后，记得用漱口水，一定要含足 30 秒之后再吐掉。只用李施德林牌的漱口水，具有强烈刺激性的味道，没准可以启发你的灵感。</p><p>在你的人生中，你可能不可避免地会有一段时间必须在夜深人静的时候才能完成自己的想法。不要让这样的生活方式成为常态。你应该每天晨跑，还记得 15 岁中考前为了拿体育满分的每日晨跑么？晨跑是一件会上瘾的，对你的一切都有好处的事情。为了提醒自己养成这个良好习惯，用一个专门的本子记下自己每个月跑的公里数，每页一个月，每行一天，那么在 30 岁时，你就会有一本写满了跑步公里数的 144 页的本子，这只是半本中文版《一九八四》的厚度。而 12 年间，你会至少跑过 10000 公里。这不是一件这个世界上的所有人都能做到的事情，但是如果你做到了，那么在你试着去完成别的事情的过程中，这件事情会给你信心。</p><p>另外就是，不要喝任何太甜的饮料，尤其是碳酸饮料。不过，在你头痛的时候，你或许可以稍微喝一点点可口可乐，这东西对缓解头痛确实有点效果。</p><h2 id="精神"><a href="#精神" class="headerlink" title="精神"></a>精神</h2><p>读《圣经》。找到一个轻便的版本，放进你随身的包里。</p><p>在你高兴的时候，痛苦的时候，困惑的时候，想到里面的句子，打开它，静静地读。和你爱的人分享你从阅读《圣经》中所体会的。</p><p>你要相信，这个世界上存在着一种最高的道德和标准，你知道这样的存在却并不知道其具体的面貌，只是，在你面临选择的时候，想到书中的那些话，想想自己要如何做会让他高兴和认可。</p><p>每个月至少读一本和自己专业无关的书，为自己读过的书写下一点什么。</p><p>看你能找到的所有电影，从 <a href="http://www.imdb.com/chart/top">IMDB TOP 250</a> 开始看，记下喜欢的导演的名字，去 Wikipedia 看他的人生经历，找他的其他电影来看。</p><p>这个世界会将很多的音乐推入你的耳朵，而有些特别的音乐需要你自己去寻找。找到巴赫的所有音乐去听，不要错过 GEB 这本书，这会是一本你在人生不同的阶段用自己不同的信息量去读的一本书。</p><h2 id="朋友"><a href="#朋友" class="headerlink" title="朋友"></a>朋友</h2><p>在你的人生中，你不可避免地会遇到很多人。而越往后，你所遇到的人对你而言的情况就越复杂，恐怕你们也就越难成为一生的好朋友。而那些你很早就遇到，现在却依然在你身边的人，你需要付出努力让他们能够一直在你身边，他们是你一生的朋友。</p><p>这些努力包括：</p><ul><li>不要简单地觉得别人错了，很多时候可能是因为自己没有仔细读说明书或是往来邮件。</li><li>忘掉你为朋友做的事情 。</li><li>当你有负面情绪的时候，不要把任何人想成坏人。转移注意力，用音乐和电影去挤掉脑中的负面情绪，一天，两天，一周，两周，一年，两年后，你会看到别人在变，或者你已忘记。</li></ul><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><p>你需要持续地整理自己周遭的一切。因为你处在的这个世界所指向的趋势是无序的。如果你自身不做足够多的努力，你就会被这样的无序性所吞噬。</p><p>暴露在空气中的食物在一个星期之后就会变坏，沙滩上堆砌的小城堡会被风和海浪还原成沙子，这一切都是因为我们所处在的这个世界的熵在升高。</p><p>而生命的诞生、发展和存在的过程却是与此相反的，虽然生命的最终结局是熵到达最大值时吞噬一切意义，但是那个时刻离现在的我们还有几十年的时间。而在这几十年里，你需要持续整理你周遭的一切。这或许可以理解为一种对抗，也可以被认为这就是生命的意义。</p><h2 id="积累"><a href="#积累" class="headerlink" title="积累"></a>积累</h2><p>整理的结果，就是你的积累。而你能对这个世界所产生的有益贡献，就是你以自己的方式所积累的。而你从这个世界所获得回报，由你所积累的质量决定。</p><p>所以，在你 18 岁，甚至更早的时候，你就应该已然找到一个你能够积累的方向，也可以说成是兴趣的。然后你接下来所做的，就是让这个方向上所有的信息都尽可能多的汇聚到你的大脑中，你的记忆或者说潜意识就像一片大海一样当然是能够装下这一切的。然后，想象你从 20000 米的高空俯瞰大地，大地上是你日复一日所积累的信息，然后你将他们分类，合并，丢弃那些质量低劣的。你见得越多，你就越明白什么算是质量低劣的，也就必然丢得越多。</p><p>积累某个方向上的信息量是你一辈子的工作的本质。</p><p>你所积累的信息量，最终需要传递到别人那里去。当有越多的人需要你所积累的信息时，这个世界也就会自然给你越丰厚的回报。所以，你需要时不时的问问自己，自己现在在积累的这些信息，由这些信息所创造的现实存在，究竟能够帮助到多少人，又被多少人所必需。</p><p>而这一切或许不会在积累之初便看得很清楚。但是，当你在做正确的事情时，你就会自然从这个世界的各个角落听到对于你所做的事情的讨论乃至感谢。这一切或许会需要时间，但是你<strong>不要觉得自己是在等待什么</strong>，你只是在持续地，习惯性地积累自己所爱的方向上的信息量。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作者：V2站长livid&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://livid.v2ex.com/essays/2012/01/24/a-letter-from-26-to-18.html&quot;&gt;https://livid.v2ex.com/essays/2012/01/24/a-letter-from-26-to-18.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="发展" scheme="https://hoverlod.github.io/categories/%E5%8F%91%E5%B1%95/"/>
    
    
  </entry>
  
  <entry>
    <title>镜面屏雾面屏</title>
    <link href="https://hoverlod.github.io/2022/02/04/%E9%95%9C%E9%9D%A2%E5%B1%8F%E9%9B%BE%E9%9D%A2%E5%B1%8F/"/>
    <id>https://hoverlod.github.io/2022/02/04/%E9%95%9C%E9%9D%A2%E5%B1%8F%E9%9B%BE%E9%9D%A2%E5%B1%8F/</id>
    <published>2022-02-04T05:32:58.000Z</published>
    <updated>2022-02-04T06:46:38.061Z</updated>
    
    <content type="html"><![CDATA[<p>其实也不挑这个，唯一讨厌的是被戳电脑显示屏，这时候雾面屏不那么显脏。</p><span id="more"></span><p>我电脑和外接显示屏都是雾面的，21年10月挑了显示屏，有好多地方要关注，品牌、品控、分辨率、尺寸、色域、出厂校色、护眼、智能亮度调节、看评论区说坏点多不多，甚至考虑拿旧屏DIY（不瞎折腾了），一挑一晚上谁还管那个。买的24mq，显示屏就是耐操，只要包装盒跟泡沫没人乱扔，邮递也不大担心。谁给扔了我骂他。不过要是它是镜面，不用的时候一个24寸大镜子竖在那，说不定还反光。感觉旁边的人会不爽。另外就是不反光更护眼，尤其黑色主题。</p><p>手机平板追求画质不贴磨砂正常，电脑谁把脸贴到上面看去，甚至屏不好雾面还能掩盖一下。</p><p>关于上面说的拿笔记本15.6寸自制那种，自己没搞过就只能照着别人给的硬件型号买，然后组装我也没整过，没钱没时间，不敢乱搞。网上买个现成的又水很深，明明那么小一个便携屏，品牌货那个价都够买24寸了，小牌子又不知道搞得什么屏。还是大屏香。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实也不挑这个，唯一讨厌的是被戳电脑显示屏，这时候雾面屏不那么显脏。&lt;/p&gt;</summary>
    
    
    
    <category term="乱弹" scheme="https://hoverlod.github.io/categories/%E4%B9%B1%E5%BC%B9/"/>
    
    
    <category term="屏幕" scheme="https://hoverlod.github.io/tags/%E5%B1%8F%E5%B9%95/"/>
    
  </entry>
  
  <entry>
    <title>MVC</title>
    <link href="https://hoverlod.github.io/2022/02/02/MVC/"/>
    <id>https://hoverlod.github.io/2022/02/02/MVC/</id>
    <published>2022-02-02T05:23:58.000Z</published>
    <updated>2022-04-14T17:43:15.509Z</updated>
    
    <content type="html"><![CDATA[<p>到现在也不得要领，难道是这次技术选型不对导致的orz</p><span id="more"></span><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>放一堆MVC链接：</p><p><a href="https://www.zhihu.com/question/27897315?utm_source=wechat_session&utm_medium=social&utm_oi=677247941484351488&utm_content=group3_supplementQuestions&utm_campaign=shareopn">如何理解Web应用程序的MVC模型？ - 知乎 (zhihu.com)</a></p><p><a href="https://segmentfault.com/q/1010000002456846">能简单解释一下MVC吗？越简单越好 - SegmentFault 思否</a></p><p>。。。还好多没整理，说的泛泛的</p><p><a href="https://blog.csdn.net/hmyixiu/article/details/54707301?spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-10.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-10.no_search_link">MVC(Model View Controller)是什么？_hmyixiu的博客-CSDN博客</a></p><p>M是指业务模型，V是指<a href="http://baike.baidu.com/view/362528.htm">用户界面</a>，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。比如一批统计数据可以分别用<a href="http://baike.baidu.com/view/663861.htm">柱状图</a>、<a href="http://baike.baidu.com/view/1396536.htm">饼图</a>来表示。<strong>C存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新。</strong></p><p>Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。</p><p>View（视图）是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。</p><p>Controller（控制器）是应用程序中处理用户交互的部分。通常控制器负责<strong>从视图读取数据，控制用户输入，并向模型发送数据</strong>。</p><p>MVC 分层有助于管理复杂的应用程序，因为您可以在一个时间内专门关注一个方面。例如，您可以在不依赖业务逻辑的情况下专注于视图设计。同时也让应用程序的测试更加容易。MVC 分层同时也简化了分组开发。不同的开发人员可同时开发视图、控制器逻辑和业务逻辑。</p><p>【上面像是说后端要主动把更新发给前端）；下面视图请求数据，检查输入是前端就能写的逻辑，也就发送数据是前端发个fetch告诉后端要怎么操作数据】</p><blockquote><p>如果管理员只有一个，那我只要在改了表之后自动刷新就完了，那就这么设定吧XD</p></blockquote><hr><p>担心项目是不是不合MVC要求</p><p>C：我现在理解我的C就是React里模块的逻辑，就是和模块交互，它去决定取什么数据，然后自动到时候改变View，整个业务逻辑就在前端项目就实现了呀。 后端解析url，从而操作数据库，做了一个前后端对接，这个逻辑也是Controller？目前这个逻辑是php写的，然后它调用了另一个专门用来取数据生成json的php文件，Model就是我取出来的那个json。</p><p>C需要监控它的变化如果变了就告诉V？双向通讯是MVC要实现的工作吗【好像是的，后端推送信息】</p><hr><p><a href="https://segmentfault.com/a/1190000020249988">讲技术-什么是Web Hook？ - SegmentFault 思否</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;到现在也不得要领，难道是这次技术选型不对导致的orz&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="开发" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="MVC" scheme="https://hoverlod.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>Ssl和ssh</title>
    <link href="https://hoverlod.github.io/2022/01/30/ssl%E5%92%8Cssh/"/>
    <id>https://hoverlod.github.io/2022/01/30/ssl%E5%92%8Cssh/</id>
    <published>2022-01-30T11:12:09.000Z</published>
    <updated>2022-03-29T19:00:05.905Z</updated>
    
    <content type="html"><![CDATA[<p>SSH 即Secure Shell，SSL即Secure Socket Layer。在最初的设计意图中，SSH更多被设计为加强Telnet/FTP安全的传输协议，SSL被设计为加强Web安全传输的协议(事实上还有SMTP/NNTP等)。</p><span id="more"></span><h2 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h2><p>连接远程主机，在XShell、数据库软件能看到</p><p><a href="https://www.cnblogs.com/zmlctt/p/3946860.html">SSH协议详解 - zmlctt - 博客园 (cnblogs.com)</a></p><h2 id="SSL协议"><a href="#SSL协议" class="headerlink" title="SSL协议"></a>SSL协议</h2><p>https、ftps的s。SSL协议使用通讯双方的客户证书以及CA根证书，是Internet网上安全通讯与交易的标准。</p><p><a href="https://zh.wikipedia.org/zh-cn/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE">超文本传输安全协议  (wikipedia.org)</a></p><p><a href="https://www.jianshu.com/p/41f7ae43e37b">浅谈HTTPS（SSL/TLS）原理</a></p><p><a href="https://www.cnblogs.com/lvhuayan/p/14538106.html">Git报错解决 OpenSSL SSL_read: Connection was reset, errno 10054 (cnblogs.com)</a></p><p>真不是因为被墙吗，而且还是移动这个墙中墙，让我用github如此难受。还有下面这个问题。</p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/image-20220204082110474.png" alt="image-20220204082110474" style="zoom:80%;" /><h2 id="OpenSSL、OpenSSH"><a href="#OpenSSL、OpenSSH" class="headerlink" title="OpenSSL、OpenSSH"></a>OpenSSL、OpenSSH</h2><p>OpenSSL：一个C语言函数库，是对SSL协议的实现。<br>openssl 中也有个叫做 openssl 的工具，是 openssl 中的库的命令行接口。</p><p>OpenSSH是实现SSH的免费软件， linux/unix都用openssh软件提供SSH服务</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SSH 即Secure Shell，SSL即Secure Socket Layer。在最初的设计意图中，SSH更多被设计为加强Telnet/FTP安全的传输协议，SSL被设计为加强Web安全传输的协议(事实上还有SMTP/NNTP等)。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="ssh" scheme="https://hoverlod.github.io/tags/ssh/"/>
    
    <category term="ssl" scheme="https://hoverlod.github.io/tags/ssl/"/>
    
    <category term="通信协议" scheme="https://hoverlod.github.io/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>To B &amp; to C</title>
    <link href="https://hoverlod.github.io/2022/01/29/to-B-to-C/"/>
    <id>https://hoverlod.github.io/2022/01/29/to-B-to-C/</id>
    <published>2022-01-29T09:31:32.000Z</published>
    <updated>2022-03-29T19:00:05.905Z</updated>
    
    <content type="html"><![CDATA[<p>B端和C端的产品，从思维到方法是大不相同的。</p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>B端产品，也叫To B（To Business）产品，即面向企业或者特定用户群体的企业级别产品；</p><p>C端产品，也叫To C（To Customer）产品，即面向普通大众消费者的产品。</p><p>通常判断一个产品是B端还是C端，最简单的判断的方式就是看产品<strong>向谁进行收费</strong>：企业付费则是B端产品，消费者付费则是C端产品。</p><p>B端产品是为企业提供服务、解决企业痛点的产品，例如财务系统、项目管理系统。B端产品的决策者是企业管理者，使用者是员工。</p><p>C端产品是解决用户在生活中的需求和痛点的产品，例如饿了么、淘宝。C端产品的决策者和使用者都是用户自身。</p><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul><li>B端注重决策者思维，C端注重纯用户思维</li><li>B端注重效率（快速完成任务），C端注重粘性（多打开、多使用）</li><li>B端注重稳定，C端注重多样性。</li></ul><h3 id="拉新"><a href="#拉新" class="headerlink" title="拉新"></a>拉新</h3><p>B端产品推广门槛远高于C端产品，很多时候B端产品需要专门的市场人员进行销售；C端产品的用户属性的相对单一，通常通过活动：获取用户、提高活跃率、提高留存、变现以及自传播等。</p><h3 id="留存"><a href="#留存" class="headerlink" title="留存"></a>留存</h3><p>B端的留存率会比C端高很多。</p><p>对于B端产品，如果用户开始习惯使用，则基本不会再考虑使用其他同类产品：</p><ol><li>B端产品费用相对较高；</li><li>企业相关信息已经都记录在该产品上，迁移成本会非常大。</li></ol><p>C端产品的<strong>替换成本</strong>相对较低，并且在市面上可以找到很多同类替代品，所以用户流失率往往会高于B端产品。</p><h3 id="商业模式"><a href="#商业模式" class="headerlink" title="商业模式"></a>商业模式</h3><p>B端产品一般通过直接收费的方式来实现营收，通常不同级别的需求可能会收取不同的费用。</p><p>C端产品大都免费开放给用户，通过流量和资源的变现实现营收，例如：广告、导流、增值服务等。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>B端产品并非不重视审美和交互体验，而是在复杂的B端业务逻辑面前，其优先级要排在稳定以及高效之后。</p><p>不管是B端产品还是C端产品，首先要记住对于所有用户来说：<strong>好的产品应该是简单易用的</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;B端和C端的产品，从思维到方法是大不相同的。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="产品" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/%E4%BA%A7%E5%93%81/"/>
    
    
    <category term="设计" scheme="https://hoverlod.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="产品" scheme="https://hoverlod.github.io/tags/%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>刷播放量爬虫</title>
    <link href="https://hoverlod.github.io/2022/01/29/%E5%88%B7%E6%92%AD%E6%94%BE%E9%87%8F%E7%88%AC%E8%99%AB/"/>
    <id>https://hoverlod.github.io/2022/01/29/%E5%88%B7%E6%92%AD%E6%94%BE%E9%87%8F%E7%88%AC%E8%99%AB/</id>
    <published>2022-01-29T00:22:15.000Z</published>
    <updated>2022-03-29T19:00:05.832Z</updated>
    
    <content type="html"><![CDATA[<p>今天去同学github踩踩，看到个刷播放的爬虫，好用！怎么没早点看见hh</p><span id="more"></span><p>链接：<a href="https://github.com/yangyaojia/EducoderWatchedAll">yangyaojia/EducoderWatchedAll: YJSchaf来了全看了 (github.com)</a></p><p>一开始不知道他搁哪找的链接，原来在视频资源的网络界面很明显就看到json了，我怎么就没想到里面会有呢！<br><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/%E8%A7%81%E5%88%B7%E6%92%AD%E6%94%BE%E9%87%8F%E7%88%AC%E8%99%AB%E6%9C%89%E6%84%9F.jpg"></p><p>然后点开一个视频看一会，发现告知观看进度的api是怎么调用的，OK了。</p><p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/%E8%A7%81%E5%88%B7%E6%92%AD%E6%94%BE%E9%87%8F%E7%88%AC%E8%99%AB%E6%9C%89%E6%84%9F2.jpg"></p><p><strong>收获</strong>：<br>一直想写个educoder的爬虫，太懒没写。。（爬大家交上的图片，从而获取作业答案），自己写估计也想不到看网络，然后陷入瞎猜参数、url ➡ 猜不中跪了</p><p>平时很少仔细看网络，我太懒了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># MAX_LEN: 修改观看时间</span></span><br><span class="line">MAX_LEN = <span class="number">3600</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;YJSchaf替你把视频全看了&quot;</span>)</span><br><span class="line"></span><br><span class="line">courseId = <span class="string">&quot;。。&quot;</span>   <span class="comment">#input(&quot;输入课程ID：&quot;)</span></span><br><span class="line"><span class="comment"># 身份认证的两个cookie，我一上来是在浏览器设置看的</span></span><br><span class="line">c1 = <span class="string">&quot;。。&quot;</span>  <span class="comment">#input(&quot;autologin_trustie：&quot;)</span></span><br><span class="line">c2 = <span class="string">&quot;。。&quot;</span>  <span class="comment">#input(&quot;_educoder_session：&quot;)</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;data.educoder.net&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.educoder.net/classrooms/&quot;</span> + courseId + <span class="string">&quot;/video&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://www.educoder.net&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;autologin_trustie=&quot;</span>+c1+<span class="string">&quot;;&quot;</span>+<span class="string">&quot;_educoder_session=&quot;</span>+c2</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">vedios_info_url = <span class="string">&quot;https://data.educoder.net/api/courses/&quot;</span> + courseId + <span class="string">&quot;/course_videos.json?coursesId=&quot;</span> + courseId + <span class="string">&quot;&amp;id=&quot;</span> + courseId + <span class="string">&quot;&amp;limit=100&quot;</span></span><br><span class="line">vedios_info = requests.get(vedios_info_url, headers = headers).json()</span><br><span class="line"></span><br><span class="line">post_url = <span class="string">&quot;https://data.educoder.net/api/watch_video_histories.json&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> vedios_info[<span class="string">&quot;videos&quot;</span>]:</span><br><span class="line"></span><br><span class="line">    req_payload = &#123;</span><br><span class="line">        <span class="string">&quot;point&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;video_id&quot;</span>: v[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">        <span class="string">&quot;course_id&quot;</span>: courseId ,</span><br><span class="line">        <span class="string">&quot;duration&quot;</span>: MAX_LEN, </span><br><span class="line">        <span class="string">&quot;device&quot;</span>: <span class="string">&quot;pc&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.post(post_url, json = req_payload, headers = headers).json()</span><br><span class="line"></span><br><span class="line">    update_payload = &#123;</span><br><span class="line">        <span class="string">&quot;point&quot;</span>: MAX_LEN,</span><br><span class="line">        <span class="string">&quot;log_id&quot;</span>: response[<span class="string">&quot;log_id&quot;</span>],</span><br><span class="line">        <span class="string">&quot;watch_duration&quot;</span>: MAX_LEN,</span><br><span class="line">        <span class="string">&quot;total_duration&quot;</span>: MAX_LEN,</span><br><span class="line">        <span class="string">&quot;ed&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    response = requests.post(post_url, json = update_payload, headers = headers).json()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(response[<span class="string">&quot;message&quot;</span>] == <span class="string">&quot;success&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;【success】&quot;</span> + v[<span class="string">&quot;title&quot;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;【fail】&quot;</span> + v[<span class="string">&quot;title&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天去同学github踩踩，看到个刷播放的爬虫，好用！怎么没早点看见hh&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="web" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/web/"/>
    
    
    <category term="web" scheme="https://hoverlod.github.io/tags/web/"/>
    
    <category term="爬虫" scheme="https://hoverlod.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>音乐视频测试</title>
    <link href="https://hoverlod.github.io/2022/01/29/%E9%9F%B3%E4%B9%90%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95/"/>
    <id>https://hoverlod.github.io/2022/01/29/%E9%9F%B3%E4%B9%90%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95/</id>
    <published>2022-01-28T22:52:16.000Z</published>
    <updated>2022-01-28T23:01:43.955Z</updated>
    
    <content type="html"><![CDATA[<p>咳，麦克风测试——</p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1378531&auto=1&height=66"></iframe><iframe src="//player.bilibili.com/player.html?aid=764246069&bvid=BV1Pr4y1k7uG&cid=441572098&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    
    <summary type="html">&lt;p&gt;咳，麦克风测试——&lt;/p&gt;</summary>
    
    
    
    
    <category term="blog" scheme="https://hoverlod.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>帮ZZ搭github博客</title>
    <link href="https://hoverlod.github.io/2022/01/29/%E5%B8%AEzz%E6%90%ADgithub%E5%8D%9A%E5%AE%A2/"/>
    <id>https://hoverlod.github.io/2022/01/29/%E5%B8%AEzz%E6%90%ADgithub%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-01-28T20:04:30.000Z</published>
    <updated>2022-04-12T08:26:10.547Z</updated>
    
    <content type="html"><![CDATA[<p>博客基本配好了，给zz整个同款，虽然她平时不写博客^ ^</p><span id="more"></span><p>博客本身倒没什么，改改配置文件，生成静态页面，就等着把deploy那个文件夹上传了。</p><p>要来github账号建库：<code>zz.github.io</code>，怎么把本地的东西传上github？直接<code>hexo d</code>提交会报403没权限，用协作吧。发了协作邀请，在平台并没看到消息，后来发现发到邮件去了（这就是文化差异吗😂）。总之用协作身份上传了。</p><p>没想到光这样不够，需要去setting选好内容是main分支然后保存，下面还必须选一个theme（忘掉了），然后就会多出一个jekyll的配置文件，这文件当然是多余的，把它删掉，这时候网页才配好了。成果：<a href="https://oblivate1.github.io/">zz’s blog (oblivate1.github.io)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;博客基本配好了，给zz整个同款，虽然她平时不写博客^ ^&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="配置" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="blog" scheme="https://hoverlod.github.io/tags/blog/"/>
    
    <category term="git" scheme="https://hoverlod.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>关于浏览器的沉浸阅读器</title>
    <link href="https://hoverlod.github.io/2022/01/29/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B2%89%E6%B5%B8%E9%98%85%E8%AF%BB%E5%99%A8/"/>
    <id>https://hoverlod.github.io/2022/01/29/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B2%89%E6%B5%B8%E9%98%85%E8%AF%BB%E5%99%A8/</id>
    <published>2022-01-28T17:33:52.000Z</published>
    <updated>2022-04-14T17:48:00.318Z</updated>
    
    <content type="html"><![CDATA[<p>阅读器什么时候能一统天下</p><span id="more"></span><p>发个牢骚。CSDN的页面很乱，还有半屏的广告弹窗，上个油猴脚本；简书的右侧边栏推荐八竿子打不着的文章，adblock屏蔽；博客园有的界面布局不合理，加上live2d挡着，F12手动改。。</p><p>浏览器要是推出统一的功能把正文提取出来，统一格式多好。但是人网站不这么想，肯定千方百计避免被屏蔽广告咯。到现在大部分我常用的中文网站都不支持edge阅读器。而且最近edge菜单栏找不到这个选项了，这功能不是被抛弃了吧。</p><p>现在可以按F9使用，或者在url前面加<code>read:</code>，强制使用。不过就连windows自个的技术支持网站用阅读器也有bug，比如不能载图。本来我在想，怎么才能让自个博客支持阅读器，但是不知道它的机制怎么搞嘛。</p><hr><p>看到好多人给简悦打广告于是下过来试试，愣是没找到开关在哪，原来它变红色的时候才能用。但是开头提到的网站居然都不能用啊。说好听点，或许我没有找到合适的应用场景。</p><p>看了它的文档是这么说的：</p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/image-20220129045455075.png" style="zoom:75%;" /><p>于是又去了几个hexo和wordpress博客，发现并不能用，遂放弃。</p><hr><p>不知道什么时候关注了Kenshin的推，他有些文字让我对简悦有所改观😂毕竟也是个爱用RSS的，同道中人。<br>放一篇他的说明：<a href="https://kenshin.wang/blog/#/posts/16">什么才是阅读模式该有的样子？ - Kenshin’s Blog</a></p><p>但是下回来果然还是没适配多少我常看的站点，算了。</p><hr><p>关于阅读器实现，找到一些有意思的：</p><p><a href="https://www.zhihu.com/question/35922411/answer/1849113305">浏览器的阅读模式怎么实现？ - 知乎 (zhihu.com)</a></p><p><a href="http://www.majiang.life/blog/make-article-more-readable/">阅读模式是如何实现的? - 码匠笔记 (majiang.life)</a></p><p><a href="http://mogoweb.github.io/blog/2013/08/30/implement-read-mode-in-browser/">浏览器中实现阅读模式 - 放飞梦想 (mogoweb.github.io)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;阅读器什么时候能一统天下&lt;/p&gt;</summary>
    
    
    
    <category term="乱弹" scheme="https://hoverlod.github.io/categories/%E4%B9%B1%E5%BC%B9/"/>
    
    
    <category term="web" scheme="https://hoverlod.github.io/tags/web/"/>
    
    <category term="浏览器" scheme="https://hoverlod.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Icarus主题定制</title>
    <link href="https://hoverlod.github.io/2022/01/27/icarus%E4%B8%BB%E9%A2%98%E5%AE%9A%E5%88%B6%E2%80%94%E2%80%94%E5%AD%97%E4%BD%93%E3%80%81%E8%BE%B9%E6%A0%8F%E5%AE%BD%E5%BA%A6/"/>
    <id>https://hoverlod.github.io/2022/01/27/icarus%E4%B8%BB%E9%A2%98%E5%AE%9A%E5%88%B6%E2%80%94%E2%80%94%E5%AD%97%E4%BD%93%E3%80%81%E8%BE%B9%E6%A0%8F%E5%AE%BD%E5%BA%A6/</id>
    <published>2022-01-27T15:06:09.000Z</published>
    <updated>2022-04-11T08:46:59.214Z</updated>
    
    <content type="html"><![CDATA[<p>调整博客字体、修改边栏与正文宽度</p><span id="more"></span><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>icarus默认字体比较小，想要改大点。</p><p>需要找到字体所在css文件。首先去source\css那找找看</p><figure class="highlight stylus"><figcaption><span>themes\icarus\source\css\style.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Base CSS framework</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/base&#x27;</span>  <span class="comment">// &lt;- !</span></span><br><span class="line"><span class="comment">// Helper classes &amp; mixins</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/helper&#x27;</span></span><br><span class="line"><span class="comment">// Icarus components</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/button&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/card&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/article&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/navbar&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/footer&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/pagination&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/timeline&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/search&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/codeblock&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/widget&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/donate&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/plugin&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;../../include/style/responsive&#x27;</span></span><br></pre></td></tr></table></figure><p>转移阵地，找到了。</p><figure class="highlight stylus"><figcaption><span>\themes\icarus\include\style\base.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bulma-stylus-root = <span class="string">&#x27;../../../../node_modules/bulma-stylus/stylus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------------------------------</span></span><br><span class="line"><span class="comment"> *   Override Bulma CSS Framework</span></span><br><span class="line"><span class="comment"> * --------------------------------- */</span></span><br><span class="line"><span class="variable">$body</span>-size ?= <span class="number">14px</span>   <span class="comment">// 字体大小在这里，我改成了15px</span></span><br><span class="line"><span class="variable">$body</span>-<span class="attribute">background-color</span> ?= <span class="number">#f7f7f7</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$family</span>-sans-serif ?= Ubuntu, Roboto, <span class="string">&#x27;Open Sans&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, sans-serif</span><br><span class="line"><span class="variable">$family</span>-<span class="selector-tag">code</span> ?= <span class="string">&#x27;Source Code Pro&#x27;</span>, monospace, <span class="string">&#x27;Microsoft YaHei&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$size</span>-<span class="number">7</span> ?= .<span class="number">85rem</span></span><br><span class="line"><span class="variable">$size</span>-small ?= .<span class="number">75rem</span></span><br></pre></td></tr></table></figure><p>这里也是最主要的css所在地了。</p><h2 id="边栏"><a href="#边栏" class="headerlink" title="边栏"></a>边栏</h2><h3 id="修改宽度"><a href="#修改宽度" class="headerlink" title="修改宽度"></a>修改宽度</h3><p>左边layout是正文，分成了1栏、2栏、3栏的情况。tablet：平板，desktop：一般电脑屏幕大小，widescreen：宽屏。右边widgets是侧边栏，有2栏和3栏的情况。</p><p>我把两栏情况下layout的8-8-8改成了9-9-9，同时吧widgets的从4-4-4改成3-3-3，让它们相加仍然等于12。<strong>注意</strong>：只改layout是不够的，会导致整体不居中。</p><p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/image-20220127234705975.png"></p><h3 id="不同页面对应不同布局"><a href="#不同页面对应不同布局" class="headerlink" title="不同页面对应不同布局"></a>不同页面对应不同布局</h3><p>参考官方文档：</p><p><a href="https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7">Icarus用户指南 - 主题配置 - Icarus (ppoffice.github.io)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;调整博客字体、修改边栏与正文宽度&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="配置" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="blog" scheme="https://hoverlod.github.io/tags/blog/"/>
    
    <category term="css" scheme="https://hoverlod.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>NUDTcourse开发日志</title>
    <link href="https://hoverlod.github.io/2022/01/05/NUDTcourse%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    <id>https://hoverlod.github.io/2022/01/05/NUDTcourse%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</id>
    <published>2022-01-05T10:06:00.000Z</published>
    <updated>2022-04-17T05:24:31.926Z</updated>
    
    <content type="html"><![CDATA[<p>这不是软件计划书or升级日志，是写给自己的报告：记录知识点、相关工具的配置和使用、debug过程。</p><p>目的：记录开发收获，便于回顾总结，力求简练。</p><span id="more"></span><p>NUDTcourse是数据库课要求的一个信息管理系统项目，前后端分离，使用react、LNMP。</p><hr><h2 id="导出excel"><a href="#导出excel" class="headerlink" title="导出excel"></a>导出excel</h2><p>后端：POI、easyExcel（都是java）</p><p>前端：js实现⬇</p><p><a href="https://www.cnblogs.com/youryida/p/9275615.html">js文件操作之——导出Excel (js-xlsx) - youryida - 博客园 (cnblogs.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1666219">基于前端JS导出Excel文件（减轻服务端压力） - 云+社区 - 腾讯云 (tencent.com)</a></p><h2 id="bug-API接口问题"><a href="#bug-API接口问题" class="headerlink" title="bug: API接口问题"></a>bug: API接口问题</h2><p>描述：当时误认为php未正确接收表单。</p><p>详细：萌新不知道怎么做API测试，打开网络能看到预检（这是第一次听说预检是啥）成功了，后面加一个请求到的文件，但是点开啥都没。</p><p><strong>当时的写法</strong>（是正确的。记得json要转字符串）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(params)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>php接收</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// // 获取请求</span></span><br><span class="line">    <span class="variable">$data</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line">    <span class="variable">$data</span> = json_decode(<span class="variable">$data</span>,<span class="literal">true</span>);</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$Sno</span>, <span class="subst">$Sname</span>, <span class="subst">$Sgender</span>, <span class="subst">$Sbirth</span>, <span class="subst">$Major</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>自己写了个测试：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;fn()&quot;</span>&gt;</span>.<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;t&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    url = <span class="string">&quot;.../test.php&quot;</span>;</span></span><br><span class="line"><span class="javascript">    fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        fetch(url, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span>, <span class="comment">//跨域</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;...&#125;)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">rp</span>) =&gt;</span> rp.text())</span></span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;t&#x27;</span>).innerHTML = response;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>测试发现发送其实成功了，如果直接点网络里请求的php文件是什么都看不到的，误判了。</p><p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/test-html-ajax%E6%88%90%E5%8A%9F.png" alt="test-html-ajax成功"></p><p>当时的回应用console.log才能看，原来sql语句错了，取到的变量两边加上单引号。。</p><p>结论：自己不熟悉的项目or框架变数太多，可以自己<strong>做一个小demo重现bug</strong>。当时直接在项目里改，不知道bug出在ajax还是react，范围太大无处下手。</p><h2 id="bug-php中文乱码"><a href="#bug-php中文乱码" class="headerlink" title="bug: php中文乱码"></a>bug: php中文乱码</h2><ul><li><p>php从数据库取的数据是<code>??</code>：</p><p>解决：php里加上<code>mysqli_query($con,&quot;SET NAMES &#39;utf8mb4&#39;&quot;);</code></p></li><li><p>php的array转码后变成了unicode码：<code>&#123;&quot;S1&quot;:&quot;\u59d3\u540d&quot;:&quot;\u8d75\u4ea6&quot;,&quot;\u6027\u522b&quot;:&quot;\u5973&quot;,&quot;\u5e74\u9f84&quot;:&quot;17&quot;,&quot;\u7cfb\u522b&quot;:&quot;\u5973&quot;&#125;...</code></p><p>解决：给json_encode加上第二个参数<code>JSON_UNESCAPED_UNICODE</code>。</p></li></ul><p><a href="https://www.php.cn/php-weizijiaocheng-431546.html">php json_encode 中文不转码-php教程-PHP中文网</a></p><p><a href="https://www.cnblogs.com/Renyi-Fan/p/11682199.html">PHP json_encode函数的参数说明 - 范仁义 - 博客园 (cnblogs.com)</a></p><h2 id="前端路由react-routerV6"><a href="#前端路由react-routerV6" class="headerlink" title="前端路由react-routerV6"></a>前端路由react-routerV6</h2><h3 id="后端配置问题"><a href="#后端配置问题" class="headerlink" title="后端配置问题"></a>后端配置问题</h3><p>场景：生产环境，切换页面时向后端发送了请求，但因为那个url是做的前端路由，后端找不到页面，返回服务器的404页面。</p><p>——为什么在开发环境没有发生404呢？本地启动react项目也是给配了服务器的（像vue用了express），而项目给你把这个服务器配好了。但是生产环境本来是后端路由的，需要手动来配。</p><ul><li>要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该<strong>返回同一个 <code>index.html</code> 页面</strong>，这个页面就是你 app 依赖的页面。</li><li>给个警告：这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 <code>index.html</code> 文件，404的URL规则自然是交给前端路由来决定了。你应该<strong>在 Vue （React）应用里面覆盖所有的路由情况，然后再给出一个 404 页面</strong>。</li></ul><p>tomcat配置：直接修改了conf/web.xml，暴力解决（但是控制台还能看见404报错）。</p><p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/tomcat%E8%BF%94%E5%9B%9E404-%E4%BF%AE%E6%94%B9web%E3%80%82xml.png" alt="tomcat返回404-修改web.xml"></p><p>【我以为只会跳到index.html，结果router开始工作，路由到了正确的页面。助かる。。】</p><p>参考：</p><p><a href="https://www.cnblogs.com/songyao666/p/11470030.html">说一说前端路由与后端路由的区别 - 前端南玖 - 博客园 (cnblogs.com)</a></p><p><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90">HTML5 History 模式 | Vue Router (vuejs.org)</a></p><p><a href="https://www.lervor.com/archives/20/">解决单页应用 history 模式下部署 tomcat 刷新页面出现 404 - 瞭月 (lervor.com)</a></p><h4 id="js主动使用路由"><a href="#js主动使用路由" class="headerlink" title="js主动使用路由"></a>js主动使用路由</h4><p>一般是在页面Link元素配路由，但有时候需要用js实现跳转（比如提交表单后跳转/刷新页面）。</p><p>V6文档提供的方法如下，没玩会，目前用的是原生方法。</p><p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/image-20211124010526398.png"></p><p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/image-20211124010805474.png"></p><ul><li>组件必须是函数Hook类型，不能是class类型</li><li>2这里，useNavigate要在组件里调用，不能套在它的函数里调用</li></ul><p>我的遭遇：</p><ul><li><p>使用上面官方的功能，发现没法跳转到当前页面实现刷新。但是为了重新渲染表格，我先跳到首页再跳回来，白白跳转了两次。而且如果使用返回键前进键，会发现网页的乱跳行为，很影响体验orz</p></li><li><p>不用这个用原生可以吗？试了<code>reload()</code>、<code>location.reload()</code>不行，**<code>window.location.href=&quot;XXX&quot;</code>可以**，那就用这个了。</p></li><li><p>V5已经不能用<code>this.props.history</code>了的样子。V6更是改，直接搜博客大多过时了</p></li></ul><p>局部结论：中途把凑合能用的东西强制套上去，浪费了时间。没学完没法避免，但是尽量不要到处套自己会的某方法，有时间要先查查官方想让你怎么做。</p><p>参考：</p><p><a href="https://reactrouter.com/docs/en/v6/api#usenavigate">React Router | API Reference</a></p><p><a href="https://zh-hans.reactjs.org/warnings/invalid-hook-call-warning.html">警告：非法 Hook 调用 – React (reactjs.org)</a></p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p><a href="https://segmentfault.com/a/1190000012099112">npm常用命令及参数详解 - SegmentFault 思否</a></p><p><a href="https://www.cnblogs.com/WD-NewDemo/p/11141384.html">使用“npm init”初始化项目 - 你是远方 - 博客园 (cnblogs.com)</a></p><h2 id="Art-template"><a href="#Art-template" class="headerlink" title="Art-template"></a>Art-template</h2><p>一开始使用了art-template，换react后就用jsx处理了，主要就是循环生成列表、表格，其他功能不太用的上。</p><p><a href="https://www.jianshu.com/p/d8d8e19157e0">模板引擎 – art-template</a>   <a href="https://www.zhihu.com/question/61523320">现在还有学习模版引擎的必要吗</a></p><p><a href="https://www.jianshu.com/p/b5dffff259be">前端模版引擎 - artTemplate 【上】 - 简书 (jianshu.com)</a> (有两个详细的demo!!)</p><p><a href="https://www.jianshu.com/p/e7f3d0c93ed3">前端模版引擎 - art-template 【下】 - 简书 (jianshu.com)</a></p><ul><li><code>template(temid, json)</code>如果接收不到json或者第二个参数其实是空的，返回的不是渲染好的html而是编译了一个渲染函数（看见函数里边有的字符都被转义了还有很多\n，不懂，懵逼）</li><li>如果返回回来的 JSON 数据是类似数组数据的话，是没有办法直接渲染的。需要对数据做如下包装，才能正常渲染：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">template:</span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;&#123;each student value&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value.studentNumber&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value.gender&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;value.major&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">json格式:</span><br><span class="line">&#123;&quot;student&quot;: php返回的json数组，里面每组的参数：studentNumber、name...&#125;</span><br></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><p><a href="https://segmentfault.com/q/1010000010783867">如何将json对象转成数组??? - SegmentFault 思否</a></p><p><a href="https://www.cnblogs.com/bgwhite/p/10000230.html">js字符串的裁剪 - 狗尾草的博客 - 博客园 (cnblogs.com)</a></p><h3 id="JSON使用变量"><a href="#JSON使用变量" class="headerlink" title="JSON使用变量"></a>JSON使用变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义空对象</span></span><br><span class="line"><span class="keyword">let</span> json = &#123;&#125;;</span><br><span class="line"><span class="comment">// 使用变量作为key，只能这种写法，否则变量名会被当成字符串</span></span><br><span class="line"><span class="comment">// 例如json.k，作用和json = &#123; k: &quot;value&quot; &#125;、json.k = &quot;value&quot;一样</span></span><br><span class="line"><span class="keyword">let</span> k = <span class="string">&quot;。。。&quot;</span>;</span><br><span class="line">json[k] = <span class="string">&quot;value&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="异步问题"><a href="#异步问题" class="headerlink" title="异步问题"></a>异步问题</h3><p>本来写成两个函数<code>load</code>、<code>render</code>结果<code>render</code>接受不到json。</p><p>ajax是典型的异步编程，必须学会回调函数、then（关于promise）。等前面语句运行完有了结果，再执行下面的。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then">Promise.prototype.then() - JavaScript | MDN (mozilla.org)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">tempID, url, id</span>) </span>&#123;</span><br><span class="line">    fetch(url)</span><br><span class="line">        .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> html = template(tempID, &#123; <span class="string">&quot;student&quot;</span>: data &#125;);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(id).innerHTML = html;</span><br><span class="line">            <span class="built_in">console</span>.log(&#123; <span class="string">&quot;student&quot;</span>: data &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><p><a href="https://www.cnblogs.com/museluo/p/4492593.html">php字符串拼接 - museluo - 博客园 (cnblogs.com)</a></p><p>多行字符串 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span>=<span class="string">&lt;&lt;&lt;STR</span></span><br><span class="line"><span class="string">&#x27;ok&#x27;,&quot;hello&quot;</span></span><br><span class="line"><span class="string">I will</span></span><br><span class="line"><span class="string"><span class="subst">&#123;$str1&#125;</span></span></span><br><span class="line"><span class="string">STR</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment">其中三个小于号代表多行字符串的输入，STR是字符串界定符，界定符的名字可以自己定义，两个界定符之间的内容就是多行字符串。其中的单引号双引号可以直接输出而不必转义，当然里面也可以直接插入变量，输出是会自动替换变量值的</span></span><br><span class="line"><span class="comment">****/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="管理技巧"><a href="#管理技巧" class="headerlink" title="管理技巧"></a>管理技巧</h2><h3 id="MVP产品原则"><a href="#MVP产品原则" class="headerlink" title="MVP产品原则"></a><a href="https://www.jianshu.com/p/3efba995b652">MVP产品原则</a></h3><p>开发一个最小的可行产品，从而快速试错。每次迭代，焦点都在核心流程上</p><h2 id="前后端对接"><a href="#前后端对接" class="headerlink" title="前后端对接"></a>前后端对接</h2><h3 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h3><p>⚠还未良好实践</p><h3 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h3><p>⚠还未良好实践</p><h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h4><p>hmac主要应用在身份验证中，如下是它的使用过程： 1. 客户端发出登录请求（假设是浏览器的GET请求） 2. 服务器返回一个随机值，并在会话中记录这个随机值 3. 客户端将该随机值作为密钥，用户密码进行hmac运算，然后提交给服务器 4. 服务器读取用户数据库中的用户密码和步骤2中发送的随机值做与客户端一样的hmac运算，然后与用户发送的结果比较，如果结果一致则验证用户合法。</p><p>在这个过程中，可能遭到安全攻击的是服务器发送的随机值和用户发送的hmac结果，而对于截获了这两个值的黑客而言这两个值是没有意义的，绝无获取用户密码的可能性，随机值的引入使hmac只在当前会话中有效，大大增强了安全性和实用性。</p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><h4 id="https"><a href="#https" class="headerlink" title="https"></a>https</h4><h3 id="分离方式"><a href="#分离方式" class="headerlink" title="分离方式"></a>分离方式</h3><ol><li>半分离式，前端负责开发页面，通过接口（AJAX）获取数据跟页面进行数据绑定（类似原来的JSP标签方式），最终是由前端把页面渲染出来，后端只提供数据接口，前端的页面仍需要跟后端服务部署到同一个web容器中，如果web容器挂掉，那么会直接导致页面访问不了</li><li>全分离式， 前端负责的内容同上，只是前端页面单独部属在一个web容器，前端和后端相互不影响，如果是后端容器挂了，前端可以访问，只是请求不到数据</li><li>还有一种就是 在前端和后端之间加入node作为服务，node提供一些接口服务，又或者部分页面需要服务端渲染，又或者需要处理一些大并发的问题，如果是需要涉及到一些大数据的查询或者运算，再由node层去跟后端服务（java服务等）进行数据交互，再由node 接口供给前端</li></ol><p>用了react后可以全分离也可以都放在nginx下（前端使用的接口是绝对地址，跨域也解决了）</p><p>后端是通过nginx挂载php的fastcgi，接收前端发来的请求，对数据库进行相关操作。</p><h3 id="前端和后端数据交互的基本知识和常见方式"><a href="#前端和后端数据交互的基本知识和常见方式" class="headerlink" title="前端和后端数据交互的基本知识和常见方式"></a><a href="https://www.cnblogs.com/cn-oldboy/p/12349783.html">前端和后端数据交互的基本知识和常见方式</a></h3><ul><li>用 form 可以发请求，但是会刷新页面或新开页面；</li><li>用 a 可以发 get 请求，但是也会刷新页面或新开页面；</li><li>用 img 可以发 get 请求，但是只能以图片的形式展示；</li><li>用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示；</li><li>用 script 可以发 get 请求，但是只能以脚本的形式运行。</li><li>用 jsonp 实现请求，支持跨域请求。</li><li>用 ajax 实现页面无刷新的请求。</li></ul><h3 id="ajax技术"><a href="#ajax技术" class="headerlink" title="ajax技术"></a>ajax技术</h3><p>XMLHttpRequest，结构比较混乱（但出现很久了，使用规模巨大）；fetch，新兴的ajax技术（他俩是平起平坐的关系）。axios库是对XHR的封装，而上面两个是原生api。</p><p>综合考虑开发难度和兼容性问题，决定选用axios进行前后端的信息交互。  用了fetch原生。</p><h2 id="双向通信"><a href="#双向通信" class="headerlink" title="双向通信"></a>双向通信</h2><p><a href="https://www.cnblogs.com/best/p/5695570.html">WebSocket与消息推送 - 张果 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.zhihu.com/question/37503039">如何在大型 Web 应用中保持数据的同步更新？ - 知乎 (zhihu.com)</a></p><p><strong>轮询</strong>：客户端定时向服务器发送Ajax请求，服务器接到请求后马上返回响应信息并关闭连接。 优点：后端程序编写比较容易。 缺点：请求中有大半是无用，浪费带宽和服务器资源。</p><p>实例：适于小型应用【针对管理员开启轮询怎么样orz】。</p><p><strong>长轮询</strong>：客户端向服务器发送Ajax请求，服务器接到请求后hold住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。 优点：在无消息的情况下不会频繁的请求，耗费资小。 缺点：服务器hold连接会消耗资源，返回数据顺序无保证，难于管理维护。 Comet异步的ashx，</p><p>实例：WebQQ、Hi网页版、Facebook IM。</p><p><strong>长连接</strong>：在页面里嵌入一个隐蔵iframe，将这个隐蔵iframe的src属性设为对一个长连接的请求或是采用xhr请求，服务器端就能源源不断地往客户端输入数据。 优点：消息即时到达，不发无用请求；管理起来也相对方便。 缺点：服务器维护一个长连接会增加开销。</p><p>实例：Gmail聊天</p><p><strong>Websocket:</strong></p><p>WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。依靠这种技术可以实现客户端和服务器端的长连接，双向实时通信。</p><p>特点：事件驱动、异步、使用ws或者wss协议的客户端socket，能够实现真正意义上的推送功能</p><p>缺点：少部分浏览器不支持，浏览器支持的程度与方式有区别。</p><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p><a href="https://segmentfault.com/a/1190000009971254">cors跨域之简单请求与预检请求（发送请求头带令牌token） - SegmentFault 思否</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">使用 Fetch - Web API 接口参考 | MDN (mozilla.org)</a></p><h3 id="允许跨域"><a href="#允许跨域" class="headerlink" title="允许跨域"></a>允许跨域</h3><p>配置nginx：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Origin: <span class="tag">&lt;<span class="name">origin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>最早被提出来的本地存储方式，在每一次 http 请求携带 Cookie，可以判断多个请求是不是同一个用户发起的，特点是：</p><ul><li>有安全问题，如果被拦截，就可以获得 Session 所有信息，然后将 Cookie 转发就能达到目的。(关于攻击和防范本可以看另一篇文章 <a href="https://juejin.cn/post/6991888178890145828">吃透浏览器安全（同源限制/XSS/CSRF/中间人攻击）</a>)</li><li>每个域名下的Cookie不能超过20个，大小不能超过4kb</li><li>Cookie在请求新页面的时候都会被发送过去</li><li>Cookie创建成功名称就不能修改</li><li>跨域名不能共享Cookie</li></ul><p><strong>如果要跨域名共享Cookie有两个方法</strong></p><ul><li>用 Nginx 反向代理</li><li>在一个站点登录之后，往其他网站写 Cookie。服务端的 Session 存储到一个节点，Cookie 存储 SessionId</li></ul><p><strong>Cookie的使用场景</strong></p><ul><li>最常见的就是 Cookie 和 Session 结合使用，将 SessionId 存储到 Cookie 中，每次请求都会带上这个 SessionId 这样服务端就知道是谁发起的请求</li><li>可以用来统计页面的点击次数</li></ul><p><strong>Cookie都有哪些字段</strong></p><ul><li><code>Name</code>、<code>Size</code> 顾名思义</li><li><code>Value</code>：保存用户登录状态，应该将该值加密，不能使用明文</li><li><code>Path</code>：可以访问此 Cookie 的路径。比如 <a href="http://juejin.cn/editor">juejin.cn/editor</a> ，path是/editor，只有/editor这个路径下的才可以读取 Cookie</li><li><code>httpOnly</code>：表示禁止通过 JS 访问 Cookie，减少 XSS 攻击。</li><li><code>Secure</code>：只能在 https 请求中携带</li><li><code>SameSite</code>：规定浏览器不能在跨域请求中携带 Cookie 减少 CSRF 攻击，详细说明<a href="https://juejin.cn/post/6991888178890145828">看这里</a></li><li><code>Domain</code>：域名，跨域或者 Cookie 的白名单，允许一个子域获取或操作父域的 Cookie，实现单点登录的话会非常有用</li><li><code>Expires</code>/<code>Max-size</code>：指定时间或秒数的过期时间，没设置的话就和 Session 一样关闭浏览器就失效</li></ul><h2 id="LNMP配置"><a href="#LNMP配置" class="headerlink" title="LNMP配置"></a>LNMP配置</h2><p>原理太长不看：<a href="https://blog.csdn.net/hguisu/article/details/8930668">Nginx工作原理和优化总结</a></p><p>💥配置文件详解：<a href="https://www.jianshu.com/p/39ae9f01d127">Nginx和PHP的配置</a></p><p><a href="https://blog.csdn.net/aloha12/article/details/88852714">php环境搭建（正确配置nginx和php）</a></p><ul><li>Nginx 是非阻塞IO &amp; IO复用模型，通过操作系统提供的类似 <a href="https://zh.wikipedia.org/zh-cn/Epoll">epoll</a> 的功能，可以在一个线程里处理多个客户端的请求。Nginx 的进程就是线程，即每个进程里只有一个线程，但这一个线程可以服务多个客户端。</li><li>fastCGI ：为了解决不同的语言解释器(如php、python解释器)与webserver的通信，于是出现了cgi协议。只要你按照cgi协议去编写程序，就能实现语言解释器与webserver的通信。如php-cgi程序。但是webserver每收到一个请求，都会去fork一个cgi进程，请求结束再kill掉这个进程。这样有10000个请求，就需要fork、kill php-cgi进程10000次。 fastcgi是cgi的改良版本。fast-cgi每次处理完请求后，不会kill掉这个进程，而是保留这个进程，使这个进程可以一次处理多个请求。</li></ul><p><a href="https://zhuanlan.zhihu.com/p/69072041">什么是正向代理与反向代理</a></p><p>正向代理是从客户端的角度出发，服务于特定用户（比如说一个局域网内的客户）以访问非特定的服务；反向代理正好与此相反，从服务端的角度出发，服务于非特定用户（通常是所有用户），已访问特定的服务。</p><h3 id="URI规范"><a href="#URI规范" class="headerlink" title="URI规范"></a>URI规范</h3><h4 id="url-设计规范"><a href="#url-设计规范" class="headerlink" title="url 设计规范"></a><a href="https://www.cnblogs.com/yorian/archive/2012/04/10/2440233.html">url 设计规范</a></h4><p>管理员可以重新组织服务器上的文件系统结构，而无需改动URI，这就需要URI和真实的服务器文件系统结构之间有一个映射机制，而不是生硬的对应。</p><h4 id="隐藏文件后缀名"><a href="#隐藏文件后缀名" class="headerlink" title="隐藏文件后缀名"></a>隐藏文件后缀名</h4><p>带后缀名不够美观：<a href="https://zhuanlan.zhihu.com/p/110901814">nginx一招配置，帮你快速隐藏php后缀名</a></p><p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/%E9%9A%90%E8%97%8F%E5%90%8E%E7%BC%80%E5%90%8D.png" alt="隐藏后缀名"></p><h2 id="零散的日记"><a href="#零散的日记" class="headerlink" title="零散的日记"></a>零散的日记</h2><h3 id="12-15"><a href="#12-15" class="headerlink" title="12.15"></a>12.15</h3><p>封装了fetch，ajax简洁多了。想要使用<a href="https://restfulapi.cn/">RESTful 风格</a>，用四种请求方法分别对应了增删改查。但没有用http状态码，url布置、JWT鉴权都还不会做，实在称不上RESTful。</p><p><img src="https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/image-20220127193105496.png" alt="image-20220127193105496"></p><h3 id="11-25"><a href="#11-25" class="headerlink" title="11.25"></a>11.25</h3><p><a href="https://www.cnblogs.com/abcdecsf/p/13624541.html">React 踩坑–input中的value与defaultValue - 墨西哥郊外的晚上* - 博客园 (cnblogs.com)</a></p><p>关于http<strong>请求规范</strong>：</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Using Fetch - Web APIs | MDN (mozilla.org)</a></p><p><a href="https://stackoverflow.com/questions/40284338/javascript-fetch-delete-and-put-requests">reactjs - Javascript: Fetch DELETE and PUT requests - Stack Overflow</a></p><p><a href="https://blog.csdn.net/HermitSun/article/details/89889743">关于在GET请求中使用body_HermitSun的博客</a></p><p>大概只有get不该带body，其他带了都有情可原（它们改服务器数据了）</p><h3 id="11-23"><a href="#11-23" class="headerlink" title="11.23"></a>11.23</h3><p>头次验收。老师建议：用java。php是做小网站的。</p><p>我的理解：php太好学了，功能上、性能上不够强。（直接用php是很简洁，所以很多功能不能实现。要想php实现和java一样的功能，也是要学很复杂的框架的）</p><p>前端打算换react了，脚手架走起。</p><p>——1.27：这时候才换的？</p><h3 id="11-6"><a href="#11-6" class="headerlink" title="11.6"></a>11.6</h3><p>上完周五的数据库，重看了聂总的视频，结果从周五下午吸收到周六中午🤣</p><p>把看的网页堆这里（也有很多放到<a href="https://www.wolai.com/utcdbrcGPyFhgzAc18EE6z">前端工具 &amp; 概念 (wolai.com)</a>了，要及时回顾）</p><h3 id="10-29"><a href="#10-29" class="headerlink" title="10.29"></a>10.29</h3><p>师曰：直接显示个php页面上去还不行，要加Model层。<br>我：Model是啥？</p><p>查了巨多MVC、前后端分离、前端工程化（没写过后端，所以什么都拿到前端来搞）。又担心php是不是没有java先进，看了很多知乎上的【xxx是不是过时了】。光是看这些网页花了两三个晚上。确实学到不少，但凭现在的技术落不到实处，决定后端就用php。</p><p>收获：及时了解新技术。下面这些就算真过时了，学了对渐进入门有好处，可以帮助理解原理、学习设计方法。（拔草总是比种草有B格hh。但不同于劝退炒股，这是技术文章，看别人的批判是为了更好的了解，注意理性判断）</p><p><a href="https://www.zhihu.com/question/294282002">Spring MVC 过时了吗？ - 知乎 (zhihu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/45044649">为什么我劝你放弃mybatis - 知乎 (zhihu.com)</a></p><h3 id="10-20"><a href="#10-20" class="headerlink" title="10.20"></a>10.20</h3><p>开始系统写日志，顺路看到：<a href="https://www.cnblogs.com/ryuasuka/p/3375236.html">谈谈开发日志 - 飞鸟_Asuka </a>。</p><p>刚起步时获取的信息比较杂乱，需要整理总结吸收。</p><h3 id="10-15"><a href="#10-15" class="headerlink" title="10.15"></a>10.15</h3><p>BS5最佳学习网站：<a href="https://www.bootstrap.cn/doc/book/2.html">Bootstrap5 中文手册-俺老刘</a></p><p><strong>注意时效性</strong>，网上很多v3v4的，也不声明自己什么版本。官方文档最靠谱。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这不是软件计划书or升级日志，是写给自己的报告：记录知识点、相关工具的配置和使用、debug过程。&lt;/p&gt;
&lt;p&gt;目的：记录开发收获，便于回顾总结，力求简练。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="web" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/web/"/>
    
    
    <category term="js" scheme="https://hoverlod.github.io/tags/js/"/>
    
    <category term="react" scheme="https://hoverlod.github.io/tags/react/"/>
    
    <category term="php" scheme="https://hoverlod.github.io/tags/php/"/>
    
    <category term="nginx" scheme="https://hoverlod.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hoverlod.github.io/2022/01/01/hello-world/"/>
    <id>https://hoverlod.github.io/2022/01/01/hello-world/</id>
    <published>2021-12-31T16:00:00.000Z</published>
    <updated>2023-01-15T18:22:19.369Z</updated>
    
    <content type="html"><![CDATA[<p>hexo新人的使用记录</p><span id="more"></span><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p><code>hexo n(new) XXarticle</code></p><p>默认是post（文章），还有page（页面）、draft（草稿）。</p><h3 id="文章属性"><a href="#文章属性" class="headerlink" title="文章属性"></a>文章属性</h3><p>文章可以拥有如下属性：</p><table><thead><tr><th>Setting</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td>layout</td><td>文章类型</td><td>post、page、draft</td></tr><tr><td>title</td><td>文章的标题</td><td></td></tr><tr><td>date</td><td>创建日期</td><td>文件的创建日期</td></tr><tr><td>updated</td><td>修改日期</td><td>文件的修改日期</td></tr><tr><td>comments</td><td>是否开启评论</td><td>true</td></tr><tr><td>tags</td><td>标签</td><td></td></tr><tr><td>categories</td><td>分类</td><td></td></tr><tr><td>permalink</td><td>url中的名字</td><td>文件名</td></tr><tr><td>thumbnail</td><td>文章缩略图</td><td></td></tr><tr><td>cover</td><td>文章封面</td><td></td></tr></tbody></table><p>yaml格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标题和创建时间，自带</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-01-25 15:24:17</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">c1</span></span><br><span class="line"><span class="comment"># 多级分类，注意：这是父子关系，不是同级关系</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">c1</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">c2</span></span><br><span class="line"><span class="comment"># 同级分类</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">python</span>,<span class="string">模块</span>,<span class="string">PIL</span>]</span><br><span class="line"><span class="bullet">-</span> [<span class="string">python</span>,<span class="string">模块</span>,<span class="string">matplotlib</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单标签</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">tag1</span></span><br><span class="line"><span class="comment"># 多标签：</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tag1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tag2</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">tag1</span>,<span class="string">tag2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 摘要，写了就不会显示全文了</span></span><br><span class="line"><span class="comment"># 另一种：&lt;!-- more --&gt;，上面是摘要，下面是正文</span></span><br><span class="line"><span class="attr">excerpt:</span> <span class="string">我是摘要</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章封面</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">https://cdn.jsdelivr.net/gh/hoverloD/figbed@main/images/iceCube.jpg</span></span><br></pre></td></tr></table></figure><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建博客</span></span><br><span class="line">hexo init XXblog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 渲染source里的md文件</span></span><br><span class="line">hexo g(generate)</span><br><span class="line"><span class="comment"># 本地预览</span></span><br><span class="line">hexo s(server)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建议部署先先清除缓存，然后g渲染，最后d部署。</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署（遇到git认证问题（10054）：使用git自带的bash or 关掉代理）</span></span><br><span class="line">hexo d(deploy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还有，传到github后，有时blog没有立刻变化，，我是强制刷新+等上一分钟，再看就好了</span></span><br></pre></td></tr></table></figure><p>注：新建、删除或修改<strong>文章</strong>后，不需要重启hexo server，刷新一下即可预览。</p><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><h3 id="toc-目录引入-误"><a href="#toc-目录引入-误" class="headerlink" title="toc 目录引入(误)"></a>toc 目录引入(误)</h3><p>toc安装文档地址：<a href="https://github.com/bubkoo/hexo-toc">https://github.com/bubkoo/hexo-toc</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-toc --save</span><br></pre></td></tr></table></figure><p>并修改hexo目录下的配置文件_config.yml文件,添加toc的相关配置，参数具体含义请查看上面链接里面的readme。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">toc:</span><br><span class="line">  maxdepth: 3</span><br><span class="line">  class: toc</span><br><span class="line">  slugify: transliteration</span><br><span class="line">  decodeEntities: false</span><br><span class="line">  anchor:</span><br><span class="line">    position: after</span><br><span class="line">    symbol: &#x27;#&#x27;</span><br><span class="line">    style: header-anchor</span><br></pre></td></tr></table></figure><p>参考：<a href="https://tru-xu.github.io/2019/05/10/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91/">hexo搭建博客踩坑 | Home page (tru-xu.github.io)</a></p><p>掉坑了。不显示toc是因为<strong>要在属性里加上<code>toc: true</code>，这谁知道啊&lt;( ‵□′)&gt;</strong></p><p>还好，刚装的插件remove掉，toc就正常了</p><h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>404.html放在主题的source文件夹即可，在本地测不出来（评论模块也是），放到github可以用。</p><h3 id="新增菜单栏选项"><a href="#新增菜单栏选项" class="headerlink" title="新增菜单栏选项"></a>新增菜单栏选项</h3><ol><li>添加新页面：hexo new page “xx”</li><li>在主题配置文件的menu中加上该页面</li><li>在zh-CN.yml文件中加上中文意思（看心情）</li></ol><h3 id="文档头"><a href="#文档头" class="headerlink" title="文档头"></a>文档头</h3><p>scaffolds文件夹下有draft、page和post的文档头模板，可参考上文的文章属性填写，示例：</p><figure class="highlight md"><figcaption><span>yourBlog\scaffolds\post.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">toc: true</span><br><span class="line"><span class="section">cover: https://cdn.jsdelivr.net/gh/yourID/figbed@main/images/.jpg</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><ol><li>添加草稿：hexo new draft “xx”</li><li>预览草稿：hexo server –draft</li><li>发布草稿：hexo publish draft “xx”</li></ol><h3 id="代码块加title"><a href="#代码块加title" class="headerlink" title="代码块加title"></a>代码块加title</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">``` language title</span></span><br><span class="line"><span class="code">your code</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight markdown"><figcaption><span>我是标题，你也可以在这里写代码路径。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## h2</span></span><br><span class="line">lorem</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.qcmoke.site/blog/hexo_code.html">hexo代码块进阶写法 | Qcmoke’s Blog</a>（博主的是Next，icarus没法加链接的样子）</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>站点配置完善后就不改了，不必</p><p>文章的md另外传git。（感想：门户博客这点还是方便啊）</p><h2 id="官网文档"><a href="#官网文档" class="headerlink" title="官网文档"></a>官网文档</h2><p>站点配置：</p><p><a href="https://hexo.io/zh-cn/docs/configuration.html">配置 | Hexo</a></p><p>主题配置（大头）：</p><p><a href="https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/">Icarus用户指南 - 主题配置</a></p><p><a href="https://ppoffice.github.io/hexo-theme-icarus/uncategorized/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/">常见问题 - Icarus </a></p><p><a href="https://github.com/ppoffice/hexo-theme-icarus/issues?q=">Issues · ppoffice/hexo-theme-icarus (github.com)</a></p><p>其他参考：</p><p><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/content/hexo-tutor-1.html">Hexo 入门指南 | Markdown 简单的世界</a></p><h2 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h2><p>待办：</p><ul><li><input checked="" disabled="" type="checkbox"> 文章部分显示（摘要）</li><li><input checked="" disabled="" type="checkbox"> RSS</li><li><input checked="" disabled="" type="checkbox"> 评论模块</li><li><input checked="" disabled="" type="checkbox"> 使用category，技术和非技术分开</li><li><input checked="" disabled="" type="checkbox"> 自定义文档头</li><li><input checked="" disabled="" type="checkbox"> 修改栅栏布局，加宽正文</li></ul><p>后期：</p><ul><li><input disabled="" type="checkbox"> LaTeX支持</li><li><input disabled="" type="checkbox"> 怎么配才能使用F9沉浸阅读</li><li><input checked="" disabled="" type="checkbox"> 文章<strong>悬浮导航</strong></li><li><input disabled="" type="checkbox"> 文章界面侧边栏只显示目录</li><li><input disabled="" type="checkbox"> 代码高亮换成ayu（那个版本的highlight.js没有）</li><li><input disabled="" type="checkbox"> SEO优化</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;hexo新人的使用记录&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="配置" scheme="https://hoverlod.github.io/categories/%E6%8A%80%E6%9C%AF/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="blog" scheme="https://hoverlod.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
